<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LumiSoft.Net</name>
    </assembly>
    <members>
        <member name="T:LumiSoft.Net.StreamLineReader">
            <summary>
            Stream line reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.StreamLineReader.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="strmSource">Source stream from where to read data. Reading begins from stream current position.</param>
        </member>
        <member name="M:LumiSoft.Net.StreamLineReader.ReadLine">
            <summary>
            Reads byte[] line from stream. NOTE: Returns null if end of stream reached.
            </summary>
            <returns>Return null if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.StreamLineReader.ReadLineString">
            <summary>
            Reads string line from stream. String is converted with specified Encoding property from byte[] line. NOTE: Returns null if end of stream reached.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.StreamLineReader.Encoding">
            <summary>
            Gets or sets charset encoding to use for string based methods. Default("") encoding is system default encoding.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StreamLineReader.CRLF_LinesOnly">
            <summary>
            Gets or sets if lines must be CRLF terminated or may be only LF terminated too.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">
            <summary>
            The exception that is thrown when a transport error occurs.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="errorText">Error text describing error.</param>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1">
            <summary>
            Implements generic multi value SIP header field.
            This is used by header fields like Via,Contact, ... .
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_HeaderField">
            <summary>
            Represents SIP message header field.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderField.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderField.SetMultiValue(System.Boolean)">
            <summary>
            Sets property IsMultiValue value.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_HeaderField.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_HeaderField.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_HeaderField.IsMultiValue">
            <summary>
            Gets if header field is multi value header field.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.Parse(System.String)">
            <summary>
            Parses multi value header field values.
            </summary>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.ToStringValue">
            <summary>
            Converts to valid mutli value header field value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.GetValues">
            <summary>
            Gets header field values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.Remove(System.Int32)">
            <summary>
            Removes value from specified index.
            </summary>
            <param name="index">Index of value to remove.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.Values">
            <summary>
            Gets header field values.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MultiValueHF`1.Count">
            <summary>
            Gets values count.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_RCValue">
            <summary>
            Implements SIP "rc-value" value. Defined in RFC 3841.
            </summary>
            <remarks>
            <code>
            RFC 3841 Syntax:
                rc-value  =  "*" *(SEMI rc-params)
                rc-params =  feature-param / generic-param
            </code>
            </remarks>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ValueWithParams">
            <summary>
            This base class for SIP data types what has parameters support.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Value">
            <summary>
            This base class for all SIP data types.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Value.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Value.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses single value from specified reader.
            </summary>
            <param name="reader">Reader what contains </param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Value.ToStringValue">
            <summary>
            Convert this to string value.
            </summary>
            <returns>Returns this as string value.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ValueWithParams.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ValueWithParams.ParseParameters(LumiSoft.Net.StringReader)">
            <summary>
            Parses parameters from specified reader. Reader position must be where parameters begin.
            </summary>
            <param name="reader">Reader from where to read parameters.</param>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ValueWithParams.ParametersToString">
            <summary>
            Convert parameters to valid parameters string.
            </summary>
            <returns>Returns parameters string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ValueWithParams.Parameters">
            <summary>
            Gets via parameters.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RCValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RCValue.Parse(System.String)">
            <summary>
            Parses "rc-value" from specified value.
            </summary>
            <param name="value">SIP "rc-value" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RCValue.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "rc-value" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RCValue.ToStringValue">
            <summary>
            Converts this to valid "rc-value" value.
            </summary>
            <returns>Returns "rc-value" value.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ACValue">
            <summary>
            Implements SIP "ac-value" value. Defined in RFC 3841.
            </summary>
            <remarks>
            <code>
            RFC 3841 Syntax:
                ac-value       = "*" *(SEMI ac-params)
                ac-params      = feature-param / req-param / explicit-param / generic-param
                                 ;;feature param from RFC 3840
                                 ;;generic-param from RFC 3261
                req-param      = "require"
                explicit-param = "explicit"
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ACValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ACValue.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP 'ac-value' value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ACValue.Parse(System.String)">
            <summary>
            Parses "ac-value" from specified value.
            </summary>
            <param name="value">SIP "ac-value" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ACValue.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "ac-value" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ACValue.ToStringValue">
            <summary>
            Converts this to valid "ac-value" value.
            </summary>
            <returns>Returns "ac-value" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ACValue.Require">
            <summary>
            Gets or sets 'require' parameter value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ACValue.Explicit">
            <summary>
            Gets or sets 'explicit' parameter value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum">
            <summary>
            vCal phone number type. Note this values may be flagged !
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.NotSpecified">
            <summary>
            Phone number type not specified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Preferred">
            <summary>
            Preferred phone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Home">
            <summary>
            Telephone number associated with a residence.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Msg">
            <summary>
            Telephone number has voice messaging support.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Work">
            <summary>
            Telephone number associated with a place of work.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Voice">
            <summary>
            Voice telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Fax">
            <summary>
            Fax number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Cellular">
            <summary>
            Cellular phone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Video">
            <summary>
            Video conferencing telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Pager">
            <summary>
            Paging device telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.BBS">
            <summary>
            Bulletin board system telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Modem">
            <summary>
            Modem connected telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.Car">
            <summary>
            Car-phone telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.ISDN">
            <summary>
            ISDN service telephone number.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.PhoneNumberType_enum.PCS">
            <summary>
            Personal communication services telephone number.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.Address">
            <summary>
            Rfc 2822 3.4 Address class. This class is base class for MailboxAddress and GroupAddress.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.Address.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="groupAddress">Spcified is address is group or mailbox address.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.Address.IsGroupAddress">
            <summary>
            Gets if address is group address or mailbox address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Address.Owner">
            <summary>
            Gets or sets owner of this address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.JunkingStream">
            <summary>
            This stream just junks all written data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.Flush">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method always throws a NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">This parameter is not used.</param>
            <param name="offset">This parameter is not used.</param>
            <param name="size">This parameter is not used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.JunkingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to write to the stream.</param>
            <param name="offset">The location in buffer from which to start writing data.</param>
            <param name="size">The number of bytes to write to the stream.</param>
        </member>
        <member name="P:LumiSoft.Net.JunkingStream.CanRead">
            <summary>
            Gets a value indicating whether the stream supports reading. This property always returns false.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.JunkingStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking. This property always returns false.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.JunkingStream.CanWrite">
            <summary>
            Gets a value that indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.JunkingStream.Length">
            <summary>
            Gets the length of the data available on the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.JunkingStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.Write_EventArgs">
            <summary>
            This class provides data for BeginWriteCallback delegate.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.Write_EventArgs.#ctor(System.Exception)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
        </member>
        <member name="P:LumiSoft.Net.IO.Write_EventArgs.Exception">
            <summary>
            Gets exception happened during write or null if operation was successfull.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.AuthUserEventHandler">
            <summary>
            Represents the method that will handle the AuthUser event for SMTP_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A AuthUser_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.FolderEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.FoldersEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.MessagesEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.MessagesItemsEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.MessageEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.SharedRootFoldersEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.GetFolderACLEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.DeleteFolderACLEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.SetFolderACLEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.GetUserACLEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.GetUserQuotaHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Server">
            <summary>
            IMAP server componet.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketServer">
            <summary>
            This is base class for Socket and Session based servers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.Dispose">
            <summary>
            Clean up any resources being used and stops server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StartServer">
            <summary>
            Starts server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StopServer">
            <summary>
            Stops server. NOTE: Active sessions aren't cancled.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StartProcCons">
            <summary>
            Starts proccessiong incoming connections (Accepts and queues connections).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.StartProcQueuedCons">
            <summary>
            Starts queueed connections proccessing (Creates and starts session foreach queued connection).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.AddSession(LumiSoft.Net.SocketServerSession)">
            <summary>
            Adds specified session to sessions collection.
            </summary>
            <param name="session">Session to add.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.RemoveSession(LumiSoft.Net.SocketServerSession)">
            <summary>
            Removes specified session from sessions collection.
            </summary>
            <param name="session">Session to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.OnSysError(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.OnSessionTimeoutTimer">
            <summary>
            This method must get timedout sessions and end them.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.InitNewSession(System.Net.Sockets.Socket,LumiSoft.Net.BindInfo)">
            <summary>
            Initialize and start new session here. Session isn't added to session list automatically, 
            session must add itself to server session list by calling AddSession().
            </summary>
            <param name="socket">Connected client socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
        </member>
        <member name="E:LumiSoft.Net.SocketServer.SysError">
            <summary>
            Occurs when server or session has system error(unhandled error).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.BindInfo">
            <summary>
            Gets or set socket binding info. Use this property to specify on which IP,port server 
            listnes and also if is SSL or STARTTLS support.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.MaxConnections">
            <summary>
            Gets or sets maximum allowed connections.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.Enabled">
            <summary>
            Runs and stops server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.LogCommands">
            <summary>
            Gets or sets if to log commands.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.SessionIdleTimeOut">
            <summary>
            Session idle timeout in milliseconds.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.MaxBadCommands">
            <summary>
            Gets or sets maximum bad commands allowed to session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.HostName">
            <summary>
            Gets or set host name that is reported to clients.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.Sessions">
            <summary>
            Gets active sessions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketServer.QueuedConnection">
            <summary>
            This struct holds queued connection info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServer.QueuedConnection.#ctor(System.Net.Sockets.Socket,LumiSoft.Net.BindInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Socket.</param>
            <param name="bindInfo">Bind info.</param>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.QueuedConnection.Socket">
            <summary>
            Gets socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServer.QueuedConnection.BindInfo">
            <summary>
            Gets bind info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.#ctor">
            <summary>
            Defalut constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.InitNewSession(System.Net.Sockets.Socket,LumiSoft.Net.BindInfo)">
            <summary>
            Initialize and start new session here. Session isn't added to session list automatically, 
            session must add itself to server session list by calling AddSession().
            </summary>
            <param name="socket">Connected client socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnValidate_IpAddress(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Raises event ValidateIP event.
            </summary>
            <param name="localEndPoint">Server IP.</param>
            <param name="remoteEndPoint">Connected client IP.</param>
            <returns>Returns true if connection allowed.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnAuthUser(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Raises event AuthUser.
            </summary>
            <param name="session">Reference to current IMAP session.</param>
            <param name="userName">User name.</param>
            <param name="passwordData">Password compare data,it depends of authentication type.</param>
            <param name="data">For md5 eg. md5 calculation hash.It depends of authentication type.</param>
            <param name="authType">Authentication type.</param>
            <returns>Returns true if user is authenticated ok.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnSubscribeMailbox(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Raises event 'SubscribeMailbox'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="mailbox">Mailbox which to subscribe.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnUnSubscribeMailbox(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Raises event 'UnSubscribeMailbox'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="mailbox">Mailbox which to unsubscribe.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnGetSubscribedMailboxes(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Raises event 'GetSubscribedMailboxes'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="referenceName">Mailbox reference.</param>
            <param name="mailBox">Mailbox search pattern or mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnGetMailboxes(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Raises event 'GetMailboxes'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="referenceName">Mailbox reference.</param>
            <param name="mailBox">Mailbox search pattern or mailbox.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnCreateMailbox(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Raises event 'CreateMailbox'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="mailbox">Mailbox to create.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnDeleteMailbox(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Raises event 'DeleteMailbox'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="mailbox">Mailbox which to delete.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnRenameMailbox(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Raises event 'RenameMailbox'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="mailbox">Mailbox which to rename.</param>
            <param name="newMailboxName">New mailbox name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnGetMessagesInfo(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder)">
            <summary>
            Raises event 'GetMessagesInfo'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="folder">Folder which messages info to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnGetMessageItems(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_Message,LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum)">
            <summary>
            Raises event GetMessageItems.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="messageInfo">Message info what message items to get.</param>
            <param name="messageItems">Specifies message items what must be filled.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnDeleteMessage(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_Message)">
            <summary>
            Raises event 'DeleteMessage'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="message">Message which to delete.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnCopyMessage(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_Message,System.String)">
            <summary>
            Raises event 'CopyMessage'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="msg">Message which to copy.</param>
            <param name="location">New message location.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnStoreMessage(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,LumiSoft.Net.IMAP.Server.IMAP_Message,System.Byte[])">
            <summary>
            Raises event 'StoreMessage'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="folder">Folder where to store.</param>
            <param name="msg">Message which to store.</param>
            <param name="messageData">Message data which to store.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Server.OnStoreMessageFlags(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_Message)">
            <summary>
            Raises event 'StoreMessageFlags'.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="msg">Message which flags to store.</param>
            <returns></returns>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.ValidateIPAddress">
            <summary>
            Occurs when new computer connected to IMAP server.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.AuthUser">
            <summary>
            Occurs when connected user tryes to authenticate.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.SubscribeFolder">
            <summary>
            Occurs when server requests to subscribe folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.UnSubscribeFolder">
            <summary>
            Occurs when server requests to unsubscribe folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetFolders">
            <summary>
            Occurs when server requests all available folders.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetSubscribedFolders">
            <summary>
            Occurs when server requests subscribed folders.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.CreateFolder">
            <summary>
            Occurs when server requests to create folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.DeleteFolder">
            <summary>
            Occurs when server requests to delete folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.RenameFolder">
            <summary>
            Occurs when server requests to rename folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetMessagesInfo">
            <summary>
            Occurs when server requests to folder messages info.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.DeleteMessage">
            <summary>
            Occurs when server requests to delete message.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.StoreMessage">
            <summary>
            Occurs when server requests to store message.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.StoreMessageFlags">
            <summary>
            Occurs when server requests to store message flags.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.CopyMessage">
            <summary>
            Occurs when server requests to copy message to new location.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetMessageItems">
            <summary>
            Occurs when server requests to get message items.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.SessionLog">
            <summary>
            Occurs when IMAP session has finished and session log is available.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetSharedRootFolders">
            <summary>
            Occurs when IMAP server requests shared root folders info.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetFolderACL">
            <summary>
            Occurs when IMAP server requests folder ACL.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.DeleteFolderACL">
            <summary>
            Occurs when IMAP server requests to delete folder ACL.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.SetFolderACL">
            <summary>
            Occurs when IMAP server requests to set folder ACL.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetUserACL">
            <summary>
            Occurs when IMAP server requests to get user ACL for specified folder.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.IMAP.Server.IMAP_Server.GetUserQuota">
            <summary>
            Occurs when IMAP server requests to get user quota.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Server.SupportedAuthentications">
            <summary>
            Gets or sets server supported authentication types.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Server.GreetingText">
            <summary>
            Gets or sets server greeting text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Server.MaxConnectionsPerIP">
            <summary>
            Gets or sets maximum allowed conncurent connections from 1 IP address. Value 0 means unlimited connections.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Server.MaxMessageSize">
            <summary>
            Maximum message size.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Server.Sessions">
            <summary>
            Gets active sessions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Folder">
            <summary>
            IMAP folder.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Folder.#ctor(System.String,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">Full path to folder, path separator = '/'. Eg. Inbox/myFolder .</param>
            <param name="selectable">Gets or sets if folder is selectable(SELECT command can select this folder).</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Folder.Folder">
            <summary>
            Gets IMAP folder name. Eg. Inbox, Inbox/myFolder, ... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Folder.Selectable">
            <summary>
            Gets or sets if folder is selectable (SELECT command can select this folder).
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_Envelope">
            <summary>
            IMAP ENVELOPE STRUCTURE (date, subject, from, sender, reply-to, to, cc, bcc, in-reply-to, and message-id).
             Defined in RFC 3501 7.4.2.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.ConstructEnvelope(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Construct secified mime entity ENVELOPE string.
            </summary>
            <param name="entity">Mime entity.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.Parse(System.String)">
            <summary>
            Parses ENVELOPE from IMAP envelope string.
            </summary>
            <param name="envelopeString">Envelope string.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.ParseAddresses(LumiSoft.Net.StringReader)">
            <summary>
            Parses addresses from IMAP ENVELOPE addresses structure.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.ParseAddress(System.String)">
            <summary>
            Parses address from IMAP ENVELOPE address structure.
            </summary>
            <param name="addressString">Address structure string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.ConstructAddresses(LumiSoft.Net.Mime.AddressList)">
            <summary>
            Constructs ENVELOPE addresses structure.
            </summary>
            <param name="addressList">Address list.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_Envelope.ConstructAddress(LumiSoft.Net.Mime.MailboxAddress)">
            <summary>
            Constructs ENVELOPE address structure.
            </summary>
            <param name="address">Mailbox address.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.Date">
            <summary>
            Gets header field "<b>Date:</b>" value. Returns DateTime.MinValue if no date or date parsing fails.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.Subject">
            <summary>
            Gets header field "<b>Subject:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.From">
            <summary>
            Gets header field "<b>From:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.Sender">
            <summary>
            Gets header field "<b>Sender:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.ReplyTo">
            <summary>
            Gets header field "<b>Reply-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.To">
            <summary>
            Gets header field "<b>To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.Cc">
            <summary>
            Gets header field "<b>Cc:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.Bcc">
            <summary>
            Gets header field "<b>Bcc:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.InReplyTo">
            <summary>
            Gets header field "<b>In-Reply-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_Envelope.MessageID">
            <summary>
            Gets header field "<b>Message-ID:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs">
            <summary>
            Provides data for the filesytem related events for FTP_Server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.#ctor(LumiSoft.Net.FTP.Server.FTP_Session,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name"></param>
            <param name="newName"></param>
            <param name="session"></param>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.Session">
            <summary>
            Gets reference to FTP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.Name">
            <summary>
            Gets directory or file name with path.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.NewName">
            <summary>
            Gets new directory or new file name with path. This filled for Rename event only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.FileStream">
            <summary>
            Gets or sets file stream.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.Validated">
            <summary>
            Gets or sets if operation was successful. NOTE: default value is true.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FileSysEntry_EventArgs.DirInfo">
            <summary>
            Gets reference to dir listing info. Please Fill .Tables["DirInfo"] table with required fields.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.PTR_Record">
            <summary>
            PTR record class.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DnsRecordBase">
            <summary>
            Base class for DNS records.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsRecordBase.#ctor(LumiSoft.Net.Dns.Client.QTYPE,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="recordType">Record type (A,MX, ...).</param>
            <param name="ttl">TTL (time to live) value in seconds.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsRecordBase.RecordType">
            <summary>
            Gets record type (A,MX,...).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsRecordBase.TTL">
            <summary>
            Gets TTL (time to live) value in seconds.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.PTR_Record.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="domainName">DomainName.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.PTR_Record.DomainName">
            <summary>
            Gets domain name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DnsServerResponse">
            <summary>
            This class represents dns server response.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetARecords">
            <summary>
            Gets IPv4 host addess records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetNSRecords">
            <summary>
            Gets name server records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetCNAMERecords">
            <summary>
            Gets CNAME records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetSOARecords">
            <summary>
            Gets SOA records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetPTRRecords">
            <summary>
            Gets PTR records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetHINFORecords">
            <summary>
            Gets HINFO records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetMXRecords">
            <summary>
            Gets MX records.(MX records are sorted by preference, lower array element is prefered)
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetTXTRecords">
            <summary>
            Gets text records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.GetAAAARecords">
            <summary>
            Gets IPv6 host addess records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsServerResponse.FilterRecords(System.Collections.Generic.List{LumiSoft.Net.Dns.Client.DnsRecordBase},LumiSoft.Net.Dns.Client.QTYPE)">
            <summary>
            Filters out specified type of records from answer.
            </summary>
            <param name="answers"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.ConnectionOk">
            <summary>
            Gets if connection to dns server was successful.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.ResponseCode">
            <summary>
            Gets dns server response code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.AllAnswers">
            <summary>
            Gets all resource records returned by server (answer records section + authority records section + additional records section). 
            NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.Answers">
            <summary>
            Gets dns server returned answers. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
            <code>
            // NOTE: DNS server may return diffrent record types even if you query MX.
            //       For example you query lumisoft.ee MX and server may response:	
            //		 1) MX - mail.lumisoft.ee
            //		 2) A  - lumisoft.ee
            // 
            //       Before casting to right record type, see what type record is !
            			
            
            foreach(DnsRecordBase record in Answers){
            	// MX record, cast it to MX_Record
            	if(record.RecordType == QTYPE.MX){
            		MX_Record mx = (MX_Record)record;
            	}
            }
            </code>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.AuthoritiveAnswers">
            <summary>
            Gets name server resource records in the authority records section. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsServerResponse.AdditionalAnswers">
            <summary>
            Gets resource records in the additional records section. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.LDB_DataColumnCollection">
            <summary>
            lsDB data column collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.#ctor(System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Table that owns this collection.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Add(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Ads specified data column to collection.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Remove(System.String)">
            <summary>
            Removes specified data column from collection.
            </summary>
            <param name="columName">Column name which to remove.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Remove(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Removes specified data column from collection.
            </summary>
            <param name="column">Data column which to remove.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.IndexOf(System.String)">
            <summary>
             Gets specified data column index in collection. Returns -1 if no such column.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.IndexOf(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Gets specified data column index in collection. Returns -1 if no such column.
            </summary>
            <param name="column">Data column.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Contains(System.String)">
            <summary>
            Gets if data column collection contains specified column.
            </summary>
            <param name="columnName">Column name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Contains(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Gets if data column collection contains specified column.
            </summary>
            <param name="column">Data column.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Parse(System.Byte[])">
            <summary>
            Parses and adds data column to the collection.
            </summary>
            <param name="columnData"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumnCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Item(System.Int32)">
            <summary>
            Gets column from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_DataColumnCollection.Count">
            <summary>
            Gets column count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction">
            <summary>
            Implements SIP server transaction. Defined in RFC 3261 17.2 Server Transaction.
            A transaction is a sequence of SIP messages exchanged between SIP network elements. 
            Server transaction is created when remote UA (client transaction) request is received by local UA.
            Server transaction provides way to send responses back to remote UA client transaction.
            </summary>
            <remarks>
            <img src="../images/SIP_ServerTransaction.gif" />
            </remarks>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Transaction">
            <summary>
            This is base class for SIP client and server transaction.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.Cancel">
            <summary>
            Cancels current transaction.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.GetLastProvisionalResponse">
            <summary>
            Gets last provisional(1xx) response from responses collection. Returns null if no provisional responses.
            </summary>
            <returns>Returns last provisional response or null if none exists.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.GetFinalResponse">
            <summary>
            Gets final(2xx > 699) response from responses collection. Returns null if no final responses.
            </summary>
            <returns>Returns final response or null if none exists.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.OnCanceled">
            <summary>
            Raises Canceled event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.OnTerminated">
            <summary>
            Raises Terminated event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.OnTimedOut">
            <summary>
            Raises TimedOut event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.OnTransportError">
            <summary>
            Raises TimedOut event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Transaction.OnTransactionError(System.String)">
            <summary>
            Raises TransactionError event.
            </summary>
            <param name="errorText">Text describing error.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.ID">
            <summary>
            Gets transaction ID (Via: branch parameter value).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.CreateTime">
            <summary>
            Gets time when this transaction was created.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Request">
            <summary>
            Gets SIP request what caused to create this transaction.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Responses">
            <summary>
            Gets transaction related responses.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.CanCreateDialog">
            <summary>
            Gets or sets if transaction can create SIP dialog.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Transaction.Dialog">
            <summary>
            Gets transaction related SIP dialog. Returns null if no dialog available.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Transaction.Canceled">
            <summary>
            Is raised if transaction is canceled.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Transaction.Terminated">
            <summary>
            Is raised if transaction is terminated.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Transaction.TimedOut">
            <summary>
            Is raised if transaction is timed out. 
            </summary>
            <remarks>
            TU(transaction user) MUST treat it as if a 408 (Request Timeout) status code 
            has been received (more info RFC 3261 8.1.3.).
            </remarks>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Transaction.TransportError">
            <summary>
            Is raised when there is transport error. 
            </summary>
            <remarks>
            TU(transaction user) MUST treat it as if a 503 (Service Unavailable) status code 
            has been received (more info RFC 3261 8.1.3.).
            </remarks>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Transaction.TransactionError">
            <summary>
            Is raised when there is transaction error. For example this is raised when server transaction never
            gets ACK.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Default constructor.
            </summary>
            <param name="sipStack">Reference to SIP stack.</param>
            <param name="request">SIP request what caused to create server transaction.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Dispose">
            <summary>
            Disposes transaction and cleans up all resources.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Begin">
            <summary>
            Starts processing server transaction.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Cancel">
            <summary>
            Cancels transaction. NOTE: Only INVITE transaction can be canceled, for other methods cancel is skipped.
            If If final response is already sent, then cancel has no effect and will be skipped.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.SendResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends a SIP response message to the client transaction whose request initiated this server transaction.
            The response value must be SIP_ServerTransaction.Request.CreateResponse value.
            </summary>
            <param name="response">SIP response to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.m_pTimerG_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when INVITE response retransission must be done.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.m_pTimerH_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when INVITE completed state ACK wait time reached.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.m_pTimerI_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when INVITE Confirmed linger time completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.m_pTimerJ_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when non-INVITE Confirmed linger time completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.m_pTransactionTimeoutTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when transaction has timed out.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.ProcessRequest(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Processes transaction request.
            </summary>
            <param name="request">SIP request.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.ProcessResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Processes specified SIP response through this transaction.
            </summary>
            <param name="response">SIP response to process.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.SendTrying">
            <summary>
            Sends trying response to request maker.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.PassResponseToDialog(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Passes specified response to SIP dialog. If dialog doesn't exist, nothing is done.
            </summary>
            <param name="response">SIP response.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.EnsureDialog(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Ensures that SIP dialog exists. If not, creates SIP dialog, if exists, updates dialog state.
            </summary>
            <param name="response">SIP response what causes dialog creation.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.ID">
            <summary>
            Gets transaction ID (Via: branch parameter value).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.TransactionState">
            <summary>
            Gets current transaction state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Request">
            <summary>
            Gets request what created this server transaction.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Responses">
            <summary>
            Gets transaction related responses.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Dialog">
            <summary>
            Gets transaction dialog. Returns null if no dialog available.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ServerTransaction.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Core">
            <summary>
            This is base class for SIP user agent and SIP proxy core.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Core.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Core.OnRequestReceived(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            This method is called when new request is received.
            </summary>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Core.OnResponseReceived(LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            This method is called when new response is received.
            </summary>
            <param name="e">Response event arguments.</param>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP">
            <summary>
            Session Description Protocol. Defined in RFC 4566.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP.Parse(System.String)">
            <summary>
            Parses SDP from raw data.
            </summary>
            <param name="data">Raw SDP data.</param>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP.ToFile(System.String)">
            <summary>
            Stores SDP data to specified file. Note: official suggested file extention is .sdp.
            </summary>
            <param name="fileName">File name with path where to store SDP data.</param>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP.ToStringData">
            <summary>
            Returns SDP as string data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP.Version">
            <summary>
            Gets or sets version of the Session Description Protocol.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP.Originator">
            <summary>
            Gets originator and session identifier.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP.SessionName">
            <summary>
            Gets or sets textual session name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP.SessionDescription">
            <summary>
            Gets or sets textual information about the session. This is optional value, null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP.Uri">
            <summary>
            Gets or sets Uniform Resource Identifier. The URI should be a pointer to additional information 
            about the session. This is optional value, null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP.ConnectionData">
            <summary>
            Gets or sets connection data. This is optional value if each media part specifies this value,
            null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP.Times">
            <summary>
            Gets start and stop times for a session. If Count = 0, t field not written dot SDP data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP.RepeatTimes">
            <summary>
            Gets or sets repeat times for a session. This is optional value, null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP.Attributes">
            <summary>
            Gets attributes collection. This is optional value, Count == 0 means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP.Media">
            <summary>
            Gets media parts collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_MediaDescription">
            <summary>
            A SDP_MediaDescription represents an <B>m=</B> SDP message field. Defined in RFC 4566 5.14. Media Descriptions.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_MediaDescription.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_MediaDescription.Parse(System.String)">
            <summary>
            Parses media from "m" SDP message field.
            </summary>
            <param name="mValue">"m" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_MediaDescription.ToValue">
            <summary>
            Converts this to valid media string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.MediaType">
            <summary>
            Gets or sets meadia type. Currently defined media are "audio", "video", "text", 
            "application", and "message", although this list may be extended in the future.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Port">
            <summary>
            Gets or sets the transport port to which the media stream is sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.NumberOfPorts">
            <summary>
            Gets or sets number of continuos media ports.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.Protocol">
            <summary>
            Gets or sets transport protocol. Currently known protocols: UDP;RTP/AVP;RTP/SAVP.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_MediaDescription.MediaFormatDescription">
            <summary>
            Gets or sets media format description. The interpretation of the media 
            format depends on the value of the "proto" sub-field.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ViaParm">
            <summary>
            Implements SIP "via-parm" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                via-parm          =  sent-protocol LWS sent-by *( SEMI via-params )
                via-params        =  via-ttl / via-maddr / via-received / via-branch / via-extension
                via-ttl           =  "ttl" EQUAL ttl
                via-maddr         =  "maddr" EQUAL host
                via-received      =  "received" EQUAL (IPv4address / IPv6address)
                via-branch        =  "branch" EQUAL token
                via-extension     =  generic-param
                sent-protocol     =  protocol-name SLASH protocol-version SLASH transport
                protocol-name     =  "SIP" / token
                protocol-version  =  token
                transport         =  "UDP" / "TCP" / "TLS" / "SCTP" / other-transport
                sent-by           =  host [ COLON port ]
                ttl               =  1*3DIGIT ; 0 to 255
                    
                Via extentions:
                  // RFC 3486
                  via-compression  =  "comp" EQUAL ("sigcomp" / other-compression)
                  // RFC 3581
                  response-port  =  "rport" [EQUAL 1*DIGIT]
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.#ctor">
            <summary>
            Defualt constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.CreateBranch">
            <summary>
            Creates new branch paramter value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Parse(System.String)">
            <summary>
            Parses "via-parm" from specified value.
            </summary>
            <param name="value">SIP "via-parm" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "via-parm" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.ToStringValue">
            <summary>
            Converts this to valid "via-parm" value.
            </summary>
            <returns>Returns "via-parm" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.ProtocolName">
            <summary>
            Gets sent protocol name. Normally this is always SIP.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.ProtocolVersion">
            <summary>
            Gets sent protocol version. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.ProtocolTransport">
            <summary>
            Gets sent protocol transport. Currently known values are: UDP,TCP,TLS,SCTP.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.SentBy">
            <summary>
            Gets host name or IP with optional port. Examples: lumiosft.ee,10.0.0.1:80.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Branch">
            <summary>
            Gets or sets 'branch' parameter value. The branch parameter in the Via header field values 
            serves as a transaction identifier. The value of the branch parameter MUST start
            with the magic cookie "z9hG4bK". Value null means that branch paramter doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Comp">
            <summary>
            Gets or sets 'comp' parameter value. Value null means not specified. Defined in RFC 3486.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Maddr">
            <summary>
            Gets or sets 'maddr' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Received">
            <summary>
            Gets or sets 'received' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.RPort">
            <summary>
            Gets or sets 'rport' parameter value. Value -1 means not specified and value 0 means empty "" rport.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ViaParm.Ttl">
            <summary>
            Gets or sets 'ttl' parameter value. Value -1 means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1">
            <summary>
            Implements single value header field.
            Used by header fields like To:,From:,CSeq:, ... .
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1.#ctor(System.String,`0)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses single value from specified reader.
            </summary>
            <param name="reader">Reader what contains </param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1.ToStringValue">
            <summary>
            Convert this to string value.
            </summary>
            <returns>Returns this as string value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_SingleValueHF`1.ValueX">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_OptionTag">
            <summary>
            Implements SIP "option-tag" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                option-tag = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_OptionTag.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_OptionTag.Parse(System.String)">
            <summary>
            Parses "option-tag" from specified value.
            </summary>
            <param name="value">SIP "option-tag" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_OptionTag.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "option-tag" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_OptionTag.ToStringValue">
            <summary>
            Converts this to valid "option-tag" value.
            </summary>
            <returns>Returns "option-tag" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_OptionTag.OptionTag">
            <summary>
            Gets or sets option tag.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag">
            <summary>
            Implements SIP "language-tag" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                language-tag = primary-tag *( "-" subtag )
                primary-tag  = 1*8ALPHA
                subtag       = 1*8ALPHA
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag.Parse(System.String)">
            <summary>
            Parses "language-tag" from specified value.
            </summary>
            <param name="value">SIP "language-tag" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "language-tag" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag.ToStringValue">
            <summary>
            Converts this to valid "language-tag" value.
            </summary>
            <returns>Returns "language-tag" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_LanguageTag.LanguageTag">
            <summary>
            Gets or sets language tag.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange">
            <summary>
            Implements SIP "accept-range" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                accept-range  = media-range [ accept-params ] 
                media-range   = ("*//*" / (m-type SLASH "*") / (m-type SLASH m-subtype)) *(SEMI m-parameter)
                accept-params = SEMI "q" EQUAL qvalue *(SEMI generic-param)
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.Parse(System.String)">
            <summary>
            Parses "accept-range" from specified value.
            </summary>
            <param name="value">SIP "accept-range" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "accept-range" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.ToStringValue">
            <summary>
            Converts this to valid "accept-range" value.
            </summary>
            <returns>Returns "accept-range" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.MediaType">
            <summary>
            Gets or sets media type. Value *(STAR) means all values. Syntax: mediaType / mediaSubType.
            Examples: */*,video/*,text/html.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.MediaParameters">
            <summary>
            Gets media parameters collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.Parameters">
            <summary>
            Gets accept value parameters.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AcceptRange.QValue">
            <summary>
            Gets or sets qvalue parameter. Targets are processed from highest qvalue to lowest. 
            This value must be between 0.0 and 1.0. Value -1 means that value not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Client.STUN_NetType">
            <summary>
            Specifies UDP network type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.UdpBlocked">
            <summary>
            UDP is always blocked.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.OpenInternet">
            <summary>
            No NAT, public IP, no firewall.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.SymmetricUdpFirewall">
            <summary>
            No NAT, public IP, but symmetric UDP firewall.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.FullCone">
            <summary>
            A full cone NAT is one where all requests from the same internal IP address and port are 
            mapped to the same external IP address and port. Furthermore, any external host can send 
            a packet to the internal host, by sending a packet to the mapped external address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.RestrictedCone">
            <summary>
            A restricted cone NAT is one where all requests from the same internal IP address and 
            port are mapped to the same external IP address and port. Unlike a full cone NAT, an external
            host (with IP address X) can send a packet to the internal host only if the internal host 
            had previously sent a packet to IP address X.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.PortRestrictedCone">
            <summary>
            A port restricted cone NAT is like a restricted cone NAT, but the restriction 
            includes port numbers. Specifically, an external host can send a packet, with source IP
            address X and source port P, to the internal host only if the internal host had previously 
            sent a packet to IP address X and port P.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Client.STUN_NetType.Symmetric">
            <summary>
            A symmetric NAT is one where all requests from the same internal IP address and port, 
            to a specific destination IP address and port, are mapped to the same external IP address and
            port.  If the same host sends a packet with the same source address and port, but to 
            a different destination, a different mapping is used. Furthermore, only the external host that
            receives a packet can send a UDP packet back to the internal host.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_AuthenticateEventArgs">
            <summary>
            This class provides data for SIP_ProxyCore.Authenticate event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_AuthenticateEventArgs.#ctor(LumiSoft.Net.AUTH.Auth_HttpDigest)">
            <summary>
            Default constructor.
            </summary>
            <param name="auth">Authentication context.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_AuthenticateEventArgs.AuthContext">
            <summary>
            Gets authentication context.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_AuthenticateEventArgs.Authenticated">
            <summary>
            Gets or sets if specified request is authenticated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum">
            <summary>
            vCal delivery address type. Note this values may be flagged !
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.NotSpecified">
            <summary>
            Delivery address type not specified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Preferred">
            <summary>
            Preferred delivery address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Domestic">
            <summary>
            Domestic delivery address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Ineternational">
            <summary>
            International delivery address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Postal">
            <summary>
            Postal delivery address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Parcel">
            <summary>
            Parcel delivery address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Home">
            <summary>
            Delivery address for a residence.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum.Work">
            <summary>
            Address for a place of work.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderField">
            <summary>
            Mime entity header field.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderField.#ctor">
            <summary>
            Default construtor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderField.#ctor(System.String,System.String)">
            <summary>
            Creates new header field with specified name and value.
            </summary>
            <param name="name">Header field name. Header field name must end with colon(:) and may contain US-ASCII character values between 33 and 126.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderField.Name">
            <summary>
            Gets or sets header field name. Header field name must end with colon(:) and may contain US-ASCII character values between 33 and 126.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderField.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderField.EncodedValue">
            <summary>
            Gets header field encoded value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.IncompleteDataException">
            <summary>
            The exception that is thrown when incomplete data received.
            For example for ReadPeriodTerminated() method reaches end of stream before getting period terminator.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.IncompleteDataException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.IncompleteDataException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">Exception message text.</param>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Flags_SetType">
            <summary>
            IMAP flags store type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_Flags_SetType.Add">
            <summary>
            Flags are added to existing ones.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_Flags_SetType.Remove">
            <summary>
            Flags are removed from existing ones.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_Flags_SetType.Replace">
            <summary>
            Flags are replaced.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs">
            <summary>
            Provides data for SetFolderACL event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String,LumiSoft.Net.IMAP.Server.IMAP_Flags_SetType,LumiSoft.Net.IMAP.IMAP_ACL_Flags)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="folderName">Folder name which ACL to set.</param>
            <param name="userName">User name which ACL to set.</param>
            <param name="flagsSetType">Specifies how flags must be stored.</param>
            <param name="aclFlags">Flags which to store.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.Folder">
            <summary>
            Gets folder name which ACL to set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.UserName">
            <summary>
            Gets user name which ACL to set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.FlagsSetType">
            <summary>
            Gets how ACL flags must be stored.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.ACL">
            <summary>
            Gets ACL flags. NOTE: See this.FlagsSetType how to store flags.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SETACL_eArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ICMP.ICMP_Type">
            <summary>
            ICMP type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ICMP.ICMP_Type.EchoReply">
            <summary>
            Echo rely.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ICMP.ICMP_Type.TimeExceeded">
            <summary>
            Time to live exceeded reply.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ICMP.ICMP_Type.Echo">
            <summary>
            Echo.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ICMP.EchoMessage">
            <summary>
            Echo reply message.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ICMP.EchoMessage.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address what sent echo message.</param>
            <param name="ttl">Time to live in milli seconds.</param>
            <param name="time">Time what elapsed before getting echo response.</param>
        </member>
        <member name="M:LumiSoft.Net.ICMP.EchoMessage.ToStringEx">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.ICMP.EchoMessage.ToStringEx(LumiSoft.Net.ICMP.EchoMessage[])">
            <summary>
            
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.ICMP.EchoMessage.IPAddress">
            <summary>
            Gets IP address what sent echo message.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ICMP.EchoMessage.ReplyTime">
            <summary>
            Gets time in milliseconds what toke to get reply.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ICMP.Icmp">
            <summary>
            Icmp utils.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ICMP.Icmp.Trace(System.String)">
            <summary>
            Traces specified ip.
            </summary>
            <param name="destIP">Destination IP address.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.ICMP.Icmp.Trace(System.Net.IPAddress,System.Int32)">
            <summary>
            Traces specified ip.
            </summary>
            <param name="ip">IP address to tracce.</param>
            <param name="timeout">Send recieve timeout in milli seconds.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.ICMP.Icmp.Ping(System.Net.IPAddress,System.Int32)">
            <summary>
            Pings specified destination host.
            </summary>
            <param name="ip">IP address to ping.</param>
            <param name="timeout">Send recieve timeout in milli seconds.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Data.lsDB.LDB_Record">
            <summary>
            lsDB database record.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.#ctor(LumiSoft.Data.lsDB.DbFile,LumiSoft.Data.lsDB.DataPage)">
            <summary>
            Default constructor.
            </summary>
            <param name="ownerDb">Table that owns this row.</param>
            <param name="rowStartDataPage">Data page on what row starts.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.CreateRecord(LumiSoft.Data.lsDB.DbFile,System.Object[])">
            <summary>
            Creates record. Contains record info + record values.
            </summary>
            <param name="ownerDb">Roecord owner table.</param>
            <param name="rowValues">Row values what to store to record.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.ParseRowInfo">
            <summary>
            Parse row info.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.GetColumnData(System.Int32)">
            <summary>
            Gets specified column data.
            </summary>
            <param name="columnIndex">Column index.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.UpdateRecord(System.Object[])">
            <summary>
            Updates this record values.
            </summary>
            <param name="rowValues">Row new values.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.ConvertToInternalData(LumiSoft.Data.lsDB.LDB_DataColumn,System.Object)">
            <summary>
            Converts data to specied column internal store data.
            </summary>
            <param name="coulmn">Column where to store data.</param>
            <param name="val">Data to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_Record.ConvertFromInternalData(LumiSoft.Data.lsDB.LDB_DataColumn,System.Byte[])">
            <summary>
            Converts internal data to .NET data type.
            </summary>
            <param name="coulmn">Column what data it is.</param>
            <param name="val">Internal data value.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.Values">
            <summary>
            Gets or set all data column values.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.Item(System.Int32)">
            <summary>
            Gets or sets specified data column value.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.Item(System.String)">
            <summary>
            Gets or sets specified data column value.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.Item(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Gets or sets specified data column value.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.DataPage">
            <summary>
            Gets data page on what row starts.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_Record.DataPages">
            <summary>
            Gets data pages held by this row.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum">
            <summary>
            Specifies message itmes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum.Header">
            <summary>
            Message main header.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum.Envelope">
            <summary>
            IMAP ENVELOPE structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum.BodyStructure">
            <summary>
            IMAP BODYSTRUCTURE structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum.Message">
            <summary>
            Full message.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_Acl">
            <summary>
            IMAP ACL entry. Defined in RFC 2086.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Acl.#ctor(System.String,LumiSoft.Net.IMAP.IMAP_ACL_Flags)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Authentication identifier name. Normally this is user or group name.</param>
            <param name="rights">Rights associated with this ACL entry.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Acl.Parse(System.String)">
            <summary>
            Parses ACL entry from IMAP ACL response string.
            </summary>
            <param name="aclResponseString">IMAP ACL response string.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Acl.Name">
            <summary>
            Gets authentication identifier name. Normally this is user or group name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Acl.Rights">
            <summary>
            Gets the rights associated with this ACL entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.AuthHelper">
            <summary>
            Provides helper methods for authentications(APOP,CRAM-MD5,DIGEST-MD5).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Apop(System.String,System.String)">
            <summary>
            Calculates APOP authentication compare value.
            </summary>
            <param name="password">Password.</param>
            <param name="passwordTag">Password tag.</param>
            <returns>Returns value what must be used for comparing passwords.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Cram_Md5(System.String,System.String)">
            <summary>
            Calculates CRAM-MD5 authentication compare value.
            </summary>
            <param name="password">Password.</param>
            <param name="hashKey">Hash calculation key</param>
            <returns>Returns value what must be used for comparing passwords.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Digest_Md5(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Calculates DIGEST-MD5 authentication compare value.
            </summary>
            <param name="client_server">Specifies if client or server value calculated. 
            Client and server has diffrent calculation method.</param>
            <param name="realm">Use domain or machine name for this.</param>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="nonce">Server password tag.</param>
            <param name="cnonce">Client password tag.</param>
            <param name="digest_uri"></param>
            <returns>Returns value what must be used for comparing passwords.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Create_Digest_Md5_ServerResponse(System.String,System.String)">
            <summary>
            Creates AUTH Digest-md5 server response what server must send to client.
            </summary>
            <param name="realm">Use domain or machine name for this.</param>
            <param name="nonce">Server password tag. Random hex string is suggested.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.GenerateNonce">
            <summary>
            Generates random nonce value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.HmacMd5(System.String,System.String)">
            <summary>
            Calculates keyed md5 hash from specifieed text and with specified hash key.
            </summary>
            <param name="hashKey"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Md5(System.String)">
            <summary>
            Calculates md5 hash from specified string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Hex(System.String)">
            <summary>
            Converts specified string to hexa string.
            </summary>
            <param name="text"></param>
            <returns></returns> 
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Base64en(System.String)">
            <summary>
            Encodes specified string to base64 string.
            </summary>
            <param name="text">Text to encode.</param>
            <returns>Returns encoded string.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.AuthHelper.Base64de(System.String)">
            <summary>
            Decodes specified base64 string.
            </summary>
            <param name="text">Base64 string to decode.</param>
            <returns>Returns decoded string.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer">
            <summary>
            Implements SIP transaction layer. Defined in RFC 3261.
            Transaction layer can contain Client and Server transactions.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack)">
            <summary>
            Default constructor.
            </summary>
            <param name="sipStack">Reference to SIP stack.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.CreateClientTransaction(LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Destination,System.Boolean)">
            <summary>
            Creates new SIP client transaction for specified request.
            </summary>
            <param name="request">SIP request.</param>
            <param name="destination">Remote destination info.</param>
            <param name="addVia">Specified if transaction adds new Via: header. If this value is false,
            then its user responsibility to add vlid Via: header to <b>request</b> argument.</param>
            <returns>Returns ncreated SIP client transaction.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.CreateServerTransaction(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Creates new SIP server transaction for specified request.
            </summary>
            <param name="request">SIP request.</param>
            <returns>Returns added server transaction.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.RemoveClientTransaction(LumiSoft.Net.SIP.Stack.SIP_ClientTransaction)">
            <summary>
            Removes specified transaction from SIP clinet transactions collection.
            </summary>
            <param name="transaction">Transaction to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.RemoveServerTransaction(LumiSoft.Net.SIP.Stack.SIP_ServerTransaction)">
            <summary>
            Removes specified transaction from SIP server transactions collection.
            </summary>
            <param name="transaction">Transaction to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.MatchClientTransaction(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Matches SIP response to client transaction. If not matching transaction found, returns null.
            </summary>
            <param name="response">SIP response to match.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.MatchServerTransaction(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Matches SIP request to server transaction. If not matching transaction found, returns null.
            </summary>
            <param name="request">SIP request to match.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.CreateDialog(LumiSoft.Net.SIP.Stack.SIP_ClientTransaction,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Creates new SIP UAC dialog.
            </summary>
            <param name="transaction">Owner transaction what forces to create dialog.</param>
            <param name="response">SIP response what causes dialog creation.</param>
            <returns>Returns new SIP dialog.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.CreateDialog(LumiSoft.Net.SIP.Stack.SIP_ServerTransaction,LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Creates new SIP UAS dialog.
            </summary>
            <param name="transaction">Owner transaction what forces to create dialog.</param>
            <param name="request">Server transaction request what response it is.</param>
            <param name="response">SIP response what causes dialog creation.</param>
            <returns>Returns new SIP dialog.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.RemoveDialog(LumiSoft.Net.SIP.Stack.SIP_Dialog)">
            <summary>
            Removes specified dialog from dialogs collection.
            </summary>
            <param name="dialog">SIP dialog to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.MatchDialog(LumiSoft.Net.SIP.Message.SIP_Message)">
            <summary>
            Matches speecified SIP message to SIP dialog. If no matching dialog found, returns null.
            </summary>
            <param name="message">SIP message.</param>
            <returns>Returns matched SIP dialog or null in no match found.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.ClientTransactions">
            <summary>
            Gets all available client transactions.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransactionLayer.ServerTransactions">
            <summary>
            Gets all available server transactions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Attribute">
            <summary>
            Implements SDP attribute.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Attribute.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Attribute name.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Attribute.Parse(System.String)">
            <summary>
            Parses media from "a" SDP message field.
            </summary>
            <param name="aValue">"a" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Attribute.ToValue">
            <summary>
            Converts this to valid "a" string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Attribute.Name">
            <summary>
            Gets attribute name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Attribute.Value">
            <summary>
            Gets or sets attribute value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_To">
            <summary>
            Implements SIP "To" value. Defined in RFC 3261.
            The To header field specifies the logical recipient of the request.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                To        = ( name-addr / addr-spec ) *( SEMI to-param )
                to-param  = tag-param / generic-param
                tag-param = "tag" EQUAL token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_To.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">To: header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_To.#ctor(LumiSoft.Net.SIP.Message.SIP_t_NameAddress)">
            <summary>
            Default constructor.
            </summary>
            <param name="address">To address.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_To.Parse(System.String)">
            <summary>
            Parses "To" from specified value.
            </summary>
            <param name="value">SIP "To" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_To.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "To" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_To.ToStringValue">
            <summary>
            Converts this to valid "To" value.
            </summary>
            <returns>Returns "To" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_To.Address">
            <summary>
            Gets to address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_To.ToTag">
            <summary>
            Gets or sets tag parameter value.
            The "tag" parameter serves as a general mechanism for dialog identification.
            Value null means that branch paramter doesn't exist.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.BindInfo">
            <summary>
            Holds socket bind info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.BindInfo.#ctor(LumiSoft.Net.BindInfoProtocol,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="protocol">Bind protocol.</param>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
        </member>
        <member name="M:LumiSoft.Net.BindInfo.#ctor(System.Net.IPAddress,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Default constructor.
            </summary>
            <param name="ip">IP address to listen.</param>
            <param name="port">Port to listen.</param>
            <param name="ssl">Specifies if dedicated SSL connection. If true, SSL connection negotiation 
            is done at once after connection is accepted.</param>
            <param name="sslCertificate">Certificate to use for SSL connections.</param>
        </member>
        <member name="M:LumiSoft.Net.BindInfo.Equals(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns true if two objects are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.BindInfo.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="P:LumiSoft.Net.BindInfo.Protocol">
            <summary>
            Gets protocol.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.BindInfo.IP">
            <summary>
            Gets IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.BindInfo.Port">
            <summary>
            Gets port.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.BindInfo.SSL">
            <summary>
            Gets if dedicated SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.BindInfo.SSL_Certificate">
            <summary>
            Gets SSL certificate.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.BindInfo.Tag">
            <summary>
            Gets or sets user data. This is used internally don't use it !!!.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_RValue">
            <summary>
            Implements SIP "r-value" value. Defined in RFC 4412.
            </summary>
            <remarks>
            <code>
            RFC 4412 Syntax:
                r-value    = namespace "." r-priority
                namespace  = token-nodot
                r-priority = token-nodot
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RValue.Parse(System.String)">
            <summary>
            Parses "r-value" from specified value.
            </summary>
            <param name="value">SIP "r-value" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RValue.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "r-value" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RValue.ToStringValue">
            <summary>
            Converts this to valid "r-value" value.
            </summary>
            <returns>Returns "r-value" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RValue.Namespace">
            <summary>
            Gets or sets Namespace.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid Namespace value passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RValue.Priority">
            <summary>
            Gets or sets priority.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid Priority value passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mime.MimeEntity">
            <summary>
            Rfc 2822 Mime Entity.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.Parse(System.IO.Stream,System.String)">
            <summary>
            Parses mime entity from stream.
            </summary>
            <param name="stream">Data stream from where to read data.</param>
            <param name="toBoundary">Entity data is readed to specified boundary.</param>
            <returns>Returns false if last entity. Returns true for mulipart entity, if there are more entities.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.ToStream(System.IO.Stream)">
            <summary>
            Stores mime entity and it's child entities to specified stream.
            </summary>
            <param name="storeStream">Stream where to store mime entity.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataToFile(System.String)">
            <summary>
            Saves this.Data property value to specified file.
            </summary>
            <param name="fileName">File name where to store data.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataToStream(System.IO.Stream)">
            <summary>
            Saves this.Data property value to specified stream.
            </summary>
            <param name="stream">Stream where to store data.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataFromFile(System.String)">
            <summary>
            Loads MimeEntity.Data property from file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.DataFromStream(System.IO.Stream)">
            <summary>
            Loads MimeEntity.Data property from specified stream. Note: reading starts from current position and stream isn't closed.
            </summary>
            <param name="stream">Data stream.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.EncodeData(System.Byte[],LumiSoft.Net.Mime.ContentTransferEncoding_enum)">
            <summary>
            Encodes data with specified content transfer encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <param name="encoding">Encoding with what to encode data.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntity.FoldHeader(System.String)">
            <summary>
            Folds header.
            </summary>
            <param name="header">Header string.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Header">
            <summary>
            Gets message header.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.HeaderString">
            <summary>
            Gets header as RFC 2822 message headers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ParentEntity">
            <summary>
            Gets parent entity of this entity. If this entity is top level, then this property returns null.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ChildEntities">
            <summary>
            Gets child entities. This property is available only if ContentType = multipart/... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.MimeVersion">
            <summary>
            Gets or sets header field "<b>Mime-Version:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType">
            <summary>
            Gets or sets header field "<b>Content-Type:</b>" value. This property specifies what entity data is.
            NOTE: ContentType can't be changed while there is data specified(Exception is thrown) in this mime entity, because it isn't
            possible todo data conversion between different types. For example text/xx has charset parameter and other types don't,
            changing loses it and text data becomes useless.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentTypeString">
            <summary>
            Gets or sets header field "<b>Content-Type:</b>" value. Returns null if value isn't set. This property specifies what entity data is.
            This property is meant for advanced users, who needs other values what defined MediaType_enum provides.
            Example value: text/plain; charset="utf-8". 
            NOTE: ContentType can't be changed while there is data specified(Exception is thrown) in this mime entity, because it isn't
            possible todo data conversion between different types. For example text/xx has charset parameter and other types don't,
            changing loses it and text data becomes useless.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentTransferEncoding">
            <summary>
            Gets or sets header field "<b>Content-Transfer-Encoding:</b>" value. This property specifies how data is encoded/decoded.
            If you set this value, it's recommended that you use QuotedPrintable for text and Base64 for binary data.
            7bit,_8bit,Binary are today obsolete (used for parsing). 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentDisposition">
            <summary>
            Gets or sets header field "<b>Content-Disposition:</b>" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentDescription">
            <summary>
            Gets or sets header field "<b>Content-Description:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentID">
            <summary>
            Gets or sets header field "<b>Content-ID:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType_Name">
            <summary>
            Gets or sets "<b>Content-Type:</b>" header field "<b>name</b>" parameter.
            Returns null if Content-Type: header field value isn't set or Content-Type: header field "<b>name</b>" parameter isn't set.
            <p/>
            Note: Content-Type must be application/xxx or exception is thrown.
            This property is obsolete today, it's replaced with <b>Content-Disposition: filename</b> parameter.
            If possible always set FileName property instead of it. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType_CharSet">
            <summary>
            Gets or sets "<b>Content-Type:</b>" header field "<b>charset</b>" parameter.
            Returns null if Content-Type: header field value isn't set or Content-Type: header field "<b>charset</b>" parameter isn't set.
            If you don't know what charset to use then <b>utf-8</b> is recommended, most of times this is sufficient.
            Note: Content-Type must be text/xxx or exception is thrown.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentType_Boundary">
            <summary>
            Gets or sets "<b>Content-Type:</b>" header field "<b>boundary</b>" parameter.
            Returns null if Content-Type: header field value isn't set or Content-Type: header field "<b>boundary</b>" parameter isn't set.
            Note: Content-Type must be multipart/xxx or exception is thrown.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ContentDisposition_FileName">
            <summary>
            Gets or sets "<b>Content-Disposition:</b>" header field "<b>filename</b>" parameter.
            Returns null if Content-Disposition: header field value isn't set or Content-Disposition: header field "<b>filename</b>" parameter isn't set.
            Note: Content-Disposition must be attachment or inline.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Date">
            <summary>
            Gets or sets header field "<b>Date:</b>" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.MessageID">
            <summary>
            Gets or sets header field "<b>Message-ID:</b>" value. Returns null if value isn't set.
            Syntax: '&lt;'id-left@id-right'&gt;'. Example: &lt;621bs724bfs8@jnfsjaas4263&gt;
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.To">
            <summary>
            Gets or sets header field "<b>To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Cc">
            <summary>
            Gets or sets header field "<b>Cc:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Bcc">
            <summary>
            Gets or sets header field "<b>Bcc:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.From">
            <summary>
            Gets or sets header field "<b>From:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Sender">
            <summary>
            Gets or sets header field "<b>Sender:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.ReplyTo">
            <summary>
            Gets or sets header field "<b>Reply-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.InReplyTo">
            <summary>
            Gets or sets header field "<b>In-Reply-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.DSN">
            <summary>
            Gets or sets header field "<b>Disposition-Notification-To:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Subject">
            <summary>
            Gets or sets header field "<b>Subject:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.Data">
            <summary>
            Gets or sets entity data. Data is encoded/decoded with "<b>Content-Transfer-Encoding:</b>" header field value.
            Note: This property can be set only if Content-Type: isn't multipart.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.DataText">
            <summary>
            Gets or sets entity text data. Data is encoded/decoded with "<b>Content-Transfer-Encoding:</b>" header field value with this.Charset charset.
            Note: This property is available only if ContentType is Text/xxx... or no content type specified, othwerwise Excpetion is thrown.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntity.DataEncoded">
            <summary>
            Gets or sets entity encoded data. If you set this value, be sure that you encode this value as specified by Content-Transfer-Encoding: header field.
            Set this value only if you need custom Content-Transfer-Encoding: what current Mime class won't support, other wise set data through this.Data property. 
            Note: This property can be set only if Content-Type: isn't multipart.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.SOA_Record">
            <summary>
            SOA record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.SOA_Record.#ctor(System.String,System.String,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="nameServer">Name server.</param>
            <param name="adminEmail">Zone administrator email.</param>
            <param name="serial">Version number of the original copy of the zone.</param>
            <param name="refresh">Time interval(in seconds) before the zone should be refreshed.</param>
            <param name="retry">Time interval(in seconds) that should elapse before a failed refresh should be retried.</param>
            <param name="expire">Time value(in seconds) that specifies the upper limit on the time interval that can elapse before the zone is no longer authoritative.</param>
            <param name="minimum">Minimum TTL(in seconds) field that should be exported with any RR from this zone.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.SOA_Record.NameServer">
            <summary>
            Gets name server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.SOA_Record.AdminEmail">
            <summary>
            Gets zone administrator email.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.SOA_Record.Serial">
            <summary>
            Gets version number of the original copy of the zone.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.SOA_Record.Refresh">
            <summary>
            Gets time interval(in seconds) before the zone should be refreshed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.SOA_Record.Retry">
            <summary>
            Gets time interval(in seconds) that should elapse before a failed refresh should be retried.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.SOA_Record.Expire">
            <summary>
            Gets time value(in seconds) that specifies the upper limit on the time interval that can elapse before the zone is no longer authoritative.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.SOA_Record.Minimum">
            <summary>
            Gets minimum TTL(in seconds) field that should be exported with any RR from this zone. 
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.HINFO_Record">
            <summary>
            HINFO record.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.HINFO_Record.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="cpu">Host CPU.</param>
            <param name="os">Host OS.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.HINFO_Record.CPU">
            <summary>
            Gets host's CPU.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.HINFO_Record.OS">
            <summary>
            Gets host's OS.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadLineCallback">
            <summary>
            This delegate represents callback method for BeginReadLine.
            </summary>
            <param name="e">Method data.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadToStreamCallback">
            <summary>
            This delegate represents callback method for BeginReadToEnd,BeginReadHeader,BeginReadPeriodTerminated.
            </summary>
            <param name="e">Method data.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.WriteCallback">
            <summary>
            This delegate represents callback method for BeginWrite.
            </summary>
            <param name="e">Method data.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.WriteStreamCallback">
            <summary>
            This delegate represents callback method for BeginWrite,BeginWritePeriodTerminated.
            </summary>
            <param name="e">Method data.</param>
        </member>
        <member name="T:LumiSoft.Net.IO.StreamHelper">
            <summary>
            Stream wrapper class, provides many usefull read and write methods for stream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="maxLineSize">Specifies maximum line size in bytes.</param>
            <param name="bufferRead">Specifies if source stream reads are buffered..</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadByte">
            <summary>
            Reades byte from source stream. Returns -1 if end of stream reached and no more data.
            </summary>
            <returns>Returns readed byte or -1 if end of stream reached.</returns>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginRead(System.IO.Stream,System.Int32,LumiSoft.Net.IO.ReadToStreamCallback,System.Object)">
            <summary>
            Starts reading specified amount data and storing to the specified store stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream and write to store stream.</param>
            <param name="callback">Callback to be called if asynchronous reading completes.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>count</b> less than 1.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.Read(System.IO.Stream,System.Int32)">
            <summary>
            Reads specified amount of data from source stream and stores to specified store stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="count">Number of bytes to read from source stream and write to store stream.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>count</b> less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Raised source stream has reached end of stream and doesn't have so much data as specified by <b>count</b> argument.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadLine(System.Byte[],System.Object,LumiSoft.Net.IO.ReadLineCallback)">
            <summary>
            Starts reading line from source stream.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback to be called whan asynchronous operation completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadLine(System.Byte[],LumiSoft.Net.IO.SizeExceededAction,System.Object,LumiSoft.Net.IO.ReadLineCallback)">
            <summary>
            Starts reading line from source stream.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback to be called whan asynchronous operation completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadLineInternal(System.Byte[],LumiSoft.Net.IO.SizeExceededAction,System.Object,LumiSoft.Net.IO.ReadLineCallback,System.Boolean,System.Boolean)">
            <summary>
            Starts reading line from source stream. This method does not do any checks and read locks.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback to be called whan asynchronous operation completes.</param>
            <param name="unlockRead">Specifies if read lock is released.</param>
            <param name="log">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadLine(System.Byte[])">
            <summary>
            Reads line from source stream and stores to specified buffer. This method accepts LF or CRLF lines.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <returns>Returns number of bytes stored to buffer, returns -1 if end of stream reached and no more data.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadLine(System.Byte[],LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads line from source stream and stores to specified buffer. This method accepts LF or CRLF lines.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <returns>Returns number of bytes stored to buffer, returns -1 if end of stream reached and no more data.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>buffer</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadLine(System.Text.Encoding)">
            <summary>
            Reads line from source stream.
            </summary>
            <param name="encoding">Encoding to use to decode line.</param>
            <returns>Returns readed line with specified encoding or null if end of stream reached and no more data.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>encoding</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadLine(System.Text.Encoding,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads line from source stream.
            </summary>
            <param name="encoding">Encoding to use to decode line.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <returns>Returns readed line with specified encoding or null if end of stream reached and no more data.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>encoding</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadLineInternal(System.Byte[],LumiSoft.Net.IO.SizeExceededAction,System.Int32@,System.Boolean)">
            <summary>
            Reads line from source stream and stores to specified buffer. This method accepts LF or CRLF lines.
            </summary>
            <param name="buffer">Buffer where to store line data.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line size exceeded.</param>
            <param name="readedCount">Returns how many bytes this method actually readed form source stream.</param>
            <param name="log">Specifies if read line is logged.</param>
            <returns>Returns number of bytes stored to buffer, returns -1 if end of stream reached and no more data.</returns>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadAll(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,LumiSoft.Net.IO.ReadToStreamCallback,System.Object)">
            <summary>
            Starts reading all source stream data.
            </summary>
            <param name="storeStream">Stream where to store data.</param>
            <param name="maxSize">Maximum muber of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <param name="callback">Callback to be called if asynchronous reading completes.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadAll(System.IO.Stream,System.Int32)">
            <summary>
            Reads all source stream data and stores to the specified store stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="maxSize">Maximum muber of bytes to read.</param>
            <returns>Returns number of bytes written to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>maxSize</b> less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when maximum allowed data size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadAll(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads all source stream data and stores to the specified store stream.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="maxSize">Maximum muber of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <returns>Returns number of bytes written to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>maxSize</b> less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when maximum allowed data size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadHeader(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,LumiSoft.Net.IO.ReadToStreamCallback,System.Object)">
            <summary>
            Starts reading header from source stream. Reads header data while gets blank line, what is 
            header terminator. For example this method can be used for reading mail,http,sip, ... headers.
            </summary>
            <param name="storeStream">Stream where to store data.</param>
            <param name="maxSize">Maximum muber of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <param name="callback">Callback to be called if asynchronous reading completes.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadHeader(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads header from source stream and stores to the specified stream. Reads header data while 
            gets blank line, what is header terminator. For example this method can be used for reading 
            mail,http,sip, ... headers.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum line or data size exceeded.</param>
            <returns>Returns number of bytes written to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>maxSize</b> less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when maximum allowed data size has exceeded.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginReadPeriodTerminated(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,LumiSoft.Net.IO.ReadToStreamCallback,System.Object)">
            <summary>
            Begins reading period terminated data from source stream. Reads data while gets single period on line,
            what is data terminator.
            </summary>
            <param name="storeStream">Stream where to store data.</param>
            <param name="maxSize">Maximum muber of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <param name="callback">Callback to be called if asynchronous reading completes.</param>
            <param name="tag">User data.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.ReadPeriodTerminated(System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction)">
            <summary>
            Reads period terminated data from source stream. Reads data while gets single period on line,
            what is data terminator.
            </summary>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <returns>Returns number of bytes written to <b>storeStream</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>storeStream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when <b>maxSize</b> less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending read operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when maximum allowed line size has exceeded.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when maximum allowed data size has exceeded.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Raised when source stream was reached end of stream and data is not period terminated.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginWrite(System.Byte[],LumiSoft.Net.IO.WriteCallback)">
            <summary>
            Starts writing specified data to source stream.
            </summary>
            <param name="data">Data what to write to source stream.</param>
            <param name="callback">Callback to be callled if write completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginWrite(System.Byte[],System.Int32,System.Int32,LumiSoft.Net.IO.WriteCallback)">
            <summary>
            Starts writing specified data to source stream.
            </summary>
            <param name="data">Data what to write to source stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the source stream.</param>
            <param name="count">The number of bytes to be written to the source stream.</param>
            <param name="callback">Callback to be callled if write completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWriteCallback(System.IAsyncResult)">
            <summary>
            Is called when BeginWrite(byte[] data,int offset,int count) has completed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginWrite(System.IO.Stream,System.Int32,LumiSoft.Net.IO.WriteStreamCallback)">
            <summary>
            Strats writing specified amount of data from <b>stream</b> to source stream.
            </summary>
            <param name="stream">Stream which data to wite to source stream.</param>
            <param name="count">Number of bytes read from <b>stream</b> and write to source stream.</param>
            <param name="callback">Callback to be called if asynchronous write completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWriteStreamCallback(System.IAsyncResult)">
            <summary>
            This method is called when BeginWrite has readed new data block.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWriteStreamCompleted(System.Exception)">
            <summary>
            Is called when BeginWrite has completed.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.Write(System.Byte[])">
            <summary>
            Writes specified buffer data to source stream.
            </summary>
            <param name="data">Data buffer.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes specified buffer data to source stream.
            </summary>
            <param name="data">Data buffer.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the source stream.</param>
            <param name="count">The number of bytes to be written to the source stream.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.Write(System.IO.Stream,System.Int32)">
            <summary>
            Reads specified amount of data for the specified stream and writes it to source stream.
            </summary>
            <param name="stream">Stream from where to read data.</param>
            <param name="count">Number of bytes to read and write.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Raised when argument <b>count</b> is less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.IncompleteDataException">Raised <b>stream</b> has reached end of stream and doesn't have so much data as specified by <b>count</b> argument.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginWriteAll(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.IO.WriteStreamCallback)">
            <summary>
            Starts writing all <b>stream</b> data to source stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="maxSize">Maximum number of bytes to read from <b>stream</b>.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback to be called if asynchronous write completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWriteAllCallback(System.IAsyncResult)">
            <summary>
            This method is called when BeginWriteAll has readed new data block.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWriteAllCompleted(System.Exception)">
            <summary>
            Is called when BeginWriteAll has completed.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.WriteAll(System.IO.Stream)">
            <summary>
            Writes all stream data to source stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <returns>Returns number of bytes written to source stream.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.WriteAll(System.IO.Stream,System.Int32)">
            <summary>
            Writes all stream data to source stream.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="maxSize">Maximum muber of bytes to read from <b>stream</b> and write source stream.</param>
            <returns>Returns number of bytes written to source stream.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when <b>stream</b> stream has more data than specified by <b>maxSize</b>.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.BeginWritePeriodTerminated(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.IO.WriteStreamCallback)">
            <summary>
            Starts writing <b>stream</b> data to source stream. Data will be period handled and terminated as needed.
            </summary>
            <param name="stream">Stream which data to write to source stream.</param>
            <param name="maxSize">Maximum muber of bytes to read from <b>stream</b> and write source stream.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback to be called if asynchronous write completes.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWritePeriodTerminatedReadLineCompleted(LumiSoft.Net.IO.ReadLine_EventArgs)">
            <summary>
            Is called when BeginWritePeriodTerminated stream.BeginReadLine has completed.
            </summary>
            <param name="e">Callback data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.InternalBeginWritePeriodTerminatedCompleted(System.Exception)">
            <summary>
            Is called when asynchronous write period terminated has completed.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Reades all data from the specified stream and writes it to source stream. Period handlign and period terminator is added as required.
            </summary>
            <param name="stream">Stream which data to write to source stream.</param>
            <returns>Returns number of bytes written to source stream. Note this value differs from 
            <b>stream</b> readed bytes count because of period handling and period terminator.
            </returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when <b>stream</b> contains line with bigger line size than allowed.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when <b>stream</b> has more data than <b>maxSize</b> allows..</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.WritePeriodTerminated(System.IO.Stream,System.Int32)">
            <summary>
            Reades all data from the specified stream and writes it to source stream. Period handlign and period terminator is added as required.
            </summary>
            <param name="stream">Stream which data to write to source stream.</param>
            <param name="maxSize">Maximum muber of bytes to read from <b>stream</b> and write source stream.</param>
            <returns>Returns number of bytes written to source stream. Note this value differs from 
            <b>stream</b> readed bytes count because of period handling and period terminator.
            </returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Raised when there already is pending write operation.</exception>
            <exception cref="T:LumiSoft.Net.IO.LineSizeExceededException">Raised when <b>stream</b> contains line with bigger line size than allowed.</exception>
            <exception cref="T:LumiSoft.Net.IO.DataSizeExceededException">Raised when <b>stream</b> has more data than <b>maxSize</b> allows..</exception>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.OnReadByte_Completed(System.IAsyncResult)">
            <summary>
            Is called when asynchronous read byte operation has completed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.DoReadLine_Buffered">
            <summary>
            Tries to read line from data buffer, if no line in buffer, new data buffer will be readed(buffered).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.OnReadBuffer_Completed(System.IAsyncResult)">
            <summary>
            Is called when asynchronous data buffering has completed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper.OnReadLineCompleted(System.Exception)">
            <summary>
            Is called when read line has completed.
            </summary>
            <param name="x">Excheption what happened during line reading or null if read line was completed sucessfully.</param>
        </member>
        <member name="P:LumiSoft.Net.IO.StreamHelper.Stream">
            <summary>
            Gets underlying stream.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.StreamHelper.MaximumLineSize">
            <summary>
            Gets maximum allowed line size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.StreamHelper.IsReadBuffered">
            <summary>
            Gets if source stream reads are buffered.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.StreamHelper.Logger">
            <summary>
            Gets or sets logger to use for logging.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.StreamHelper._ToStreamReader">
            <summary>
            Asynchronous to stream reader implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.#ctor(LumiSoft.Net.IO.StreamHelper,System.IO.Stream,System.Int32,LumiSoft.Net.IO.SizeExceededAction,LumiSoft.Net.IO.ReadToStreamCallback,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="streamHelper">Reference to StreamHelper.</param>
            <param name="storeStream">Stream where to store readed data.</param>
            <param name="maxSize">Maximum number of bytes to read.</param>
            <param name="exceededAction">Specifies how this method behaves when maximum size exceeded.</param>
            <param name="callback">Callback what will be called if asynchronous reading compltes.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.BeginRead(System.Int32)">
            <summary>
            Starts reading specified amount of data.
            </summary>
            <param name="count">Number of bytes to read from source stream and store to store stream.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.DoRead">
            <summary>
            Processes all buffer data and gets new buffer if active buffer consumed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.OnRead_ReadBuffer_Completed(System.IAsyncResult)">
            <summary>
            Is called when asynchrounous data buffer block reading has completed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.OnRead_Completed(System.Exception)">
            <summary>
            Is called when ReadHeader has completed.
            </summary>
            <param name="x">Exception happened during read or null if operation was successfull.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.BeginReadPeriodTerminated">
            <summary>
            Starts reading period terminated data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.OnReadPeriodTerminated_ReadLine_Completed(LumiSoft.Net.IO.ReadLine_EventArgs)">
            <summary>
            Is called when asynchrounous line reading has completed.
            </summary>
            <param name="e">Callback data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.ReadPeriodTerminatedCompleted(System.Exception)">
            <summary>
            Is called when ReadPeriodTerminated has completd.
            </summary>
            <param name="x">Exeption happened or null if operation completed successfuly.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.BeginReadHeader">
            <summary>
            Starts reading header data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.OnReadHeader_ReadLine_Completed(LumiSoft.Net.IO.ReadLine_EventArgs)">
            <summary>
            Is called when asynchrounous line reading has completed.
            </summary>
            <param name="e">Callback data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.ReadHeaderCompleted(System.Exception)">
            <summary>
            Is called when ReadHeader has completed.
            </summary>
            <param name="x">Exception happened during read or null if operation was successfull.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.BeginReadAll">
            <summary>
            Starts reading all source stream data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.DoReadAll">
            <summary>
            Processes all buffer data and gets new buffer if active buffer consumed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.OnReadAll_ReadBuffer_Completed(System.IAsyncResult)">
            <summary>
            Is called when asynchrounous data buffer block reading has completed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:LumiSoft.Net.IO.StreamHelper._ToStreamReader.ReadAllCompleted(System.Exception)">
            <summary>
            Is called when ReadToEnd has completed.
            </summary>
            <param name="x">Exception happened during read or null if operation was successfull.</param>
        </member>
        <member name="T:LumiSoft.Net.SIP.SIP_Uri">
            <summary>
            Implements SIP-URI. Defined in 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                SIP-URI  = "sip:" [ userinfo ] hostport uri-parameters [ headers ]
                SIPS-URI = "sips:" [ userinfo ] hostport uri-parameters [ headers ]
                userinfo = ( user / telephone-subscriber ) [ ":" password ] "@")
                hostport = host [ ":" port ]
                host     = hostname / IPv4address / IPv6reference
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Uri.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Uri.Equals(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns true if two objects are equal.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Uri.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>Returns the hash code.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Uri.Parse(System.String)">
            <summary>
            Parses SIP_Uri from SIP-URI string.
            </summary>
            <param name="value">SIP-URI  string.</param>
            <returns>Returns parsed SIP_Uri object.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Uri.ToStringValue">
            <summary>
            Converts SIP_Uri to valid SIP-URI string.
            </summary>
            <returns>Returns SIP-URI string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.IsSecure">
            <summary>
            Gets or sets if secure SIP. If true then sips: uri, otherwise sip: uri.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Address">
            <summary>
            Gets address from SIP URI. Examples: ivar@lumisoft.ee,ivar@195.222.10.1.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.User">
            <summary>
            Gets or sets user name. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Host">
            <summary>
            Gets or sets host name or IP.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Port">
            <summary>
            Gets or sets host port. Value -1 means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.HostPort">
            <summary>
            Gets host with optional port. If port specified returns Host:Port, otherwise Host.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Parameters">
            <summary>
            Gets URI parameters.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Cause">
            <summary>
            Gets or sets 'cause' parameter value. Value -1 means not specified.
            Cause is a URI parameter that is used to indicate the service that
            the User Agent Server (UAS) receiving the message should perform.
            Defined in RFC 4458.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Comp">
            <summary>
            Gets or sets 'comp' parameter value. Value null means not specified. Defined in RFC 3486.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_ContentType">
            <summary>
            Gets or sets 'content-type' parameter value. Value null means not specified. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Delay">
            <summary>
            Gets or sets 'delay' prameter value. Value -1 means not specified. 
            Specifies a delay interval between announcement repetitions. The delay is measured in milliseconds.
            Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Duration">
            <summary>
            Gets or sets 'duration' prameter value. Value -1 means not specified. 
            Specifies the maximum duration of the announcement. The media server will discontinue 
            the announcement and end the call if the maximum duration has been reached. The duration 
            is measured in milliseconds. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Locale">
            <summary>
            Gets or sets 'locale' prameter value. Specifies the language and optionally country 
            variant of the announcement sequence named in the "play=" parameter. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Lr">
            <summary>
            Gets or sets 'lr' parameter. The lr parameter, when present, indicates that the element
            responsible for this resource implements the routing mechanisms
            specified in this document. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Maddr">
            <summary>
            Gets or sets 'maddr' parameter value. Value null means not specified. 
            <a style="font-weight: bold; color: red">NOTE: This value is deprecated in since SIP 2.0.</a>
            The maddr parameter indicates the server address to be contacted for this user, 
            overriding any address derived from the host field. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Method">
            <summary>
            Gets or sets 'method' prameter value. Value null means not specified. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Play">
            <summary>
            Gets or sets 'play' parameter value. Value null means not specified. 
            Specifies the resource or announcement sequence to be played. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Repeat">
            <summary>
            Gets or sets 'repeat' parameter value. Value -1 means not specified, value int.MaxValue means 'forever'.
            Specifies how many times the media server should repeat the announcement or sequence named by 
            the "play=" parameter. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Target">
            <summary>
            Gets or sets 'target' parameter value. Value null means not specified. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Transport">
            <summary>
            Gets or sets 'transport' parameter value. Value null means not specified. 
            The transport parameter determines the transport mechanism to
            be used for sending SIP messages. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Ttl">
            <summary>
            Gets or sets 'ttl' parameter value. Value -1 means not specified.
            <a style="font-weight: bold; color: red">NOTE: This value is deprecated in since SIP 2.0.</a>
            The ttl parameter determines the time-to-live value of the UDP
            multicast packet and MUST only be used if maddr is a multicast
            address and the transport protocol is UDP. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_User">
            <summary>
            Gets or sets 'user' parameter value. Value null means not specified. Defined in RFC 3261.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Param_Voicexml">
            <summary>
            Gets or sets 'voicexml' parameter value. Value null means not specified. Defined in RFC 4240.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.SIP_Uri.Header">
            <summary>
            Gets or sets header.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventHandler">
            <summary>
            Represents the method that will handle the SIP_Stack.ValidateRequest event.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ErrorEventHandler">
            <summary>
            Represents the method that will handle the SIP_Stack.Error event.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Stack">
            <summary>
            Implements SIP stack.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.Start">
            <summary>
            Starts SIP stack.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.Stop">
            <summary>
            Stops SIP stack.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.OnValidateRequest(LumiSoft.Net.SIP.Stack.SIP_Request,System.Net.IPEndPoint)">
            <summary>
            Is called by Transport layer when new incoming SIP request is received.
            </summary>
            <param name="request">Incoming SIP request.</param>
            <param name="remoteEndPoint">Request maker IP end point.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Stack.OnError(System.Exception)">
            <summary>
            Is called when ever unknown error happens.
            </summary>
            <param name="x">Exception happened.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.Enabled">
            <summary>
            Gets or sets if SIP stack is running.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.IsRunning">
            <summary>
            Gets if SIP stack has started.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.SipCore">
            <summary>
            Gets or ses SIP core that will handle requests and responses.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.TransportLayer">
            <summary>
            Gets transport layer what is used to receive and send requests and responses.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.TransactionLayer">
            <summary>
            Gets transaction layer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.DigestNonceManager">
            <summary>
            Gets digest authentication nonce manager.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.HostName">
            <summary>
            Gets or stes host name. Fully qualified domain name suggested. For example: sip.lumisoft.ee.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.MinimumExpireTime">
            <summary>
            Gets or sets minimum expire time in seconds what server allows.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.MaximumConnections">
            <summary>
            Gets or sets how many cunncurent connections allowed. Value 0 means not limited. This is used only for TCP based connections.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.MaximumMessageSize">
            <summary>
            Gets or sets maximum allowed SIP message size in bytes. This is used only for TCP based connections.
            Value null means unlimited.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.BindInfo">
            <summary>
            Gets or sets socket bind info. Use this property to specify on which protocol,IP,port server 
            listnes and also if connections is SSL.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Stack.Logger">
            <summary>
            Gets SIP logger.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Stack.ValidateRequest">
            <summary>
            This event is raised when new incoming SIP request is received. You can control incoming requests
            with that event. For example you can require authentication or send what ever error to request maker user.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Stack.Error">
            <summary>
            This event is raised by any SIP element when unknown error happened.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Dialog">
            <summary>
            Implements SIP dialog. Defined in rfc 3261 12 Dialogs.
            </summary>
            <remarks>
            <img src="../images/SIP_Dialog.gif" />
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Default UAS constructor.
            </summary>
            <param name="stack">Reference to SIP stack.</param>
            <param name="request">Server transaction request what response it is.</param>
            <param name="response">Response what caused that dialog creation.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Default UAC constructor.
            </summary>
            <param name="stack">Reference to SIP stack.</param>
            <param name="response">Response what caused that dialog creation.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.Dispose">
            <summary>
            Cleans up any resources being used. 
            Removes dialog from server dialogs, sets dialog state to terminated, ... .
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.InitUAS(LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Initializes UAS SIP dialog.
            </summary>
            <param name="request">SIP request what caused dialog creation.</param>
            <param name="response">Response what caused that dialog creation.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.InitUAC(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Initializes UAC SIP dialog.
            </summary>
            <param name="response">SIP response what caused dialog creation.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.CreateRequest(System.String)">
            <summary>
            Creates new SIP request using this dialog info.
            </summary>
            <param name="method">SIP request method.</param>
            <returns>Returns created SIP request.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.CreateRequest(System.String,System.Boolean)">
            <summary>
            Creates new SIP request using this dialog info.
            </summary>
            <param name="method">SIP request method.</param>
            <param name="addCSeq">Specifies if CSeq header field is increased and added to request.</param>
            <returns>Returns created SIP request.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.CreateAck(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Creates ACK for active INVITE transaction.
            </summary>
            <returns>Returns created ACK request.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.ProcessRequest(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Processes this request on this dialog. Dialog will update it's state as needed.
            Normally this method is always called from transacrion.
            </summary>
            <param name="request">SIP request.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.ProcessResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Processes this response on this dialog. Dialog will update it's state as needed.
            Normally this method is always called from transaction.
            </summary>
            <param name="response">SIP response.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.IsTargetRefreshRequest(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Gets if specified SIP request is target refresh request.
            Basically that mean if dialog remote URI must be updated.
            </summary>
            <param name="request">SIP request.</param>
            <returns>Returns true if specified request is target refresh request.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Dialog.OnTerminated">
            <summary>
            Raises Terminated event.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.Method">
            <summary>
            Gets SIP METHOD that caused dialog creation.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.DialogID">
            <summary>
            Gets dialog ID. Dialog ID is composed from CallID + '-' + Local Tag + '-' + Remote Tag.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.DialogState">
            <summary>
            Gets dialog state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.CallID">
            <summary>
            Gets call ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.LocalTag">
            <summary>
            Gets From: header field tag parameter value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.RemoteTag">
            <summary>
            Gets To: header field tag parameter value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.LocalSequenceNo">
            <summary>
            Gets local command sequence(CSeq) number.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.RemoteSequenceNo">
            <summary>
            Gets remote command sequence(CSeq) number.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.LocalUri">
            <summary>
            Gets local UAC From: header field URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.RemoteUri">
            <summary>
            Gets remote UAC From: header field URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.RemoteTarget">
            <summary>
            Gets remote UAC Contact: header field URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.Routes">
            <summary>
            Gets the list of servers that need to be traversed to send a request to the peer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.IsSecure">
            <summary>
            Gets if request was done over TLS.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.IsServer">
            <summary>
            Gets if thid dialog is UAS or UAC dialog.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Dialog.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_Dialog.Terminated">
            <summary>
            Is raised if dialog is terminated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_ConnectionData">
            <summary>
            A SDP_ConnectionData represents an <B>c=</B> SDP message field. Defined in RFC 4566 5.7. Connection Data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_ConnectionData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_ConnectionData.Parse(System.String)">
            <summary>
            Parses media from "c" SDP message field.
            </summary>
            <param name="cValue">"m" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_ConnectionData.ToValue">
            <summary>
            Converts this to valid connection data stirng. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_ConnectionData.NetType">
            <summary>
            Gets net type. Currently it's always IN(Internet).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_ConnectionData.AddressType">
            <summary>
            Gets or sets address type. Currently defined values IP4 or IP6.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_ConnectionData.Address">
            <summary>
            Gets or sets connection address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Encoding">
            <summary>
            Implements "encoding" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                encoding       = codings *(SEMI accept-param)
                codings        = content-coding / "*"
                content-coding = token
                accept-param   = ("q" EQUAL qvalue) / generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Encoding.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Encoding.Parse(System.String)">
            <summary>
            Parses "encoding" from specified value.
            </summary>
            <param name="value">Accept-Encoding value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Encoding.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "encoding" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Encoding.ToStringValue">
            <summary>
            Converts this to valid "encoding" value.
            </summary>
            <returns>Returns "encoding" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Encoding.ContentEncoding">
            <summary>
            Gets or sets content encoding. Value *(STAR) means all content encodings.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Encoding.QValue">
            <summary>
            Gets or sets qvalue parameter. Targets are processed from highest qvalue to lowest. 
            This value must be between 0.0 and 1.0. Value -1 means that value not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1">
            <summary>
            Implements same single value header fields group. Group can contain one type header fields only.
            This is class is used by Authorization:,Proxy-Authorization:, ... .
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.#ctor(LumiSoft.Net.SIP.Message.SIP_Message,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner message that owns this group.</param>
            <param name="fieldName">Header field name what group holds.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.Refresh">
            <summary>
            Refreshes header fields in group from actual header.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.Add(System.String)">
            <summary>
            Adds specified header field value to the end of header.
            </summary>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.Remove(System.Int32)">
            <summary>
            Removes header field from specified index.
            </summary>
            <param name="index">Index of the header field what to remove. Index is relative ths group.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.Remove(LumiSoft.Net.SIP.Message.SIP_SingleValueHF{`0})">
            <summary>
            Removes specified header field from header.
            </summary>
            <param name="field">Header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.RemoveAll">
            <summary>
            Removes all this gorup header fields from header.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.GetFirst">
            <summary>
            Gets the first(Top-Most) header field. Returns null if no header fields.
            </summary>
            <returns>Returns first header field or null if no header fields.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.FieldName">
            <summary>
            Gets header field name what this group holds.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.Count">
            <summary>
            Gets number of header fields in this group.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_SVGroupHFCollection`1.HeaderFields">
            <summary>
            Gets header fields what are in this group.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.CircleCollection`1">
            <summary>
            Circle collection. Elements will be circled clockwise.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Add(`0[])">
            <summary>
            Adds specified items to the collection.
            </summary>
            <param name="items">Items to add.</param>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Add(`0)">
            <summary>
            Adds specified item to collection.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Clear">
            <summary>
            Clears all items from collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.CircleCollection`1.Next">
            <summary>
            Gets next item.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.CircleCollection`1.Count">
            <summary>
            Gets number of items in queue.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_OptionTags">
            <summary>
            SIP Option Tags. Defined in RFC 3261 27.1, defined values are in: http://www.iana.org/assignments/sip-parameters.
            </summary>
            <remarks>
            Option tags are used in header fields such as Require, Supported, Proxy-Require, and 
            Unsupported in support of SIP compatibility mechanisms for extensions (Section 19.2). 
            The option tag itself is a string that is associated with a particular SIP option (that is, an extension).
            </remarks>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.x100rel">
            <summary>
            This option tag is for reliability of provisional responses. When present in a 
            Supported header, it indicates that the UA can send or receive reliable provisional
            responses. When present in a Require header in a request it indicates that the UAS MUST 
            send all provisional responses reliably. When present in a Require header in a
            reliable provisional response, it indicates that the response is to be sent reliably.
            Defined in rfc 3262.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.early_session">
            <summary>
            A UA adding the early-session option tag to a message indicates that it understands the 
            early-session content disposition. Defined in rfc 3959.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.eventlist">
            <summary>
            Extension to allow subscriptions to lists of resources. Defined in rfc 4662.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.histinfo">
            <summary>
            When used with the Supported header, this option tag indicates support for the 
            History Information to be captured for requests and returned in subsequent responses. 
            This tag is not used in a Proxy-Require or Require header field since support of 
            History-Info is optional. Defined in rfc 4244.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.join">
            <summary>
            Support for the SIP Join Header. Defined in rfc 3911.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.norefersub">
            <summary>
            This option tag specifies a User Agent ability of accepting a REFER request without 
            establishing an implicit subscription (compared to the default case defined in RFC3515).
            Defined in rfc 3911.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.path">
            <summary>
            A SIP UA that supports the Path extension header field includes this option tag as a 
            header field value in a Supported header field in all requests generated by that UA. 
            Intermediate proxies may use the presence of this option tag in a REGISTER request to
            determine whether to offer Path service for for that request. If an intermediate proxy 
            requires that the registrar support Path for a request, then it includes this option tag 
            as a header field value in a Requires header field in that request. Defined in rfc 3327.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.precondition">
            <summary>
            An offerer MUST include this tag in  the Require header field if the offer contains 
            one or more "mandatory" strength-tags. If all the strength-tags in the description are
            "optional" or "none" the offerer MUST include this tag either in a Supported header field or 
            in a Require header field. Defined in rfc 3312.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.pref">
            <summary>
            This option tag is used to ensure that a server understands the callee capabilities 
            parameters used in the request. Defined in rfc 3840.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.privacy">
            <summary>
            This option tag indicates support for the Privacy mechanism. When used in the 
            Proxy-Require header, it indicates that proxy servers do not forward the request unless they 
            can provide the requested privacy service. This tag is not used in the Require or 
            Supported headers. Proxies remove this option tag before forwarding the request if the desired 
            privacy function has been performed. Defined in rfc 3323.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.replaces">
            <summary>
            This option tag indicates support for the SIP Replaces header. Defined in rfc 3891.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.resource_priority">
            <summary>
            Indicates or requests support for the resource priority mechanism. Defined in rfc 4412.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.sdp_anat">
            <summary>
            The option-tag sdp-anat is defined for use in the Require and Supported SIP [RFC3261] 
            header fields. SIP user agents that place this option-tag in a Supported header field understand 
            the ANAT semantics as defined in [RFC4091]. Defined in rfc 4092.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.sec_agree">
            <summary>
            This option tag indicates support for the Security Agreement mechanism. When used in the 
            Require, or Proxy-Require headers, it indicates that proxy servers are required to use the Security 
            Agreement mechanism.  When used in the Supported header, it indicates that the User Agent Client 
            supports the Security Agreement mechanism. When used in the Require header in the 494 (Security Agreement 
            Required) or 421 (Extension Required) responses, it indicates that the User Agent Client must use the 
            Security Agreement Mechanism. Defined in rfc 3329.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.tdialog">
            <summary>
            This option tag is used to identify the target dialog header field extension.  When used in a 
            Require header field, it implies that the recipient needs to support the Target-Dialog header field. 
            When used in a Supported header field, it implies that the sender of the message supports it. 
            Defined in rfc 4538.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_OptionTags.timer">
            <summary>
            This option tag is for support of the session timer extension. Inclusion in a Supported 
            header field in a request or response indicates that the UA is capable of performing 
            refreshes according to that specification.  Inclusion in a Require header in a request 
            means that the UAS must understand the session timer extension to process the request.  
            Inclusion in a Require header field in a response indicates that the UAC must look for the 
            Session-Expires header field in the response, and process accordingly. Defined in rfc 4028.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.AuthUser_EventArgs">
            <summary>
            Provides data for the AuthUser event for POP3_Server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.#ctor(LumiSoft.Net.POP3.Server.POP3_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="userName">Username.</param>
            <param name="passwData">Password data.</param>
            <param name="data">Authentication specific data(as tag).</param>
            <param name="authType">Authentication type.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.Session">
            <summary>
            Gets reference to pop3 session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.PasswData">
            <summary>
            Password data. eg. for AUTH=PLAIN it's password and for AUTH=APOP it's md5HexHash.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.AuthData">
            <summary>
            Authentication specific data(as tag).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.Validated">
            <summary>
            Gets or sets if user is valid.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.ReturnData">
            <summary>
            Gets or sets authentication data what must be returned for connected client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.AuthUser_EventArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_MessagesInfo">
            <summary>
            Holds POP3 messages info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.Add(System.String,System.Int32,System.Int64)">
            <summary>
            Add message to pop3 messages collection.
            </summary>
            <param name="messageID">Message unique ID.</param>
            <param name="messageNo">Message number.</param>
            <param name="messageSize">Message size in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.Contains(System.Int32)">
            <summary>
            Gets if collection contains message with specified number.
            </summary>
            <param name="messageNo">Message number.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.Contains(System.String)">
            <summary>
            Gets if collection contains message with specified UID.
            </summary>
            <param name="messageUID">Message unique ID.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.GetByNo(System.Int32)">
            <summary>
            Gets message by MessageNumber. Returns null if sepcified message info doesn't exist.
            </summary>
            <param name="messageNo">Message number.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.GetByUID(System.String)">
            <summary>
            Gets message by MessageUID. Returns null if sepcified message info doesn't exist.
            </summary>
            <param name="messageUID">Message UID.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.Item(System.Int32)">
            <summary>
            Gets specified pop3 message info at specified index from collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.TotalSize">
            <summary>
            Gets total size of messages in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.Count">
            <summary>
            Gets messages count.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_MessagesInfo.Messages">
            <summary>
            Gets pop3 messages info as array.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.PhoneNumber">
            <summary>
            vCard phone number implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumber.#ctor(LumiSoft.Net.Mime.vCard.Item,LumiSoft.Net.Mime.vCard.PhoneNumberType_enum,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="item">Owner vCard item.</param>
            <param name="type">Phone number type. Note: This value can be flagged value !</param>
            <param name="number">Phone number.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumber.Changed">
            <summary>
            This method is called when some property has changed, wee need to update underlaying vCard item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumber.Parse(LumiSoft.Net.Mime.vCard.Item)">
            <summary>
            Parses phone from vCard TEL structure string.
            </summary>
            <param name="item">vCard TEL item.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumber.PhoneTypeToString(LumiSoft.Net.Mime.vCard.PhoneNumberType_enum)">
            <summary>
            Converts PhoneNumberType_enum to vCard item parameters string.
            </summary>
            <param name="type">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.PhoneNumber.Item">
            <summary>
            Gets underlaying vCrad item.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.PhoneNumber.NumberType">
            <summary>
            Gets or sets phone number type. Note: This property can be flagged value !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.PhoneNumber.Number">
            <summary>
            Gets or sets phone number.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadLine_EventArgs">
            <summary>
            This class proviedes data to asynchronous read line callback method.
            NOTE: ReadLine_EventArgs is reused for next read line call, so don't store references to this class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadLine_EventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadLine_EventArgs.#ctor(System.Exception,System.Int32,System.Byte[],System.Int32,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception what happened while reading data or null if read line was successfull.</param>
            <param name="readedCount">Specifies how many raw bytes was readed.</param>
            <param name="data">Line data buffer.</param>
            <param name="count">Specifies how many bytes stored to <b>data</b>.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadLine_EventArgs.DataToString(System.Text.Encoding)">
            <summary>
            Converts byte[] line data to the specified encoding string.
            </summary>
            <param name="encoding">Encoding to use for convert.</param>
            <returns>Returns line data as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Exception">
            <summary>
            Gets exception what happened while reading line. Returns null if read line completed sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.ReadedCount">
            <summary>
            Gets number of bytes actualy readed from source stream. Returns 0 if end of stream reached
            and no more data. This value includes any readed byte, including line feed, ... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.LineBuffer">
            <summary>
            Gets <b>buffer</b> argumnet what was passed to BeginReadLine mehtod.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Count">
            <summary>
            Gets number of bytes stored to <b>LineBuffer</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Data">
            <summary>
            Gets readed line data or null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.DataStringDefault">
            <summary>
            Gets readed line data as string with system <b>default</b> encoding or returns null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.DataStringAscii">
            <summary>
            Gets readed line data as string with <b>ASCII</b> encoding or returns null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.DataStringUtf8">
            <summary>
            Gets readed line data as string with <b>UTF8</b> encoding or returns null if end of stream reached and no more data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadLine_EventArgs.Tag">
            <summary>
            Gets <b>tag</b> argument what was pased to BeginReadLine method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.DataSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed data size has exceeded.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.DataSizeExceededException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.Message_EventArgs">
            <summary>
            Provides data for message related events.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.Message_EventArgs.#ctor(System.String,LumiSoft.Net.IMAP.Server.IMAP_Message)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">IMAP folder which message is.</param>
            <param name="msg"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.Message_EventArgs.#ctor(System.String,LumiSoft.Net.IMAP.Server.IMAP_Message,System.String)">
            <summary>
            Copy constructor.
            </summary>
            <param name="folder">IMAP folder which message is.</param>
            <param name="msg"></param>
            <param name="copyLocation"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.Message_EventArgs.#ctor(System.String,LumiSoft.Net.IMAP.Server.IMAP_Message,System.Boolean)">
            <summary>
            GetMessage constructor.
            </summary>
            <param name="folder">IMAP folder which message is.</param>
            <param name="msg"></param>
            <param name="headersOnly">Specifies if messages headers or full message is needed.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.Folder">
            <summary>
            Gets IMAP folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.Message">
            <summary>
            Gets IMAP message info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.CopyLocation">
            <summary>
            Gets message new location. NOTE: this is available for copy command only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.MessageData">
            <summary>
            Gets or sets message data. NOTE: this is available for GetMessage and StoreMessage event only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.HeadersOnly">
            <summary>
            Gets if message headers or full message wanted. NOTE: this is available for GetMessage event only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Message_EventArgs.ErrorText">
            <summary>
            Gets or sets custom error text, which is returned to client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_ACL_Flags">
            <summary>
            IMAP ACL(access control list) rights.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.None">
            <summary>
            No permissions at all.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.l">
            <summary>
            Lookup (mailbox is visible to LIST/LSUB commands).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.r">
            <summary>
            Read (SELECT the mailbox, perform CHECK, FETCH, PARTIAL,SEARCH, COPY from mailbox).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.s">
            <summary>
            Keep seen/unseen information across sessions (STORE SEEN flag).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.w">
            <summary>
            Write (STORE flags other than SEEN and DELETED).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.i">
            <summary>
            Insert (perform APPEND, COPY into mailbox).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.p">
            <summary>
            Post (send mail to submission address for mailbox,not enforced by IMAP4 itself).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.c">
            <summary>
            Create (CREATE new sub-mailboxes in any implementation-defined hierarchy).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.d">
            <summary>
            Delete (STORE DELETED flag, perform EXPUNGE).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.a">
            <summary>
            Administer (perform SETACL).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_ACL_Flags.All">
            <summary>
            All permissions
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.AuthUser_EventArgs">
            <summary>
            Provides data for the AuthUser event for FTP_Server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.#ctor(LumiSoft.Net.FTP.Server.FTP_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="userName">Username.</param>
            <param name="passwData">Password data.</param>
            <param name="data">Authentication specific data(as tag).</param>
            <param name="authType">Authentication type.</param>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.Session">
            <summary>
            Gets reference to pop3 session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.PasswData">
            <summary>
            Password data. eg. for AUTH=PLAIN it's password and for AUTH=APOP it's md5HexHash.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.AuthData">
            <summary>
            Authentication specific data(as tag).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.AuthUser_EventArgs.Validated">
            <summary>
            Gets or sets if user is valid.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.Dns_Client">
            <summary>
            Dns client.
            </summary>
            <example>
            <code>
            // Set dns servers
            Dns_Client.DnsServers = new string[]{"194.126.115.18"};
            
            Dns_Client dns = Dns_Client();
            
            // Get MX records.
            DnsServerResponse resp = dns.Query("lumisoft.ee",QTYPE.MX);
            if(resp.ConnectionOk &amp;&amp; resp.ResponseCode == RCODE.NO_ERROR){
            	MX_Record[] mxRecords = resp.GetMXRecords();
            	
            	// Do your stuff
            }
            else{
            	// Handle error there, for more exact error info see RCODE 
            }	 
            
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.Query(System.String,LumiSoft.Net.Dns.Client.QTYPE)">
            <summary>
            Queries server with specified query.
            </summary>
            <param name="queryText">Query text. It depends on queryType.</param>
            <param name="queryType">Query type.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.Resolve(System.String)">
            <summary>
            Resolves a DNS host name or IP to IPAddress[].
            </summary>
            <param name="hostName_IP">Host name or IP address.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.ParseMxRecord(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Parses MX record.
            </summary>
            <param name="reply"></param>
            <param name="offset"></param>
            <param name="ttl">TTL(time to live) value in seconds.</param>
            <returns>Returns null, if failed.</returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.QueryServer(System.String,LumiSoft.Net.Dns.Client.QTYPE,System.Int32)">
            <summary>
            Sends query to server.
            </summary>
            <param name="qname">Query text.</param>
            <param name="qtype">Query type.</param>
            <param name="qclass">Query class.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.CreateQuery(System.Int32,System.String,LumiSoft.Net.Dns.Client.QTYPE,System.Int32)">
            <summary>
            Creates new query.
            </summary>
            <param name="ID">Query ID.</param>
            <param name="qname">Query text.</param>
            <param name="qtype">Query type.</param>
            <param name="qclass">Query class.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.ParseQuery(System.Byte[],System.Int32)">
            <summary>
            Parses query.
            </summary>
            <param name="reply">Dns server reply.</param>
            <param name="queryID">Query id of sent query.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.Dns_Client.ParseAnswers(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parses specified count of answers from query.
            </summary>
            <param name="reply">Server returned query.</param>
            <param name="answerCount">Number of answers to parse.</param>
            <param name="offset">Position from where to start parsing answers.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.DnsServers">
            <summary>
            Gets or sets dns servers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.UseDnsCache">
            <summary>
            Gets or sets if to use dns caching.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.Dns_Client.ID">
            <summary>
            Get next query ID.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord">
            <summary>
            lsDB_FixedLengthTable table record.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord.#ctor(LumiSoft.Data.lsDB.lsDB_FixedLengthTable,System.Int64,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="ownerDb">Table that owns this row.</param>
            <param name="pointer">Row start offset in data base file.</param>
            <param name="rowData">Row data.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord.ReuseRecord(LumiSoft.Data.lsDB.lsDB_FixedLengthTable,System.Int64,System.Byte[])">
            <summary>
            Reuses lsDB_FixedLengthRecord object,
            </summary>
            <param name="ownerDb">Table that owns this row.</param>
            <param name="pointer">Row start offset in data base file.</param>
            <param name="rowData">Row data.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord.ConvertFromInternalData(LumiSoft.Data.lsDB.LDB_DataType,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts internal data to .NET data type.
            </summary>
            <param name="dataType">Data type.</param>
            <param name="val">Data buffer.</param>
            <param name="offset">Offset in data buffer where to start reading data.</param>
            <param name="length">Lenght of data to read from data buffer.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord.Item(System.Int32)">
            <summary>
            Gets or sets specified data column value.
            </summary>
            <param name="columnIndex">Zero based column index.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthRecord.Pointer">
            <summary>
            Gets row pointer.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode">
            <summary>
            Specifies SIP proxy mode.
            <example>
            All flags may be combined, except Stateless,Statefull,CallStatefull.
            For example: (Stateless | Statefull) not allowed, but (Registrar | Presence | Statefull) is allowed.
            </example>
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode.Registrar">
            <summary>
            Proxy implements SIP registrar.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode.Presence">
            <summary>
            Proxy implements SIP presence server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode.Stateless">
            <summary>
            Proxy runs in stateless mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ProxyMode.Statefull">
            <summary>
            Proxy runs in statefull mode.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri">
            <summary>
            Implements SIP "error-uri" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                error-uri = LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri.Parse(System.String)">
            <summary>
            Parses "error-uri" from specified value.
            </summary>
            <param name="value">SIP "error-uri" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "error-uri" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri.ToStringValue">
            <summary>
            Converts this to valid "error-uri" value.
            </summary>
            <returns>Returns "error-uri" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ErrorUri.Uri">
            <summary>
            Gets or sets uri value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ValidateIP_EventArgs">
            <summary>
            Provides data for the ValidateIPAddress event for servers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ValidateIP_EventArgs.#ctor(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="localEndPoint">Server IP.</param>
            <param name="remoteEndPoint">Connected client IP.</param>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.ConnectedIP">
            <summary>
            IP address of computer, which is sending mail to here.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.LocalEndPoint">
            <summary>
            Gets local endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.RemoteEndPoint">
            <summary>
            Gets remote endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.Validated">
            <summary>
            Gets or sets if IP is allowed access.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.SessionTag">
            <summary>
            Gets or sets user data what is stored to session.Tag property.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.ValidateIP_EventArgs.ErrorText">
            <summary>
            Gets or sets error text what is sent to connected socket. NOTE: This is only used if Validated = false.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires">
            <summary>
            Implements SIP "Session-Expires" value. Defined in RFC 4028.
            </summary>
            <remarks>
            <code>
            RFC 4028 Syntax:
                Session-Expires  = delta-seconds *(SEMI se-params)
                se-params        = refresher-param / generic-param
                refresher-param  = "refresher" EQUAL  ("uas" / "uac")
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Session-Expires value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.Parse(System.String)">
            <summary>
            Parses "Session-Expires" from specified value.
            </summary>
            <param name="value">SIP "Session-Expires" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Session-Expires" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.ToStringValue">
            <summary>
            Converts this to valid "Session-Expires" value.
            </summary>
            <returns>Returns "Session-Expires" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.Expires">
            <summary>
            Gets or sets after how many seconds session expires.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when value less than 1 is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SessionExpires.Refresher">
            <summary>
            Gets or sets Session-Expires 'refresher' parameter. Normally this value is 'ua' or 'uas'.
            Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.AuthUserEventHandler">
            <summary>
            Represents the method that will handle the AuthUser event for POP3_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A AuthUser_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.GetMessagesInfoHandler">
            <summary>
            Represents the method that will handle the GetMessgesList event for POP3_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A GetMessagesInfo_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.MessageHandler">
            <summary>
            Represents the method that will handle the GetMessage,DeleteMessage,GetTopLines event for POP3_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A GetMessage_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.GetMessageStreamHandler">
            <summary>
            Represents the method that will handle the GetMessageStream event for POP3_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">Event data.</param>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_Server">
            <summary>
            POP3 server component.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.#ctor">
            <summary>
            Defalut constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.InitNewSession(System.Net.Sockets.Socket,LumiSoft.Net.BindInfo)">
            <summary>
            Initialize and start new session here. Session isn't added to session list automatically, 
            session must add itself to server session list by calling AddSession().
            </summary>
            <param name="socket">Connected client socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.IsUserLoggedIn(System.String)">
            <summary>
            Checks if user is logged in.
            </summary>
            <param name="userName">User name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnValidate_IpAddress(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Raises event ValidateIP event.
            </summary>
            <param name="localEndPoint">Server IP.</param>
            <param name="remoteEndPoint">Connected client IP.</param>
            <returns>Returns true if connection allowed.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnAuthUser(LumiSoft.Net.POP3.Server.POP3_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Authenticates user.
            </summary>
            <param name="session">Reference to current pop3 session.</param>
            <param name="userName">User name.</param>
            <param name="passwData"></param>
            <param name="data"></param>
            <param name="authType"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnGetMessagesInfo(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_MessageCollection)">
            <summary>
            Gest pop3 messages info.
            </summary>
            <param name="session"></param>
            <param name="messages"></param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnGetMessageStream(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message)">
            <summary>
            Raises event 'GetMessageStream'.
            </summary>
            <param name="session">Reference to POP3 session.</param>
            <param name="messageInfo">Message info what message stream to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnDeleteMessage(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message)">
            <summary>
            Raises delete message event.
            </summary>
            <param name="session"></param>
            <param name="message">Message which to delete.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnGetTopLines(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message,System.Int32)">
            <summary>
            Raises event GetTopLines.
            </summary>
            <param name="session"></param>
            <param name="message">Message wich top lines to get.</param>
            <param name="nLines">Header + number of body lines to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnSessionEnd(System.Object)">
            <summary>
            Raises SessionEnd event.
            </summary>
            <param name="session">Session which is ended.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Server.OnSessionResetted(System.Object)">
            <summary>
            Raises SessionResetted event.
            </summary>
            <param name="session">Session which is resetted.</param>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.ValidateIPAddress">
            <summary>
            Occurs when new computer connected to POP3 server.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.AuthUser">
            <summary>
            Occurs when connected user tryes to authenticate.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.SessionEnd">
            <summary>
            Occurs user session ends. This is place for clean up.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.SessionResetted">
            <summary>
            Occurs user session resetted. Messages marked for deletion are unmarked.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.GetMessgesList">
            <summary>
            Occurs when server needs to know logged in user's maibox messages.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.GetMessageStream">
            <summary>
            Occurs when user requests to get specified message.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.DeleteMessage">
            <summary>
            Occurs when user requests delete message.
            </summary>		
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.GetTopLines">
            <summary>
            Occurs when user requests specified message TOP lines.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Server.POP3_Server.SessionLog">
            <summary>
            Occurs when POP3 session has finished and session log is available.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Server.SupportedAuthentications">
            <summary>
            Gets or sets server supported authentication types.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Server.GreetingText">
            <summary>
            Gets or sets server greeting text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Server.MaxConnectionsPerIP">
            <summary>
            Gets or sets maximum allowed conncurent connections from 1 IP address. Value 0 means unlimited connections.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Server.Sessions">
            <summary>
            Gets active sessions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs">
            <summary>
            Provides data for the GetMessgesList event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs.#ctor(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_MessageCollection,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="messages"></param>
            <param name="mailbox">Mailbox name.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs.Session">
            <summary>
            Gets reference to pop3 session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs.Messages">
            <summary>
            Gets referance to POP3 messages info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs.UserName">
            <summary>
            User Name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.GetMessagesInfo_EventArgs.Mailbox">
            <summary>
            Mailbox name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.GroupAddress">
            <summary>
            RFC 2822 3.4. (Address Specification) Group address.
            <p/>
            Syntax: display-name':'[mailbox *(',' mailbox)]';'
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.GroupAddress.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.GroupAddress.Parse(System.String)">
            <summary>
            Parses Rfc 2822 3.4 group address from group address string. Syntax: display-name':'[mailbox *(',' mailbox)]';'
            </summary>
            <param name="group">Group address string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.GroupAddress.OnChanged">
            <summary>
            This called when group address has changed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.GroupAddress.GroupString">
            <summary>
            Gets Group as RFC 2822(3.4. Address Specification) string. Syntax: display-name':'[mailbox *(',' mailbox)]';'
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.GroupAddress.DisplayName">
            <summary>
            Gets or sets display name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.GroupAddress.GroupMembers">
            <summary>
            Gets group members collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.ContentDisposition_enum">
            <summary>
            Rfc 2183 Content-Disposition.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.Attachment">
            <summary>
            Content is attachment.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.Inline">
            <summary>
            Content is embbed resource.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.NotSpecified">
            <summary>
            Content-Disposition header field isn't available or isn't written to mime message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentDisposition_enum.Unknown">
            <summary>
            Content is unknown.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_SequenceSet">
            <summary>
            IMAP sequence-set. RFC 3501.
            <code>
            Examples:
            	2        -> seq-number (2)
            	2:4      -> seq-range  (from 2 - 4)
            	2:*      -> seq-range  (from 2 to last)
            	2,3,10:* -> sequence-set (seq-number,seq-number,seq-range)
            	                       (2,3, 10 - last)
            	
            	NOTES:
            		*) comma separates sequence parts
            		*) * means maximum value.
            </code>
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Parse(System.String)">
            <summary>
            Parses sequence-set from specified string. Throws exception if invalid sequnce-set value.
            </summary>
            <param name="sequenceSetString">Sequence-set string.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Parse(System.String,System.Int64)">
            <summary>
            Parses sequence-set from specified string. Throws exception if invalid sequnce-set value.
            </summary>
            <param name="sequenceSetString">Sequence-set string.</param>
            <param name="seqMaxValue">Maximum value. This if for replacement of * value.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Contains(System.Int64)">
            <summary>
            Gets if sequence set contains specified number.
            </summary>
            <param name="seqNumber">Number to check.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.ToSequenceSetString">
            <summary>
            Converts IMAP_SequenceSet to IMAP sequence-set string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Parse_Seq_Number(System.String,System.Int64)">
            <summary>
            Parses seq-number from specified value. Throws exception if invalid seq-number value.
            </summary>
            <param name="seqNumberValue">Integer number or *.</param>
            <param name="seqMaxValue">Maximum value. This if for replacement of * value.</param>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_SequenceSet.Range">
            <summary>
            Implements range.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Range.#ctor(System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Range value.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_SequenceSet.Range.#ctor(System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="start">Range start.</param>
            <param name="end">Range end.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_SequenceSet.Range.Start">
            <summary>
            Gets range start.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_SequenceSet.Range.End">
            <summary>
            Gets range end.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_Client">
            <summary>
            IMAP client.
            </summary>
            <example>
            <code>
            using(IMAP_Client c = new IMAP_Client()){
            	c.Connect("ivx",143);
            	c.Authenticate("test","test");
            			
            	c.SelectFolder("Inbox");
            			
            	IMAP_SequenceSet sequence_set = new IMAP_SequenceSet();
            	// First message
            	sequence_set.Parse("1");
            	// All messages
            //  sequence_set.Parse("1:*");
            	// Messages 1,3,6 and 100 to last
            //  sequence_set.Parse("1,3,6,100:*");
            
            	// Get messages flags and header
            	IMAP_FetchItem msgsInfo = c.FetchMessages(sequence_set,IMAP_FetchItem_Flags.MessageFlags | IMAP_FetchItem_Flags.Header,true,false);
            	
            	// Do your suff
            }
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.Connect(System.String,System.Int32)">
            <summary>
            Connects to IMAP server.
            </summary>		
            <param name="host">Host name.</param>
            <param name="port">Port number. Default IMAP port is 143.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to IMAP server.
            </summary>		
            <param name="host">Host name.</param>
            <param name="port">Port number. Default IMAP port is 143 and SSL port is 993.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.Disconnect">
            <summary>
            Disconnects from IMAP server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.StartTLS">
            <summary>
            Switches IMAP connection to SSL.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.Authenticate(System.String,System.String)">
            <summary>
            Authenticates user.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.CreateFolder(System.String)">
            <summary>
            Creates specified folder.
            </summary>
            <param name="folderName">Folder name. Eg. test, Inbox/SomeSubFolder. NOTE: use GetFolderSeparator() to get right folder separator.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.DeleteFolder(System.String)">
            <summary>
            Deletes specified folder.
            </summary>
            <param name="folderName">Folder name.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.RenameFolder(System.String,System.String)">
            <summary>
            Renames specified folder.
            </summary>
            <param name="sourceFolderName">Source folder name.</param>
            <param name="destinationFolderName">Destination folder name.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetFolders">
            <summary>
             Gets all available folders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetSubscribedFolders">
            <summary>
            Gets all subscribed folders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.SubscribeFolder(System.String)">
            <summary>
            Subscribes specified folder.
            </summary>
            <param name="folderName">Folder name.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.UnSubscribeFolder(System.String)">
            <summary>
            UnSubscribes specified folder.
            </summary>
            <param name="folderName">Folder name,</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.SelectFolder(System.String)">
            <summary>
            Selects specified folder.
            </summary>
            <param name="folderName">Folder name.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetNamespacesInfo">
            <summary>
            Gets IMAP server namespaces info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetFolderACL(System.String)">
            <summary>
            Gets specified folder ACL entries.
            </summary>
            <param name="folderName">Folder which ACL entries to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.SetFolderACL(System.String,System.String,LumiSoft.Net.IMAP.IMAP_ACL_Flags)">
            <summary>
            Sets specified user ACL permissions for specified folder.
            </summary>
            <param name="folderName">Folder name which ACL to set.</param>
            <param name="userName">User name who's ACL to set.</param>
            <param name="acl">ACL permissions to set.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.DeleteFolderACL(System.String,System.String)">
            <summary>
            Deletes specified user access to specified folder.
            </summary>
            <param name="folderName">Folder which ACL to remove.</param>
            <param name="userName">User name who's ACL to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetFolderMyrights(System.String)">
            <summary>
            Gets myrights to specified folder.
            </summary>
            <param name="folderName"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.CopyMessages(LumiSoft.Net.IMAP.IMAP_SequenceSet,System.String,System.Boolean)">
            <summary>
            Copies specified messages to specified folder.
            </summary>
            <param name="sequence_set">IMAP sequence-set.</param>
            <param name="destFolder">Destination folder name.</param>
            <param name="uidCopy">Specifies if UID COPY or COPY. 
            For UID COPY all sequence_set numers must be message UID values and for normal COPY message numbers.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.MoveMessages(LumiSoft.Net.IMAP.IMAP_SequenceSet,System.String,System.Boolean)">
            <summary>
            Moves specified messages to specified folder.
            </summary>
            <param name="sequence_set">IMAP sequence-set.</param>
            <param name="destFolder">Folder where to copy messages.</param>
            <param name="uidMove">Specifies if sequence-set contains message UIDs or message numbers.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.DeleteMessages(LumiSoft.Net.IMAP.IMAP_SequenceSet,System.Boolean)">
            <summary>
            Deletes specified messages.
            </summary>
            <param name="sequence_set">IMAP sequence-set.</param>
            <param name="uidDelete">Specifies if sequence-set contains message UIDs or message numbers.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.StoreMessage(System.String,System.Byte[])">
            <summary>
            Stores message to specified folder.
            </summary>
            <param name="folderName">Folder where to store message.</param>
            <param name="data">Message data which to store.</param>		
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.StoreMessage(System.String,LumiSoft.Net.IMAP.IMAP_MessageFlags,System.DateTime,System.Byte[])">
            <summary>
            Stores message to specified folder.
            </summary>
            <param name="folderName">Folder where to store message.</param>
            <param name="messageFlags">Message flags what are stored for message.</param>
            <param name="inernalDate">Internal date value what are stored for message.</param>
            <param name="data">Message data which to store.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.FetchMessages(LumiSoft.Net.IMAP.IMAP_SequenceSet,LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags,System.Boolean,System.Boolean)">
            <summary>
            Fetches specifes messages specified fetch items.
            </summary>
            <param name="sequence_set">IMAP sequence-set.</param>
            <param name="fetchFlags">Specifies what data to fetch from IMAP server.</param>
            <param name="setSeenFlag">If true message seen flag is setted.</param>
            <param name="uidFetch">Specifies if sequence-set contains message UIDs or message numbers.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.FetchMessage(System.Int32,System.IO.Stream)">
            <summary>
            Gets specified message from server and stores to specified stream.
            </summary>
            <param name="uid">Message UID which to get.</param>
            <param name="storeStream">Stream where to store message.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.StoreMessageFlags(LumiSoft.Net.IMAP.IMAP_SequenceSet,LumiSoft.Net.IMAP.IMAP_MessageFlags,System.Boolean)">
            <summary>
            Stores specified message flags to specified messages.
            </summary>
            <param name="sequence_set">IMAP sequence-set.</param>
            <param name="msgFlags">Message flags.</param>
            <param name="uidStore">Specifies if UID STORE or STORE. 
            For UID STORE all sequence_set numers must be message UID values and for normal STORE message numbers.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetFolderQuota(System.String)">
            <summary>
            Gets specified folder quota info. Throws Exception if server doesn't support QUOTA.
            </summary>
            <param name="folder">Folder name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetMessagesTotalSize">
            <summary>
            Gets messages total size in selected folder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetUnseenMessagesCount">
            <summary>
            Gets unseen messages count in selected folder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.GetFolderSeparator">
            <summary>
            Gets IMAP server folder separator char.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.RemoveCmdTag(System.String)">
            <summary>
            Removes command tag from response line.
            </summary>
            <param name="responseLine">Response line with command tag.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.ProcessStatusResponse(System.String)">
            <summary>
            Processes IMAP STATUS response and updates this class status info.
            </summary>
            <param name="statusResponse">IMAP STATUS response line.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Client.IsStatusResponse(System.String)">
            <summary>
            Gets if specified line is STATUS response.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.Connected">
            <summary>
            Gets if pop3 client is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.Authenticated">
            <summary>
            Gets if pop3 client is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.PathSeparator">
            <summary>
            Gets IMAP server path separator char.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.SelectedFolder">
            <summary>
            Gets selected folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.UIDValidity">
            <summary>
            Gets folder UID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.UIDNext">
            <summary>
            Gets next predicted message UID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.RecentMessagesCount">
            <summary>
            Gets numbers of recent(not accessed messages) in selected folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.MessagesCount">
            <summary>
            Gets numbers of messages in selected folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Client.IsSecureConnection">
            <summary>
            Gets if the connection is an SSL connection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.OPCODE">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.OPCODE.QUERY">
            <summary>
             a standard query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.OPCODE.IQUERY">
            <summary>
            an inverse query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.OPCODE.STATUS">
            <summary>
            a server status request.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.StringReader">
            <summary>
            String reader.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.StringReader.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="source">Source string.</param>
        </member>
        <member name="M:LumiSoft.Net.StringReader.AppenString(System.String)">
            <summary>
            Appends specified string to SourceString.
            </summary>
            <param name="str">String value to append.</param>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadToFirstChar">
            <summary>
            Reads to first char, skips SP,VTAB,HTAB,CR,LF from the beginning of source string.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadSpecifiedLength(System.Int32)">
            <summary>
            Reads string with specified length. Throws exception if read length is bigger than source string length.
            </summary>
            <param name="length">Number of chars to read.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiter in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiter">Data delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char[])">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped.
            Delimiter is removed by default.
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.QuotedReadToDelimiter(System.Char[],System.Boolean)">
            <summary>
            Reads string to specified delimiter or to end of underlying string. Notes: Delimiters in quoted string is skipped. 
            For example: delimiter = ',', text = '"aaaa,eee",qqqq' - then result is '"aaaa,eee"'.
            </summary>
            <param name="delimiters">Data delimiters.</param>
            <param name="removeDelimiter">Specifies if delimiter is removed from underlying string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord(System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadWord(System.Boolean,System.Char[],System.Boolean)">
            <summary>
            Reads word from string. Returns null if no word is available.
            Word reading begins from first char, for example if SP"text", then space is trimmed.
            </summary>
            <param name="unQuote">Specifies if quoted string word is unquoted.</param>
            <param name="wordTerminatorChars">Specifies chars what terminate word.</param>
            <param name="removeWordTerminator">Specifies if work terminator is removed.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadParenthesized">
            <summary>
            Reads parenthesized value. Supports {},(),[],&lt;&gt; parenthesis. 
            Throws exception if there isn't parenthesized value or closing parenthesize is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.ReadToEnd">
            <summary>
            Reads all remaining string, returns null if no chars left to read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWith(System.String)">
            <summary>
            Gets if source string starts with specified value. Compare is case-sensitive.
            </summary>
            <param name="value">Start string value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.StringReader.StartsWith(System.String,System.Boolean)">
            <summary>
            Gets if source string starts with specified value.
            </summary>
            <param name="value">Start string value.</param>
            <param name="case_sensitive">Specifies if compare is case-sensitive.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.StringReader.Available">
            <summary>
            Gets how many chars are available for reading.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.OriginalString">
            <summary>
            Gets original string passed to class constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.SourceString">
            <summary>
            Gets currently remaining string.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.StringReader.Position">
            <summary>
            Gets position in original string.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_Registration">
            <summary>
            Holds SIP registration info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User name what owns registration.</param>
            <param name="address">Address what registration holds. (This is To: address of record value.)</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.GetContact(System.String)">
            <summary>
            Gets registration contact with specified URI.
            </summary>
            <param name="uri"></param>
            <returns>Returns registration contact or null if no contact with specified URI.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.UpdateContacts(LumiSoft.Net.SIP.Message.SIP_t_ContactParam[],System.Int32,System.Int32,LumiSoft.Net.SIP.Stack.SIP_EndPointInfo)">
            <summary>
            Updates registration contacts.
            </summary>
            <param name="contacts">SIP contacts to add/update.</param>
            <param name="expires">This is register request header field Expires: value and used only if contact doesn't have expires parameter.</param>
            <param name="minExpires">SIP server minimum expire time in seconds.</param>
            <param name="localEP">SIP proxy local end point info what accpeted this contact registration.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.RemoveExpiredContacts">
            <summary>
            Removes all contacts what has been expired.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registration.RemoveAllContacts">
            <summary>
            Removes all regiostration contacts.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registration.Address">
            <summary>
            Gets SIP address what is used for registration mapping. (This is To: address of record value.)
            For example: ivar@lumisoft.ee.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registration.UserName">
            <summary>
            Gets authenticated user name who made register. This available only if server required auth for registration 
            and user authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registration.Contacts">
            <summary>
            Gets registration name registered contacts. NOTE: Contacts are in priority order.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registration.SipContacts">
            <summary>
            Gets sip and sip contacts.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventHandler">
            <summary>
            Represents method what will handle ResponseReceived event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction">
            <summary>
            A SIP_Transaction represents SIP client transaction. Defined in RFC 3261 17.1 Client Transaction.
            A transaction is a sequence of SIP messages exchanged between SIP network elements. 
            Client transaction is created by UAC,UAS or proxy core. Client transaction is responsible for
            sending request to remote UA and processing remote UA server transaction responses.
            Client transaction causes remote UA to create corresponding server transaction.
            </summary>
            <remarks>
            <img src="../images/SIP_ClientTransaction.gif" />
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Destination,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="sipStack">Reference to SIP stack.</param>
            <param name="request">SIP request to what caused to create client transaction.</param>
            <param name="destination">Remote destination info.</param>
            <param name="addVia">Specified if transaction adds new Via: header. If this value is false,
            then its user responsibility to add valid Via: header to <b>request</b> argument.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Dispose">
            <summary>
            Disposes transaction and cleans up all resources.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Begin">
            <summary>
            Call this method to start transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is called when Begin is called multiple times.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Cancel">
            <summary>
            Cancels transaction.
            </summary>
            <remarks>
            Cancel behaviour:
                *) If non-INVITE method, skip cancel.
                *) If has got final response, skip cancel because there is nothing to cancel.
                *) If transaction has got provisional response, send cancel.
                *) If transaction hasn't got provisional response, queue cancel request.
                     If provisional response received, send cancel.
                     If final response received, skip cancel because there is nothing to cancel.
            
            NOTE: Canceled event is raised only if '478 Request Terminated' is received from calee !
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerA_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when INVITE request retransission must be done.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerB_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            This method is raised when INVITE transaction calling state didn't get any response.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerD_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when INVITE completed state linger time ended.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerE_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when non-INVITE request retransission must be done.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerF_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            This method is raised when non-INVITE transaction trying or proceeding state didn't get any response.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerK_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            This method is called when non-INVITE completed state linger time ended.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTransactionTimeoutTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Is called when transaction has timed out.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.m_pTimerDisposeLinger_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            This timer is called when Dispose linger timer ended, we now just need to dispose transaction.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.ProcessResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Processes recipient returned response.
            </summary>
            <param name="response">SIP reponse what is returned from destination recipient.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.SendAck(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends ACK to recipient.
            </summary>
            <param name="response">SIP response which to generate ACK.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.DoCancel">
            <summary>
            Cancels transaction as RFC 3261 specifies.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.PassResponseToDialog(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Passes specified response to SIP dialog. If dialog doesn't exist, nothing is done.
            </summary>
            <param name="response">SIP response.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.EnsureDialog(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Ensures that SIP dialog exists. If not, creates SIP dialog, if exists, updates dialog state.
            </summary>
            <param name="response">SIP response what causes dialog creation.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.OnResponseReceived(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Raises ResponseReceived event.
            </summary>
            <param name="response">SIP response received.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Destination">
            <summary>
            Gets this client transaction request destination info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.ID">
            <summary>
            Gets transaction ID (Via: branch parameter value).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.TransactionSate">
            <summary>
            Gets current transaction state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Request">
            <summary>
            SIP request what transaction handles.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.ServerTransaction">
            <summary>
            Gets server transaction what child transaction this transaction is. Returns null if no owner server transaction.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Responses">
            <summary>
            Gets transaction related responses.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Dialog">
            <summary>
            Gets transaction dialog. Returns null if no dialog available.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Timeout">
            <summary>
            Gets or sets after how many seconds this client transaction times out.
            NOTE: This property takes effect only if transaction hasn't started yet.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when ivalid value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Stack.SIP_ClientTransaction.ResponseReceived">
            <summary>
            Is called when this transaction has got response destination end point.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketLogEntryType">
            <summary>
            Log entry type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketLogEntryType.ReadFromRemoteEP">
            <summary>
            Data is readed from remote endpoint.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketLogEntryType.SendToRemoteEP">
            <summary>
            Data is sent to remote endpoint.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketLogEntryType.FreeText">
            <summary>
            Comment log entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Methods">
            <summary>
            This class represents known SIP request methods.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.ACK">
            <summary>
            ACK method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.BYE">
            <summary>
            BYE method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.CANCEL">
            <summary>
            CANCEL method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.INFO">
            <summary>
            INFO method. Defined in RFC 2976.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.INVITE">
            <summary>
            INVITE method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.MESSAGE">
            <summary>
            MESSAGE method. Defined in RFC 3428.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.NOTIFY">
            <summary>
            NOTIFY method. Defined in RFC 3265.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.OPTIONS">
            <summary>
            OPTIONS method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.PRACK">
            <summary>
            PRACK method. Defined in RFC 3262.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.PUBLISH">
            <summary>
            PUBLISH method. Defined in RFC 3903.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.REFER">
            <summary>
            REFER method. Defined in RFC 3515.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.REGISTER">
            <summary>
            REGISTER method. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.SUBSCRIBE">
            <summary>
            SUBSCRIBE method. Defined in RFC 3265.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Methods.UPDATE">
            <summary>
            UPDATE method. Defined in RFC 3311.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism">
            <summary>
            Implements SIP "sec-mechanism" value. Defined in RFC 3329.
            </summary>
            <remarks>
            <code>
            RFC 3329 Syntax:
                sec-mechanism    = mechanism-name *(SEMI mech-parameters)
                mechanism-name   = ( "digest" / "tls" / "ipsec-ike" / "ipsec-man" / token )
                mech-parameters  = ( preference / digest-algorithm / digest-qop / digest-verify / extension )
                preference       = "q" EQUAL qvalue
                qvalue           = ( "0" [ "." 0*3DIGIT ] ) / ( "1" [ "." 0*3("0") ] )
                digest-algorithm = "d-alg" EQUAL token
                digest-qop       = "d-qop" EQUAL token
                digest-verify    = "d-ver" EQUAL LDQUOT 32LHEX RDQUOT
                extension        = generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.Parse(System.String)">
            <summary>
            Parses "sec-mechanism" from specified value.
            </summary>
            <param name="value">SIP "sec-mechanism" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "sec-mechanism" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.ToStringValue">
            <summary>
            Converts this to valid "sec-mechanism" value.
            </summary>
            <returns>Returns "sec-mechanism" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.Mechanism">
            <summary>
            Gets or sets security mechanism name. Defined values: "digest","tls","ipsec-ike","ipsec-man".
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid Mechanism value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.Q">
            <summary>
            Gets or sets 'q' parameter value. Value -1 means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.D_Alg">
            <summary>
            Gets or sets 'd-alg' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.D_Qop">
            <summary>
            Gets or sets 'd-qop' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SecMechanism.D_Ver">
            <summary>
            Gets or sets 'd-ver' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter">
            <summary>
            Implements SIP "Retry-After" value. Defined in rfc 3261.
            Retry after specifies how many seconds the service is expected to be unavailable to the requesting client.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                Retry-After = delta-seconds [ comment ] *( SEMI retry-param )
                retry-param = ("duration" EQUAL delta-seconds) / generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP Retry-After value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.Parse(System.String)">
            <summary>
            Parses "Retry-After" from specified value.
            </summary>
            <param name="value">SIP "Retry-After" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Retry-After" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.ToStringValue">
            <summary>
            Converts this to valid "Retry-After" value.
            </summary>
            <returns>Returns "Retry-After" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.Time">
            <summary>
            Gets or sets how many seconds the service is expected to be unavailable to the requesting client.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when when value less than 1 is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RetryAfter.Duration">
            <summary>
            Gets or sets 'duration' parameter value. The 'duration' parameter indicates how long the 
            called party will be reachable starting at the initial time of availability. If no duration 
            parameter is given, the service is assumed to be available indefinitely. Value -1 means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when when value less than 1 is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.Log.WriteLogHandler">
            <summary>
            Represents method that will handle <b>WriteLog</b> event.
            </summary>
            <param name="entries">Log entries.</param>
        </member>
        <member name="T:LumiSoft.Net.Log.Logger">
            <summary>
            General logging module.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.Flush">
            <summary>
            Forces to write all buffered log entries.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddRead(System.Int32,System.String)">
            <summary>
            Adds read log entry.
            </summary>
            <param name="size">Readed data size in bytes.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddWrite(System.Int32,System.String)">
            <summary>
            Add write log entry.
            </summary>
            <param name="size">Written data size in bytes.</param>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.AddDebug(System.String)">
            <summary>
            Adds debug entry.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:LumiSoft.Net.Log.Logger.OnWriteLog">
            <summary>
            Raises WriteLog event.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.Log.Logger.WriteLog">
            <summary>
            Is raised when log buffer is full and log entries must be processed,
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.FetchHelper">
            <summary>
            FETCH command helper methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.ParseHeaderFields(System.String,LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Returns requested header fields lines.
            Note: Header terminator blank line is included.
            </summary>
            <param name="fieldsStr">Header fields to get.</param>
            <param name="entity">Entity which header field lines to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.ParseHeaderFields(System.String,System.Byte[])">
            <summary>
            Returns requested header fields lines.
            Note: Header terminator blank line is included.
            </summary>
            <param name="fieldsStr">Header fields to get.</param>
            <param name="data">Message data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.ParseHeaderFieldsNot(System.String,LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Returns header fields lines except requested.
            Note: Header terminator blank line is included.
            </summary>
            <param name="fieldsStr">Header fields to skip.</param>
            <param name="entity">Entity which header field lines to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.ParseHeaderFieldsNot(System.String,System.Byte[])">
            <summary>
            Returns header fields lines except requested.
            Note: Header terminator blank line is included.
            </summary>
            <param name="fieldsStr">Header fields to skip.</param>
            <param name="data">Message data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.GetMimeEntity(LumiSoft.Net.Mime.Mime,System.String)">
            <summary>
            Gets specified mime entity. Returns null if specified mime entity doesn't exist.
            </summary>
            <param name="parser">Reference to mime parser.</param>
            <param name="mimeEntitySpecifier">Mime entity specifier. Nested mime entities are pointed by '.'. 
            For example: 1,1.1,2.1, ... .</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.GetMimeEntityHeader(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Gets specified mime entity header.
            Note: Header terminator blank line is included.
            </summary>
            <param name="entity">Mime entity.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.GetMimeEntityHeader(LumiSoft.Net.Mime.Mime,System.String)">
            <summary>
            Gets requested mime entity header. Returns null if specified mime entity doesn't exist.
            Note: Header terminator blank line is included.
            </summary>
            <param name="parser">Reference to mime parser.</param>
            <param name="mimeEntitySpecifier">Mime entity specifier. Nested mime entities are pointed by '.'. 
            For example: 1,1.1,2.1, ... .</param>
            <returns>Returns requested mime entity data or NULL if requested entry doesn't exist.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.FetchHelper.GetMimeEntityData(LumiSoft.Net.Mime.Mime,System.String)">
            <summary>
            Gets requested mime entity data. Returns null if specified mime entity doesn't exist.
            </summary>
            <param name="parser">Reference to mime parser.</param>
            <param name="mimeEntitySpecifier">Mime entity specifier. Nested mime entities are pointed by '.'. 
            For example: 1,1.1,2.1, ... .</param>
            <returns>Returns requested mime entity data or NULL if requested entry doesn't exist.</returns>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.A_Record">
            <summary>
            A record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.A_Record.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="IP">IP address.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.A_Record.IP">
            <summary>
            Gets mail host dns name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.SaslAuthTypes">
            <summary>
            SASL authentications
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.None">
            <summary>
            Non authentication
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Plain">
            <summary>
            Plain text authentication. For POP3 USER/PASS commands, for IMAP LOGIN command.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Login">
            <summary>
            LOGIN.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Cram_md5">
            <summary>
            CRAM-MD5
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.Digest_md5">
            <summary>
            DIGEST-MD5.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AUTH.SaslAuthTypes.All">
            <summary>
            All authentications.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_DialogState">
            <summary>
            Specifies dialog state.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_DialogState.Early">
            <summary>
            Dialog isn't established yet.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_DialogState.Confirmed">
            <summary>
            Dialog has got 2xx response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_DialogState.Terminated">
            <summary>
            Dialog is terminated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Response">
            <summary>
            SIP server response. Related RFC 3261.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_Message">
            <summary>
            Implements SIP message. This is base class for SIP_Request and SIP_Response. Defined in RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Message.#ctor">
            <summary>
            Default constuctor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Message.InternalParse(System.Byte[])">
            <summary>
            Parses SIP message from specified byte array.
            </summary>
            <param name="data">SIP message data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Message.InternalParse(System.IO.Stream)">
            <summary>
            Parses SIP message from specified stream.
            </summary>
            <param name="stream">SIP message stream.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Message.InternalToStream(System.IO.Stream)">
            <summary>
            Stores SIP_Message to specified stream.
            </summary>
            <param name="stream">Stream where to store SIP_Message.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Header">
            <summary>
            Gets direct access to header.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Accept">
            <summary>
            Gets or sets what features end point supports.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AcceptContact">
            <summary>
            Gets or sets Accept-Contact header value. Defined in RFC 3841.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AcceptEncoding">
            <summary>
            Gets encodings what end point supports. Example: Accept-Encoding: gzip.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AcceptLanguage">
            <summary>
            Gets preferred languages for reason phrases, session descriptions, or
            status responses carried as message bodies in the response. If no Accept-Language 
            header field is present, the server SHOULD assume all languages are acceptable to the client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AcceptResourcePriority">
            <summary>
            Gets Accept-Resource-Priority headers. Defined in RFC 4412.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AlertInfo">
            <summary>
            Gets AlertInfo values collection. When present in an INVITE request, the Alert-Info header 
            field specifies an alternative ring tone to the UAS. When present in a 180 (Ringing) response, 
            the Alert-Info header field specifies an alternative ringback tone to the UAC.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Allow">
            <summary>
            Gets methods collection which is supported by the UA which generated the message.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AllowEvents">
            <summary>
            Gets Allow-Events header which indicates the event packages supported by the client. Defined in rfc 3265.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.AuthenticationInfo">
            <summary>
            Gets the Authentication-Info header fields which provides for mutual authentication 
            with HTTP Digest.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Authorization">
            <summary>
            Gets the Authorization header fields which contains authentication credentials of a UA.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.CallID">
            <summary>
            Gets or sets the Call-ID header field which uniquely identifies a particular invitation or all 
            registrations of a particular client.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.CallInfo">
            <summary>
            Gets the Call-Info header field which provides additional information about the
            caller or callee, depending on whether it is found in a request or response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Contact">
            <summary>
            Gets message contact fields. The Contact header field provides a SIP or SIPS URI that can be used
            to contact that specific instance of the UA for subsequent requests.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ContentDisposition">
            <summary>
            Gets or sets the Content-Disposition header field which describes how the message body
            or, for multipart messages, a message body part is to be interpreted by the UAC or UAS.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ContentEncoding">
            <summary>
            Gets the Content-Encodings which is used as a modifier to the "media-type". When present, 
            its value indicates what additional content codings have been applied to the entity-body, 
            and thus what decoding mechanisms MUST be applied in order to obtain the media-type referenced 
            by the Content-Type header field.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ContentLanguage">
            <summary>
            Gets content languages.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ContentLength">
            <summary>
            Gets SIP request content data size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ContentType">
            <summary>
            Gets or sets the Content-Type header field which indicates the media type of the
            message-body sent to the recipient.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.CSeq">
            <summary>
            Gets or sets command sequence number and the request method.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Date">
            <summary>
            Gets or sets date and time. Value DateTime.MinValue means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ErrorInfo">
            <summary>
            Gets the Error-Info header field which provides a pointer to additional
            information about the error status response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Event">
            <summary>
            Gets or sets Event header. Defined in RFC 3265.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Expires">
            <summary>
            Gets or sets relative time after which the message (or content) expires.
            Value -1 means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.From">
            <summary>
            Gets or sets initiator of the request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.HistoryInfo">
            <summary>
            Gets History-Info headers. Defined in RFC 4244.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Identity">
            <summary>
            Identity header value. Value null means not specified. Defined in RFC 4474.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.IdentityInfo">
            <summary>
            Gets or sets Identity-Info header value. Value null means not specified. 
            Defined in RFC 4474.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.InReplyTo">
            <summary>
            Gets the In-Reply-To header fields which enumerates the Call-IDs that this call 
            references or returns.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Join">
            <summary>
            Gets or sets Join header which indicates that a new dialog (created by the INVITE in which 
            the Join header field in contained) should be joined with a dialog identified by the header 
            field, and any associated dialogs or conferences. Defined in 3911. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.MaxForwards">
            <summary>
            Gets or sets limit the number of proxies or gateways that can forward the request 
            to the next downstream server.
            Value -1 means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.MimeVersion">
            <summary>
            Gets or sets mime version. Currently 1.0 is only defined value.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.MinExpires">
            <summary>
            Gets or sets minimum refresh interval supported for soft-state elements managed by that server.
            Value -1 means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.MinSE">
            <summary>
            Gets or sets Min-SE header which indicates the minimum value for the session interval, 
            in units of delta-seconds. Defined in 4028. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Organization">
            <summary>
            Gets or sets organization name which the SIP element issuing the request or response belongs.
            Value null means not specified.
            </summary>        
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Path">
            <summary>
            Gets an Path header. It is used in conjunction with SIP REGISTER requests and with 200 
            class messages in response to REGISTER (REGISTER responses). Defined in rfc 3327.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Priority">
            <summary>
            Gest or sets priority that the SIP request should have to the receiving human or its agent.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ProxyAuthenticate">
            <summary>
            Gets an proxy authentication challenge.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ProxyAuthorization">
            <summary>
            Gest credentials containing the authentication information of the user agent 
            for the proxy and/or realm of the resource being requested.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ProxyRequire">
            <summary>
            Gets proxy-sensitive features that must be supported by the proxy.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RAck">
            <summary>
            Gets or sets RAck header. Defined in 3262. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Reason">
            <summary>
            Gets the Reason header. Defined in rfc 3326.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RecordRoute">
            <summary>
            Gets the Record-Route header fields what is inserted by proxies in a request to
            force future requests in the dialog to be routed through the proxy.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ReferSub">
            <summary>
            Gets or sets Refer-Sub header. Defined in rfc 4488. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ReferTo">
            <summary>
            Gets or sets Refer-To header. Defined in rfc 3515. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ReferredBy">
            <summary>
            Gets or sets Referred-By header. Defined in rfc 3892. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RejectContact">
            <summary>
            Gets Reject-Contact headers. Defined in RFC 3841.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Replaces">
            <summary>
            Gets or sets Replaces header. Defined in rfc 3891. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ReplyTo">
            <summary>
            Gets logical return URI that may be different from the From header field.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RequestDisposition">
            <summary>
            Gets or sets Request-Disposition header. The Request-Disposition header field specifies caller preferences for
            how a server should process a request. Defined in rfc 3841.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Require">
            <summary>
            Gets options that the UAC expects the UAS to support in order to process the request.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ResourcePriority">
            <summary>
            Gets Resource-Priority headers. Defined in RFC 4412.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RetryAfter">
            <summary>
            Gets or sets how many seconds the service is expected to be unavailable to the requesting client.
            Value null means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Route">
            <summary>
            Gets force routing for a request through the listed set of proxies.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.RSeq">
            <summary>
            Gets or sets RSeq header. Value -1 means that value not specified. Defined in rfc 3262.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SecurityClient">
            <summary>
            Gets Security-Client headers. Defined in RFC 3329.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SecurityServer">
            <summary>
            Gets Security-Server headers. Defined in RFC 3329.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SecurityVerify">
            <summary>
            Gets Security-Verify headers. Defined in RFC 3329.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Server">
            <summary>
            Gets or sets the software used by the UAS to handle the request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.ServiceRoute">
            <summary>
            Gets the Service-Route header. Defined in rfc 3608.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SessionExpires">
            <summary>
            Gets or sets Session-Expires expires header. Value null means that value not specified. 
            Defined in rfc 4028.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SIPETag">
            <summary>
            Gets or sets SIP-ETag header value. Value null means not specified. Defined in RFC 3903.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SIPIfMatch">
            <summary>
            Gets or sets SIP-ETag header value. Value null means not specified. Defined in RFC 3903.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Subject">
            <summary>
            Gets or sets call subject text.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.SubscriptionState">
            <summary>
            Gets or sets Subscription-State header value. Value null means that value not specified. 
            Defined in RFC 3265. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Supported">
            <summary>
            Gets extensions supported by the UAC or UAS. Known values are defined in SIP_OptionTags class.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.TargetDialog">
            <summary>
            Gets or sets Target-Dialog header value. Value null means that value not specified. 
            Defined in RFC 4538.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Timestamp">
            <summary>
            Gets or sets when the UAC sent the request to the UAS. 
            Value null means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.To">
            <summary>
            Gets or sets logical recipient of the request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Unsupported">
            <summary>
            Gets features not supported by the UAS.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.UserAgent">
            <summary>
            Gets or sets information about the UAC originating the request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Via">
            <summary>
            Gets Via header fields.The Via header field indicates the transport used for the transaction
            and identifies the location where the response is to be sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Warning">
            <summary>
            Gets additional information about the status of a response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.WWWAuthenticate">
            <summary>
            Gets or authentication challenge.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Message.Data">
            <summary>
            Gets or sets content data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.Validate">
            <summary>
            Checks if SIP response has all required values as response line,header fields and their values.
            Throws Exception if not valid SIP response.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.Parse(System.Byte[])">
            <summary>
            Parses SIP_Response from byte array.
            </summary>
            <param name="data">Valid SIP response data.</param>
            <returns>Returns parsed SIP_Response obeject.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.Parse(System.IO.Stream)">
            <summary>
            Parses SIP_Response from stream.
            </summary>
            <param name="stream">Stream what contains valid SIP response.</param>
            <returns>Returns parsed SIP_Response obeject.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.ToStream(System.IO.Stream)">
            <summary>
            Stores SIP_Response to specified stream.
            </summary>
            <param name="stream">Stream where to store.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Response.ToByteData">
            <summary>
            Converts this response to raw srver response data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.SipVersion">
            <summary>
            Gets or sets SIP version.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid SIP version value passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.StausCodeType">
            <summary>
            Gets SIP status code type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.StatusCode">
            <summary>
            Gets or sets response status code. This value must be between 100 and 999.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when value is out of allowed range.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.ReasonPhrase">
            <summary>
            Gets or sets reponse reasong phrase. This just StatusCode describeing text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Response.StatusCode_ReasonPhrase">
            <summary>
            Gets or sets SIP Status-Code with Reason-Phrase (Status-Code SP Reason-Phrase).
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Credentials">
            <summary>
            Implements SIP "credentials" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                credentials    = ("Digest" LWS digest-response) / other-response
                other-response = auth-scheme LWS auth-param *(COMMA auth-param)
                auth-scheme    = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Credentials.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP credentials value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Credentials.Parse(System.String)">
            <summary>
            Parses "credentials" from specified value.
            </summary>
            <param name="value">SIP "credentials" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Credentials.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "credentials" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Credentials.ToStringValue">
            <summary>
            Converts this to valid "credentials" value.
            </summary>
            <returns>Returns "credentials" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Credentials.Method">
            <summary>
            Gets or sets authentication method. Normally this value is always 'Digest'.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Credentials.AuthData">
            <summary>
            Gets or sets authentication data. That value depends on authentication type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Info">
            <summary>
            Implements SIP "info" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                info       = LAQUOT absoluteURI RAQUOT *( SEMI info-param)
                info-param = ( "purpose" EQUAL ( "icon" / "info" / "card" / token ) ) / generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Info.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Info.Parse(System.String)">
            <summary>
            Parses "info" from specified value.
            </summary>
            <param name="value">SIP "info" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Info.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "info" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Info.ToStringValue">
            <summary>
            Converts this to valid "info" value.
            </summary>
            <returns>Returns "info" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Info.Purpose">
            <summary>
            Gets or sets 'purpose' parameter value. Value null means not specified. 
            Known values: "icon","info","card".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_ParseException">
            <summary>
            The exception that is thrown when a SIP message parsing fails.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParseException.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="message">The message what describes the error.</param>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_Parameter">
            <summary>
            This class represents SIP value parameter.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Parameter.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Parameter name.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_Parameter.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Parameter.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_Parameter.Value">
            <summary>
            Gets or sets parameter name. Value null means value less tag prameter.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MimeEntityCollection">
            <summary>
            Mime entity collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.#ctor(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Default constructor.
            </summary>
            <param name="ownerEntity">Mime entity what owns this collection.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Add">
            <summary>
            Creates a new mime entity to the end of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Add(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Adds specified mime entity to the end of the collection.
            </summary>
            <param name="entity">Mime entity to add to the collection.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Insert(System.Int32,LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Inserts a new mime entity into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the mime entity.</param>
            <param name="entity">Mime entity.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Remove(System.Int32)">
            <summary>
            Removes mime entity at the specified index from the collection.
            </summary>
            <param name="index">Index of mime entity to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Remove(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Removes specified mime entity from the collection.
            </summary>
            <param name="entity">Mime entity to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Clear">
            <summary>
            Clears the collection of all mome entities.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.Contains(LumiSoft.Net.Mime.MimeEntity)">
            <summary>
            Gets if collection contains specified mime entity.
            </summary>
            <param name="entity">Mime entity.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeEntityCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntityCollection.Item(System.Int32)">
            <summary>
            Gets mime entity at specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MimeEntityCollection.Count">
            <summary>
            Gets mime entities count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.ReadToStream_EventArgs">
            <summary>
            This class provides data to asynchronous read to stream methods callback.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadToStream_EventArgs.#ctor(System.Exception,System.IO.Stream,System.Int32,System.Object)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception what happened while reading data or null if data reading was successfull.</param>
            <param name="stream">Stream where data was stored.</param>
            <param name="count">Number of bytes readed.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.IO.ReadToStream_EventArgs.DataToString(System.Text.Encoding)">
            <summary>
            Converts byte[] line data to the specified encoding string.
            </summary>
            <param name="encoding">Encoding to use for convert.</param>
            <returns>Returns line data as string.</returns>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Exception">
            <summary>
            Gets exception what happened while reading data. Returns null if data reading completed sucessfully.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Stream">
            <summary>
            Gets stream where data is stored.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Count">
            <summary>
            Gets number of bytes readed and written to <b>Stream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Data">
            <summary>
            Gets readed data. NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.DataStringDefault">
            <summary>
            Gets readed line data as string with system <b>default</b> encoding. 
            NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.DataStringAscii">
            <summary>
            Gets readed line data as string with <b>ASCII</b> encoding. 
            NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.DataStringUtf8">
            <summary>
            Gets readed line data as string with <b>UTF8</b> encoding. 
            NOTE: This property is available only is Stream supports seeking !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.ReadToStream_EventArgs.Tag">
            <summary>
            Gets or stes user data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.LineSizeExceededException">
            <summary>
            The exception that is thrown when maximum allowed line size has exceeded.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.LineSizeExceededException.#ctor">
            <summary>
            Default coonstructor.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags">
            <summary>
            Specifies what data is requested from IMAP server FETCH command.
            Fetch items are flags and can be combined. For example: IMAP_FetchItem_Flags.MessageFlags | IMAP_FetchItem_Flags.Header.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.UID">
            <summary>
            Message UID value.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.Size">
            <summary>
            Message size in bytes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.InternalDate">
            <summary>
            Message IMAP server INTERNALDATE.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.MessageFlags">
            <summary>
            Fetches message flags. (\SEEN \ANSWERED ...)
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.Header">
            <summary>
            Fetches message header.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.Message">
            <summary>
            Fetches full message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.Envelope">
            <summary>
            Fetches message ENVELOPE structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.BodyStructure">
            <summary>
            Fetches message BODYSTRUCTURE structure.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags.All">
            <summary>
            Fetches all info.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.QTYPE">
            <summary>
            Query type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.A">
            <summary>
            IPv4 host address
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.NS">
            <summary>
            An authoritative name server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.CNAME">
            <summary>
            The canonical name for an alias.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.SOA">
            <summary>
            Marks the start of a zone of authority.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.PTR">
            <summary>
            A domain name pointer.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.HINFO">
            <summary>
            Host information.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.MX">
            <summary>
            Mail exchange.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.TXT">
            <summary>
            Text strings.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.AAAA">
            <summary>
            IPv6 host address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.QTYPE.ANY">
            <summary>
            All records what server returns.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_Namespace">
            <summary>
            IMAP namespace. Defined in RFC 2342.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Namespace.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Namespace name.</param>
            <param name="delimiter">Namespace hierarchy delimiter.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Namespace.Name">
            <summary>
            Gets namespace name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Namespace.Delimiter">
            <summary>
            Gets namespace hierarchy delimiter.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransportLayer">
            <summary>
            Implements SIP transport layer. Defined in RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack)">
            <summary>
            Default constructor.
            </summary>
            <param name="sipStack">Reference to SIP stack.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.Start">
            <summary>
            Starts listening incoming requests and responses.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.Stop">
            <summary>
            Stops listening incoming requests and responses.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.ProcessIncomingData">
            <summary>
            Processes incoming SIP UDP messages or incoming new SIP connections.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.Process(System.Object)">
            <summary>
            Processes UDP received SIP packet.
            </summary>
            <param name="state">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.Process(System.String,LumiSoft.Net.SocketEx,System.Byte[],System.Net.IPEndPoint)">
            <summary>
            Processes SIP data (request or response).
            </summary>
            <param name="socket">Socket what accepted specified SIP message.</param>
            <param name="data">SIP message or may be junk data too.</param>
            <param name="remoteEndPoint">Remote IP end point what sent SIP message.</param>
            <param name="transport">SIP transport what received message.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.ProcessRequest(LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SocketEx,System.Net.IPEndPoint)">
            <summary>
            Processes incoming request.
            </summary>
            <param name="request">SIP request.</param>
            <param name="socket">Socket which made request.</param>
            <param name="remoteEndPoint">Remote end point what created request.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.ProcessResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Processes SIP recipient response.
            </summary>
            <param name="response">SIP response.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendRequest(LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Sends specified request to the host whats specified in Request-URI. NOTE: Request-URI must
            be sip or sips URI, otherwise exception is thrown.
            </summary>
            <param name="request">SIP request to send.</param>
            <exception cref="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">Is raised when sending fails.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendRequest(LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_Destination)">
            <summary>
            Sends request to the specified destination.
            </summary>
            <param name="request">SIP request to send.</param>
            <param name="destination">Destination info.</param>
            <exception cref="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">Is raised when sending fails.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendRequest(LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Stack.SIP_EndPointInfo,System.Net.IPEndPoint,System.String)">
            <summary>
            Sends specified request to specified SIP server.
            </summary>
            <param name="request">SIP request to send.</param>
            <param name="localEndPoint">Local end point to use. Value null means first available. NOTE: This is used only if transport = UDP.</param>
            <param name="remoteEndPoint">Destination remote endpoint where to send request.</param>
            <param name="transport">SIP transport to use. Supported values are defined in SIP_Transport class.</param>
            <exception cref="T:LumiSoft.Net.SIP.Stack.SIP_TransportException">Is raised when sending fails.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendResponse(LumiSoft.Net.SocketEx,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends response to request maker.
            </summary>
            <param name="socket">Socket which to use to send response.</param>
            <param name="response">Response to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SendResponse(LumiSoft.Net.SocketEx,System.Net.IPEndPoint,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Sends response to request maker.
            </summary>
            <param name="socket">Socket which to use to send response.</param>
            <param name="remoteEndPoint">Remote end point where to send response. 
            If this value is null, Via header is used to get remote end point.
            </param>
            <param name="response">Response to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.GetTcpPipe(System.String,System.Net.IPEndPoint)">
            <summary>
            Gets specified TCP pipe. Returns null if specified pipe doesn't exist.
            </summary>
            <param name="protocol">SIP protocol or null if TCP/TLS.</param>
            <param name="endPoint">Remote IP end point.</param>
            <returns>Returns TCP pipe or null if no match.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.IsRunning">
            <summary>
            Gets if transport layer is running.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_Packet">
            <summary>
            This calls holds UDP SIP packet info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_Packet.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Default constuctor.
            </summary>
            <param name="socket">Owner socket.</param>
            <param name="remoteEndPoint">Remote end point from where data received.</param>
            <param name="data">Data received.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_Packet.Socket">
            <summary>
            Gets owner socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_Packet.RemoteEndPoint">
            <summary>
            Gets remote end point from where data received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SIP_Packet.Data">
            <summary>
            Gets data received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipListeningPoint">
            <summary>
            This class represents stack listeining point.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipListeningPoint.#ctor(LumiSoft.Net.BindInfoProtocol,System.Net.Sockets.Socket,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Default constructor.
            </summary>
            <param name="protocol">Listening protocol.</param>
            <param name="socket">Socket what represents this end point.</param>
            <param name="ssl">Specifies if connection is SSL connection.</param>
            <param name="certificate">SSL certificate.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipListeningPoint.Protocol">
            <summary>
            Gets listening protocol.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipListeningPoint.Socket">
            <summary>
            Gets listening socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipListeningPoint.LocalEndPoint">
            <summary>
            Gets listening local IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipListeningPoint.SSL">
            <summary>
            Gets if connection is SSL connection. TODO: get rid of it, instead of it add protocol SSL.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipListeningPoint.Certificate">
            <summary>
            Gets listening point certificate. This certificate is used for SSL or TSL negoation.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe">
            <summary>
            Implements SIP TCP pipe. This class just waits incoming data, reads it and processes it.
            This is done while socket is closed by remote host or timeout reached.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.#ctor(LumiSoft.Net.SIP.Stack.SIP_TransportLayer,LumiSoft.Net.SocketEx)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner SIP_TransportLayer.</param>
            <param name="socket">Connected socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.#ctor(LumiSoft.Net.SIP.Stack.SIP_TransportLayer,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner SIP_TransportLayer.</param>
            <param name="remoteEP">Remote end point.</param>
            <param name="ssl">Specifies if SSL pipe.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.Start">
            <summary>
            Starts reading SIP request or response.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.SendMessage(System.Byte[])">
            <summary>
            Sends specifed SIP message to pipe.
            </summary>
            <param name="message">Raw message what to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.BeginReadHeaderLine">
            <summary>
            Begins reading header line.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.BeginReadHeaderLine_Completed(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            This method is called if header line reading has completed.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="x"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.BeginReadData_Completed(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            This method is called if content data reading has completed.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="x"></param>
            <param name="tag"></param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.Transport">
            <summary>
            Gets SIP transport(TCP or TLS) that pipe uses.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.LastActivity">
            <summary>
            Gets when was last read or write activity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.LocalEndPoint">
            <summary>
            Gets pipe local IP end point.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_TransportLayer.SipTcpPipe.RemoteEndPoint">
            <summary>
            Gets pipe remote end point.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs">
            <summary>
            This class provides data for SIP_Core.OnResponseReceived method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_ClientTransaction,LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Reference to SIP stack.</param>
            <param name="transaction">Client transaction what response it is. This value can be null if no matching client response.</param>
            <param name="response">Received response.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs.Response">
            <summary>
            Gets response received by SIP stack.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs.ClientTransaction">
            <summary>
            Gets client transaction which response it is. This value is null if no matching client transaction.
            If this core is staless proxy then it's allowed, otherwise core MUST discard that response.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs.Dialog">
            <summary>
            Gets SIP dialog where Response belongs to. Returns null if Response doesn't belong any dialog.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_Presence">
            <summary>
            This class implements SIP presence server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Presence.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Presence.Subscribe(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Handles SUBSCRIBE method.
            </summary>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Presence.Notify(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Handles NOTIFY method.
            </summary>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Directive">
            <summary>
            Implements SIP "directive" value. Defined in RFC 3841.
            </summary>
            <remarks>
            <code>
            RFC 3841 Syntax:
                directive          = proxy-directive / cancel-directive / fork-directive / recurse-directive /
                                     parallel-directive / queue-directive
                proxy-directive    = "proxy" / "redirect"
                cancel-directive   = "cancel" / "no-cancel"
                fork-directive     = "fork" / "no-fork"
                recurse-directive  = "recurse" / "no-recurse"
                parallel-directive = "parallel" / "sequential"
                queue-directive    = "queue" / "no-queue"
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Directive.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Directive.Parse(System.String)">
            <summary>
            Parses "directive" from specified value.
            </summary>
            <param name="value">SIP "directive" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Directive.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "directive" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Directive.ToStringValue">
            <summary>
            Converts this to valid "directive" value.
            </summary>
            <returns>Returns "directive" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Directive.Directive">
            <summary>
            Gets or sets directive.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType">
            <summary>
            Proccess directives. Defined in rfc 3841 9.1.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Proxy">
            <summary>
            This directive indicates whether the caller would like each server to proxy request. 
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Redirect">
            <summary>
            This directive indicates whether the caller would like each server to redirect request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Cancel">
            <summary>
            This directive indicates whether the caller would like each proxy server to send a CANCEL 
            request to forked branches.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.NoCancel">
            <summary>
            This directive indicates whether the caller would NOT want each proxy server to send a CANCEL 
            request to forked branches.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Fork">
            <summary>
            This type of directive indicates whether a proxy should fork a request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.NoFork">
            <summary>
            This type of directive indicates whether a proxy should proxy to only a single address.
            The server SHOULD proxy the request to the "best" address (generally the one with the highest q-value).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Recurse">
            <summary>
            This directive indicates whether a proxy server receiving a 3xx response should send 
            requests to the addresses listed in the response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.NoRecurse">
            <summary>
            This directive indicates whether a proxy server receiving a 3xx response should forward 
            the list of addresses upstream towards the caller.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Parallel">
            <summary>
            This directive indicates whether the caller would like the proxy server to proxy 
            the request to all known addresses at once.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Sequential">
            <summary>
            This directive indicates whether the caller would like the proxy server to go through
            all known addresses sequentially, contacting the next address only after it has received 
            a non-2xx or non-6xx final response for the previous one.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.Queue">
            <summary>
            This directive indicates whether if the called party is temporarily unreachable, caller 
            wants to have its call queued.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_Directive.DirectiveType.NoQueue">
            <summary>
            This directive indicates whether if the called party is temporarily unreachable, caller 
            don't want its call to be queued.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.PhoneNumberCollection">
            <summary>
            vCard phone number collection implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.#ctor(LumiSoft.Net.Mime.vCard.vCard)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner vCard.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.Add(LumiSoft.Net.Mime.vCard.PhoneNumberType_enum,System.String)">
            <summary>
            Add new phone number to the collection.
            </summary>
            <param name="type">Phone number type. Note: This value can be flagged value !</param>
            <param name="number">Phone number.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.Remove(LumiSoft.Net.Mime.vCard.PhoneNumber)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.PhoneNumberCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.EmailAddressCollection">
            <summary>
            vCard email address collection implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddressCollection.#ctor(LumiSoft.Net.Mime.vCard.vCard)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner vCard.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddressCollection.Add(LumiSoft.Net.Mime.vCard.EmailAddressType_enum,System.String)">
            <summary>
            Add new email address to the collection.
            </summary>
            <param name="type">Email address type. Note: This value can be flagged value !</param>
            <param name="email">Email address.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddressCollection.Remove(LumiSoft.Net.Mime.vCard.EmailAddress)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddressCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddressCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.EmailAddressCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.EmailAddressCollection.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <param name="index">Index of item which to get.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.DeliveryAddress">
            <summary>
            vCard delivery address implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddress.#ctor(LumiSoft.Net.Mime.vCard.Item,LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="item">Owner vCard item.</param>
            <param name="addressType">Address type. Note: This value can be flagged value !</param>
            <param name="postOfficeAddress">Post office address.</param>
            <param name="extendedAddress">Extended address.</param>
            <param name="street">Street name.</param>
            <param name="locality">Locality(city).</param>
            <param name="region">Region.</param>
            <param name="postalCode">Postal code.</param>
            <param name="country">Country.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddress.Changed">
            <summary>
            This method is called when some property has changed, we need to update underlaying vCard item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddress.Parse(LumiSoft.Net.Mime.vCard.Item)">
            <summary>
            Parses delivery address from vCard ADR structure string.
            </summary>
            <param name="item">vCard ADR item.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddress.AddressTypeToString(LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum)">
            <summary>
            Converts DeliveryAddressType_enum to vCard item parameters string.
            </summary>
            <param name="type">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.Item">
            <summary>
            Gets underlaying vCrad item.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.AddressType">
            <summary>
            Gets or sets address type. Note: This property can be flagged value !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.PostOfficeAddress">
            <summary>
            Gets or sets post office address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.ExtendedAddress">
            <summary>
            Gests or sets extended address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.Street">
            <summary>
            Gets or sets street.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.Locality">
            <summary>
            Gets or sets locality(city).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.Region">
            <summary>
            Gets or sets region.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.PostalCode">
            <summary>
            Gets or sets postal code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddress.Country">
            <summary>
            Gets or sets country.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderFieldParameter">
            <summary>
            Header field parameter.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameter.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="parameterName">Header field parameter name.</param>
            <param name="parameterValue">Header field parameter value.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameter.Name">
            <summary>
            Gets header field parameter name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameter.Value">
            <summary>
            Gets header field parameter name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.LogEntryType">
            <summary>
            Specifies log entry type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Read">
            <summary>
            Read entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Write">
            <summary>
            Write entry.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Log.LogEntryType.Debug">
            <summary>
            Debug entry.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Log.LogEntry">
            <summary>
            Implements log entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log.LogEntry.#ctor(LumiSoft.Net.Log.LogEntryType,System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="type">Log entry type.</param>
            <param name="size">Specified how much data was readed or written.</param>
            <param name="text">Description text.</param>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.EntryType">
            <summary>
            Gets log entry type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Size">
            <summary>
            Gets how much data was readed or written, depends on <b>LogEntryType</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log.LogEntry.Text">
            <summary>
            Gets describing text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_CallID">
            <summary>
            Implements SIP "callid" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                callid = word [ "@" word ]
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CallID.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CallID.Parse(System.String)">
            <summary>
            Parses "callid" from specified value.
            </summary>
            <param name="value">SIP "callid" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CallID.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "callid" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CallID.ToStringValue">
            <summary>
            Converts this to valid "callid" value.
            </summary>
            <returns>Returns "callid" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_CallID.CallID">
            <summary>
            Gets or sets call ID.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Challenge">
            <summary>
            Implements SIP "challenge" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                challenge = ("Digest" LWS digest-cln *(COMMA digest-cln)) / other-challenge
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Challenge.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP challenge value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Challenge.Parse(System.String)">
            <summary>
            Parses "challenge" from specified value.
            </summary>
            <param name="value">SIP "challenge" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Challenge.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "challenge" from specified reader.
            </summary>
            <param name="reader">Reader what contains challenge value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Challenge.ToStringValue">
            <summary>
            Converts this to valid "challenge" value.
            </summary>
            <returns>Returns "challenge" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Challenge.Method">
            <summary>
            Gets or sets authentication method. Normally this value is always 'Digest'.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Challenge.AuthData">
            <summary>
            Gets or sets authentication data. That value depends on authentication type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1">
            <summary>
            Implements same multi value header fields group. Group can contain one type header fields only.
            This is class is used by Via:,Route:, ... .
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.#ctor(LumiSoft.Net.SIP.Message.SIP_Message,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner message that owns this group.</param>
            <param name="fieldName">Header field name what group holds.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.Refresh">
            <summary>
            Refreshes header fields in group from actual header.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.AddToTop(System.String)">
            <summary>
            Add new header field on the top of the whole header.
            </summary>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.Add(System.String)">
            <summary>
            Add new header field on the bottom of the whole header.
            </summary>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.RemoveAll">
            <summary>
            Removes all specified header fiields with their values.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.GetTopMostValue">
            <summary>
            Gets top most header field first value. 
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.RemoveTopMostValue">
            <summary>
            Removes top most header field first value. If value is the last value, 
            the whole header field will be removed.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.GetAllValues">
            <summary>
            Gets all header field values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.FieldName">
            <summary>
            Gets header field name what this group holds.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.Count">
            <summary>
            Gets number of header fields in this group.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_MVGroupHFCollection`1.HeaderFields">
            <summary>
            Gets header fields what are in this group.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_WarningCodes">
            <summary>
            SIP Warning Codes. Defined in RFC 3261 27.2.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x300_Incompatible_network_protocol">
            <summary>
            One or more network protocols contained in the session description are not available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x301_Incompatible_network_address_formats">
            <summary>
            One or more network address formats contained in the session description are not available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x302_Incompatible_network_address_formats">
            <summary>
            One or more transport protocols described in the session description are not available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x303_Incompatible_bandwidth_units">
            <summary>
            One or more bandwidth measurement units contained in the session description were not understood.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x304_Media_type_not_available">
            <summary>
            One or more media types contained in the session description are not available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x305_Incompatible_media_format">
            <summary>
            One or more media formats contained in the session description are not available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x306_Attribute_not_understood">
            <summary>
            One or more of the media attributes in the session description are not supported.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x307_Session_description_parameter_not_understood">
            <summary>
            A parameter other than those listed above was not understood.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x330_Multicast_not_available">
            <summary>
            The site where the user is located does not support multicast.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x331_Unicast_not_available">
            <summary>
            The site where the user is located does not support unicast communication 
            (usually due to the presence of a firewall).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x370_Insufficient_bandwidth">
            <summary>
            The bandwidth specified in the session description or defined by the media 
            exceeds that known to be available.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_WarningCodes.x399_Miscellaneous_warning">
            <summary>
            The warning text can include arbitrary information to be presented to a human user or logged. 
            A system receiving this warning MUST NOT take any automated action.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_HiEntry">
            <summary>
            Implements SIP "hi-entry" value. Defined in RFC 4244.
            </summary>
            <remarks>
            <code>
            RFC 4244 Syntax:
                hi-entry = hi-targeted-to-uri *( SEMI hi-param )
                hi-targeted-to-uri= name-addr
                hi-param = hi-index / hi-extension
                hi-index = "index" EQUAL 1*DIGIT *(DOT 1*DIGIT)
                hi-extension = generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.Parse(System.String)">
            <summary>
            Parses "hi-entry" from specified value.
            </summary>
            <param name="value">SIP "hi-entry" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "hi-entry" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.ToStringValue">
            <summary>
            Converts this to valid "hi-entry" value.
            </summary>
            <returns>Returns "hi-entry" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.Address">
            <summary>
            Gets or sets address.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_HiEntry.Index">
            <summary>
            Gets or sets 'index' parameter value. Value -1 means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition">
            <summary>
            Implements SIP "Content-Disposition" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                Content-Disposition  = disp-type *( SEMI disp-param )
                disp-type            = "render" / "session" / "icon" / "alert" / disp-extension-token
                disp-param           = handling-param / generic-param
                handling-param       = "handling" EQUAL ( "optional" / "required" / other-handling )
                other-handling       = token
                disp-extension-token = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP SIP_t_ContentDisposition value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.Parse(System.String)">
            <summary>
            Parses "Content-Disposition" from specified value.
            </summary>
            <param name="value">SIP "Content-Disposition" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Content-Disposition" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.ToStringValue">
            <summary>
            Converts this to valid "Content-Disposition" value.
            </summary>
            <returns>Returns "Content-Disposition" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.DispositionType">
            <summary>
            Gets or sets disposition type. Known values: "render","session","icon","alert".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContentDisposition.Handling">
            <summary>
            Gets or sets 'handling' parameter value. Value null means not specified. 
            Known value: "optional","required".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_ParameterCollection">
            <summary>
            This class represents SIP value parameters collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Add(System.String,System.String)">
            <summary>
            Adds new parameter to the collection.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>name</b> is null.</exception>
            <exception cref="T:System.ArgumentException">Is raised when 'name' is '' or parameter with specified name 
            already exists in the collection.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Set(System.String,System.String)">
            <summary>
            Adds or updates specified parameter value.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Clear">
            <summary>
            Removes all parameters from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Remove(System.String)">
            <summary>
            Removes specified parameter from the collection.
            </summary>
            <param name="name">Parameter name.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Contains(System.String)">
            <summary>
            Checks if the collection contains parameter with the specified name.
            </summary>
            <param name="name">Parameter name.</param>
            <returns>Returns true if collection contains specified parameter.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Count">
            <summary>
            Gets parameters count in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_ParameterCollection.Item(System.String)">
            <summary>
            Gets specified parameter from collection. Returns null if parameter with specified name doesn't exist.
            </summary>
            <param name="name">Parameter name.</param>
            <returns>Returns parameter with specified name or null if not found.</returns>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs">
            <summary>
            Provides data for the GetMailEvent,DeleteMessage,GetTopLines event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.#ctor(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message,System.Net.Sockets.Socket)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="message">Message which to get.</param>
            <param name="socket">Connected socket.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.#ctor(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message,System.Net.Sockets.Socket,System.Int32)">
            <summary>
            TopLines constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="message">Message which to get.</param>
            <param name="socket">Connected socket.</param>
            <param name="nLines">Number of lines to get.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.Session">
            <summary>
            Gets reference to pop3 session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.Message">
            <summary>
            Gets reference to message, which to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.MessageID">
            <summary>
            ID of message which to retrieve.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.MessageUID">
            <summary>
            UID of message which to retrieve.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.MessageData">
            <summary>
            Mail message which is delivered to user. NOTE: may be full message or top lines of message.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.Lines">
            <summary>
            Number of lines to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message_EventArgs.UserName">
            <summary>
            User Name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_Message">
            <summary>
            Holds POP3_Message info (ID,Size,...).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Message.#ctor(LumiSoft.Net.POP3.Server.POP3_MessageCollection,System.String,System.String,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="onwer">Owner collection.</param>
            <param name="id">Message ID.</param>
            <param name="uid">Message UID.</param>
            <param name="size">Message size in bytes.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message.ID">
            <summary>
            Gets or sets message ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message.UID">
            <summary>
            Gets or sets message UID. This UID is reported in UIDL command.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message.Size">
            <summary>
            Gets or sets message size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message.MarkedForDelete">
            <summary>
            Gets or sets message state flag.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_Message.Tag">
            <summary>
            Gets or sets user data for message.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection">
            <summary>
            vCard delivery address collection implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.#ctor(LumiSoft.Net.Mime.vCard.vCard)">
            <summary>
            Default constructor.
            </summary>
            <param name="owner">Owner vCard.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.Add(LumiSoft.Net.Mime.vCard.DeliveryAddressType_enum,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add new delivery address to the collection.
            </summary>
            <param name="type">Delivery address type. Note: This value can be flagged value !</param>
            <param name="postOfficeAddress">Post office address.</param>
            <param name="extendedAddress">Extended address.</param>
            <param name="street">Street name.</param>
            <param name="locality">Locality(city).</param>
            <param name="region">Region.</param>
            <param name="postalCode">Postal code.</param>
            <param name="country">Country.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.Remove(LumiSoft.Net.Mime.vCard.DeliveryAddress)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.Count">
            <summary>
            Gets number of items in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.DeliveryAddressCollection.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <param name="index">Index of item which to get.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.Mime.ParametizedHeaderField">
            <summary>
            Parametized header field. 
            <p/>
            Syntax: value;parameterName=parameterValue;parameterName=parameterValue;... .
            Example: (Content-Type:) text/html; charset="ascii".
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.ParametizedHeaderField.#ctor(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Default constructor.
            </summary>
            <param name="headerField">Source header field.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.ParametizedHeaderField.ParseParameters">
            <summary>
            Parses parameters from header field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.ParametizedHeaderField.StoreParameters(System.String,System.Collections.Hashtable)">
            <summary>
            Stores parameters to header field Value property.
            </summary>
            <param name="value"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:LumiSoft.Net.Mime.ParametizedHeaderField.Name">
            <summary>
            Gets header field name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.ParametizedHeaderField.Value">
            <summary>
            Gets or sets header field value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.ParametizedHeaderField.Parameters">
            <summary>
            Gets header field parameters.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.AddressList">
            <summary>
            Rfc 2822 3.4 address-list. Rfc defines two types of addresses mailbox and group.
            <p/>
            <p style="margin-top: 0; margin-bottom: 0"/><b>address-list</b> syntax: address *("," address).
            <p style="margin-top: 0; margin-bottom: 0"/><b>address</b> syntax: mailbox / group.
            <p style="margin-top: 0; margin-bottom: 0"/><b>mailbox</b> syntax: ['"'dispaly-name'"' ]&lt;localpart@domain&gt;.
            <p style="margin-top: 0; margin-bottom: 0"/><b>group</b> syntax: '"'dispaly-name'":' [mailbox *(',' mailbox)]';'.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Add(LumiSoft.Net.Mime.Address)">
            <summary>
            Adds a new address to the end of the collection.
            </summary>
            <param name="address">Address to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Insert(System.Int32,LumiSoft.Net.Mime.Address)">
            <summary>
            Inserts a new address into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the address.</param>
            <param name="address">Address to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Remove(System.Int32)">
            <summary>
            Removes address at the specified index from the collection.
            </summary>
            <param name="index">Index of the address which to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Remove(LumiSoft.Net.Mime.Address)">
            <summary>
            Removes specified address from the collection.
            </summary>
            <param name="address">Address to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Clear">
            <summary>
            Clears the collection of all addresses.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.Parse(System.String)">
            <summary>
            Parses address-list from string.
            </summary>
            <param name="addressList">Address list string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.ToAddressListString">
            <summary>
            Convert addresses to Rfc 2822 address-list string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.OnCollectionChanged">
            <summary>
            This called when collection has changed. Item is added,deleted,changed or collection cleared.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.AddressList.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.Mailboxes">
            <summary>
            Gets all mailbox addresses. Note: group address mailbox addresses are also included.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.Item(System.Int32)">
            <summary>
            Gets address from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.Count">
            <summary>
            Gets address count in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.AddressList.BoundedHeaderField">
            <summary>
            Bound address-list to specified header field.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs">
            <summary>
            Provides data for GetFolderACL event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="folderName">Folder name which ACL to get.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs.Folder">
            <summary>
            Gets folder name which ACL to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs.ACL">
            <summary>
            Gets ACL collection. Key = userName, Value = IMAP_ACL_Flags.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GETACL_eArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.AuthUserEventHandler">
            <summary>
            Represents the method that will handle the AuthUser event for FTP_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A AuthUser_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FileSysEntryEventHandler">
            <summary>
            Represents the method that will handle the filsystem rerlated events for FTP_Server.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_Server">
            <summary>
            FTP Server component.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.#ctor">
            <summary>
            Defalut constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.InitNewSession(System.Net.Sockets.Socket,LumiSoft.Net.BindInfo)">
            <summary>
            Initialize and start new session here. Session isn't added to session list automatically, 
            session must add itself to server session list by calling AddSession().
            </summary>
            <param name="socket">Connected client socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.OnValidate_IpAddress(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Raises event ValidateIP event.
            </summary>
            <param name="localEndPoint">Server IP.</param>
            <param name="remoteEndPoint">Connected client IP.</param>
            <returns>Returns true if connection allowed.</returns>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Server.OnAuthUser(LumiSoft.Net.FTP.Server.FTP_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Authenticates user.
            </summary>
            <param name="session">Reference to current pop3 session.</param>
            <param name="userName">User name.</param>
            <param name="passwData"></param>
            <param name="data"></param>
            <param name="authType"></param>
            <returns></returns>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.ValidateIPAddress">
            <summary>
            Occurs when new computer connected to FTP server.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.AuthUser">
            <summary>
            Occurs when connected user tryes to authenticate.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.GetDirInfo">
            <summary>
            Occurs when server needs directory info (directories,files in deirectory).
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.DirExists">
            <summary>
            Occurs when server needs to validatee directory.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.CreateDir">
            <summary>
            Occurs when server needs needs to create directory.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.DeleteDir">
            <summary>
            Occurs when server needs needs to delete directory.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.FileExists">
            <summary>
            Occurs when server needs needs validate file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.StoreFile">
            <summary>
            Occurs when server needs needs to store file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.GetFile">
            <summary>
            Occurs when server needs needs to get file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.DeleteFile">
            <summary>
            Occurs when server needs needs to delete file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.RenameDirFile">
            <summary>
            Occurs when server needs needs to rname directory or file.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.FTP.Server.FTP_Server.SessionLog">
            <summary>
            Occurs when POP3 session has finished and session log is available.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Server.Sessions">
            <summary>
            Gets active sessions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Client.TransferMode">
            <summary>
            Transfer mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.FTP.Client.TransferMode.Ascii">
            <summary>
            ASCII transfer mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.FTP.Client.TransferMode.Binary">
            <summary>
            Binary transfer mode. 
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Client.FTP_Client">
            <summary>
            Ftp client.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.#ctor">
            <summary>
            Default connection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Dispose">
            <summary>
            Clears resources and closes connection if open.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Connect(System.String,System.Int32)">
            <summary>
            Connects to specified host.
            </summary>
            <param name="host">Host name.</param>
            <param name="port">Port.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Disconnect">
            <summary>
            Disconnects from active host.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.Authenticate(System.String,System.String)">
            <summary>
            Authenticates user.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.SetCurrentDir(System.String)">
            <summary>
            Sets current directory.
            </summary>
            <param name="dir">Directory.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.GetList">
            <summary>
            Gets directory listing.
            </summary>
            <returns>Returns DataSet(DirInfo DataTable) with directory listing info.</returns>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.CreateDir(System.String)">
            <summary>
            Creates directory.
            </summary>
            <param name="dir">Directory name.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.RenameDir(System.String,System.String)">
            <summary>
            Renames directory.
            </summary>
            <param name="oldDir">Name of directory which to rename.</param>
            <param name="newDir">New directory name.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DeleteDir(System.String)">
            <summary>
            Deletes directory.
            </summary>
            <param name="dir">Name of directory which to delete.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.ReceiveFile(System.String,System.String)">
            <summary>
            Recieves specified file from server.
            </summary>
            <param name="fileName">File name of file which to receive.</param>
            <param name="putFileName">File path+name which to store.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.ReceiveFile(System.String,System.IO.Stream)">
            <summary>
            Recieves specified file from server.
            </summary>
            <param name="fileName">File name of file which to receive.</param>
            <param name="storeStream">Stream where to store file.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.StoreFile(System.String)">
            <summary>
            Stores specified file to server.
            </summary>
            <param name="getFileName">File path+name which to store in server.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.StoreFile(System.IO.Stream,System.String)">
            <summary>
            Stores specified file to server.
            </summary>
            <param name="getStream">Stream from where to gets file.</param>
            <param name="fileName">File name to store in server.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.DeleteFile(System.String)">
            <summary>
            Deletes specified file or directory.
            </summary>
            <param name="file">File name.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.RenameFile(System.String,System.String)">
            <summary>
            Renames specified file or directory.
            </summary>
            <param name="oldFileName">File name of file what to rename.</param>
            <param name="newFileName">New file name.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.SetTransferMode(LumiSoft.Net.FTP.Client.TransferMode)">
            <summary>
            Sets transfer mode.
            </summary>
            <param name="mode">Transfer mode.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Client.FTP_Client.ParseDirListing(System.String)">
            <summary>
            Parses server returned directory listing.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.Connected">
            <summary>
            Gets if ftp client is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.Authenticated">
            <summary>
            Gets if ftp client is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.FTP.Client.FTP_Client.PassiveMode">
            <summary>
            Gets data connection mode.
            Passive - client connects to ftp server.
            Active  - ftp server connects to client.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.DbFile">
            <summary>
            LumiSoft database file.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Open(System.String)">
            <summary>
            Opens specified data file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Open(System.String,System.Int32)">
            <summary>
            Opens specified data file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="waitTime">If data base file is exclusively locked, then how many seconds to wait file to unlock before raising a error.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Close">
            <summary>
            Closes database file.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Create(System.String)">
            <summary>
            Creates new database file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.Create(System.String,System.Int32)">
            <summary>
            Creates new database file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="dataPageDataAreaSize">Specifies how many data can data page store.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.LockTable(System.Int32)">
            <summary>
            Locks table.
            </summary>
            <param name="waitTime">If table is locked, then how many sconds to wait table to unlock, before teturning error.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.UnlockTable">
            <summary>
            Unlock table.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.NextRecord">
            <summary>
            Gets next record. Returns true if end of file reached and there are no more records.
            </summary>
            <returns>Returns true if end of file reached and there are no more records.</returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.AppendRecord(System.Object[])">
            <summary>
            Appends new record to table.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.DeleteCurrentRecord">
            <summary>
            Deletes current record.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.StoreDataToDataPages(System.Int32,System.Byte[],LumiSoft.Data.lsDB.DataPage[])">
            <summary>
            Stores data to specified data pages.
            </summary>
            <param name="dataPageDataAreaSize">Data page data area size.</param>
            <param name="data">Data to store.</param>
            <param name="dataPages">Data pages where to store data.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.GetDataPages(System.Int64,System.Int32)">
            <summary>
            Gets specified number of free data pages. If free data pages won't exist, creates new ones.
            Data pages are marked as used and OwnerDataPagePointer and NextDataPagePointer is set as needed.
            </summary>
            <param name="ownerDataPagePointer">Owner data page pointer that own first requested data page. If no owner then this value is 0.</param>
            <param name="count">Number of data pages wanted.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.AddColumn(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Adds column to db file.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.RemoveColumn(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Removes specified column from database file.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.ReadFromFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from file.
            </summary>
            <param name="data">Buffer where to store readed data..</param>
            <param name="offset">Offset in array to where to start storing readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.WriteToFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to file.
            </summary>
            <param name="data">Data to write.</param>
            <param name="offset">Offset in array from where to start writing data.</param>
            <param name="count">Number of bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.GetFilePosition">
            <summary>
            Gets current position in file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.SetFilePosition(System.Int64)">
            <summary>
            Sets file position.
            </summary>
            <param name="position">Position in file.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DbFile.GoToFileEnd">
            <summary>
            Moves position to the end of file.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.IsDatabaseOpen">
            <summary>
            Gets if there is active database file.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.FileName">
            <summary>
            Gets open database file name. Throws exception if database isn't open.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.Columns">
            <summary>
            Gets table columns. Throws exception if database isn't open.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.CurrentRecord">
            <summary>
            Gets current record. Returns null if there isn't current record.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.TableLocked">
            <summary>
            Gets table is locked.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DbFile.DataPageDataAreaSize">
            <summary>
            Gets how much data data page can store.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Timestamp">
            <summary>
            Implements SIP "Timestamp" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                Timestamp = 1*(DIGIT) [ "." *(DIGIT) ] [ LWS delay ]
                    delay = *(DIGIT) [ "." *(DIGIT) ]
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Timestamp: header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Default constructor.
            </summary>
            <param name="time">Time in seconds when request was sent.</param>
            <param name="delay">Delay time in seconds.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.Parse(System.String)">
            <summary>
            Parses "Timestamp" from specified value.
            </summary>
            <param name="value">SIP "Timestamp" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Timestamp" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.ToStringValue">
            <summary>
            Converts this to valid "Timestamp" value.
            </summary>
            <returns>Returns "accept-range" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.Time">
            <summary>
            Gets or sets time in seconds when request was sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Timestamp.Delay">
            <summary>
            Gets or sets delay time in seconds. Delay specifies the time between the UAS received 
            the request and generated response.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding">
            <summary>
            Implements SIP "content-coding" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                content-coding = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding.Parse(System.String)">
            <summary>
            Parses "content-coding" from specified value.
            </summary>
            <param name="value">SIP "content-coding" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "content-coding" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding.ToStringValue">
            <summary>
            Converts this to valid "content-coding" value.
            </summary>
            <returns>Returns "content-coding" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContentCoding.Encoding">
            <summary>
            Gets or sets content encoding.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ErrorEventHandler">
            <summary>
            To be supplied.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.LogEventHandler">
            <summary>
            To be supplied.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ValidateIPHandler">
            <summary>
            Represents the method that will handle the <see href="LumiSoftMailServerSMTPSMTP_ServerValidateIPAddressFieldOrEvent.html">SMTP_Server.ValidateIPAddress</see> and <see href="LumiSoftMailServerPOP3POP3_ServerValidateIPAddressFieldOrEvent.html">POP3_Server.ValidateIPAddress</see>event.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A <see href="LumiSoftMailServerValidateIP_EventArgs.html">ValidateIP_EventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode">
            <summary>
            This class implements STUN ERROR-CODE. Defined in RFC 3489 11.2.9.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="code">Error code.</param>
            <param name="reasonText">Reason text.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode.Code">
            <summary>
            Gets or sets error code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ErrorCode.ReasonText">
            <summary>
            Gets reason text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest">
            <summary>
            This class implements STUN CHANGE-REQUEST attribute. Defined in RFC 3489 11.2.4.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="changeIP">Specifies if STUN server must send response to different IP than request was received.</param>
            <param name="changePort">Specifies if STUN server must send response to different port than request was received.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.ChangeIP">
            <summary>
            Gets or sets if STUN server must send response to different IP than request was received.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_t_ChangeRequest.ChangePort">
            <summary>
            Gets or sets if STUN server must send response to different port than request was received.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Client.STUN_Result">
            <summary>
            This class holds STUN_Client.Query method return data.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Result.#ctor(LumiSoft.Net.STUN.Client.STUN_NetType,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="netType">Specifies UDP network type.</param>
            <param name="publicEndPoint">Public IP end point.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Client.STUN_Result.NetType">
            <summary>
            Gets UDP network type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Client.STUN_Result.PublicEndPoint">
            <summary>
            Gets public IP end point. This value is null if failed to get network type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventArgs">
            <summary>
            This class provides data for SIP_Stack.ValidateRequest event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventArgs.#ctor(LumiSoft.Net.SIP.Stack.SIP_Request,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="request">Incoming SIP request.</param>
            <param name="remoteEndpoint">IP end point what made request.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventArgs.Request">
            <summary>
            Gets incoming SIP request.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventArgs.RemoteEndPoint">
            <summary>
            Gets IP end point what made request.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_ValidateRequestEventArgs.ResponseCode">
            <summary>
            Gets or sets response code. Value null means SIP stack will handle it.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext">
            <summary>
            Implements SIP 'proxy context'. Defined in RFC 3261.
            </summary>
            <remarks>Proxy context is bridge between caller and calee. 
            Proxy context job is to forward request to contact(s) and send received responses back to caller.</remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Request,LumiSoft.Net.SIP.Proxy.SIP_ForkingMode,System.Boolean,System.Boolean,LumiSoft.Net.SIP.Stack.SIP_Destination[])">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Owner stack.</param>
            <param name="request">Request to forward.</param>
            <param name="forkingMode">Specifies how proxy context must handle forking.</param>
            <param name="noCancel">Specifies if proxy should not send Cancel to forked requests.</param>
            <param name="noRecurse">Specifies what proxy server does when it gets 3xx response. If true proxy will forward
            request to new specified address if false, proxy will return 3xx response to caller.</param>
            <param name="destinations">Possible destinations. NOTE: These values must be in priority order !</param>
            <exception cref="T:System.ArgumentNullException">Is raised when any of the reference type prameters is null.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Dispose">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.m_pServerTransaction_Canceled(System.Object,System.EventArgs)">
            <summary>
            Is called when server transaction has canceled.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.m_pServerTransaction_Terminated(System.Object,System.EventArgs)">
            <summary>
            Is called when server transaction has completed and terminated.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ClientTransaction_ResponseReceived(LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            Is called when client transactions receives response.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ClientTransaction_TimedOut(System.Object,System.EventArgs)">
            <summary>
            Is called when client transaction has timed out.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ClientTransaction_TransportError(System.Object,System.EventArgs)">
            <summary>
            Is called when client transaction encountered transport error.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ClientTransaction_Terminated(System.Object,System.EventArgs)">
            <summary>
            Is called when client transaction has terminated.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Start">
            <summary>
            Starts processing.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is raised when this method is called more than once.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Cancel">
            <summary>
            Cancels proxy context processing. All client transactions and owner server transaction will be canceled,
            proxy context will be disposed. 
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.CreateClientTransaction(LumiSoft.Net.SIP.Stack.SIP_Destination)">
            <summary>
            Creates client transaction and starts processing it.
            </summary>
            <param name="destination">SIP destination.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ProcessResponse(LumiSoft.Net.SIP.Stack.SIP_Response)">
            <summary>
            Processes client transaction received response.
            </summary>
            <param name="response">Response received.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.GetBestFinalResponse">
            <summary>
            Gets best final response. If no final response in responses collection, null is returned.
            </summary>
            <returns>Resturns best final response or  null if no final response.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.CreateTime">
            <summary>
            Gets time when proxy context was created.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ForkingMode">
            <summary>
            Gets forking mode used by this 'proxy context'.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.NoCancel">
            <summary>
            Gets if proxy cancels forked requests what are not needed any more. If true, 
            requests not canceled, otherwise canceled.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Recurse">
            <summary>
            Gets what proxy server does when it gets 3xx response. If true proxy will forward
            request to new specified address if false, proxy will return 3xx response to caller.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ServerTransaction">
            <summary>
            Gets server transaction what is responsible for sending responses to caller.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.ClientTransactions">
            <summary>
            Gets active client transactions that will handle forward request. 
            There may be more than 1 active client transaction if parallel forking.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.Responses">
            <summary>
            Gets all responses what proxy context has received.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Is raised when this class is Disposed and this property is accessed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyContext.SequentialTimeout">
            <summary>
            Gets number of seconds that proxy waits before trying the next contact. 
            NOTE: That value applies to sequential forking only.  
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_RAck">
            <summary>
            Implements SIP "RAck" value. Defined in RFC 3262.
            </summary>
            <remarks>
            <code>
            RFC 3262 Syntax:
                RAck         = response-num LWS CSeq-num LWS Method
                response-num = 1*DIGIT
                CSeq-num     = 1*DIGIT
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RAck.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">RAck value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RAck.Parse(System.String)">
            <summary>
            Parses "RAck" from specified value.
            </summary>
            <param name="value">SIP "RAck" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RAck.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "RAck" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_RAck.ToStringValue">
            <summary>
            Converts this to valid "RAck" value.
            </summary>
            <returns>Returns "RAck" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RAck.ResponseNumber">
            <summary>
            Gets or sets response number.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RAck.CSeqNumber">
            <summary>
            Gets or sets CSeq number.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_RAck.Method">
            <summary>
            Gets or sets method.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Join">
            <summary>
            Implements SIP "Join" value. Defined in RFC 3911.
            </summary>
            <remarks>
            <code>
            RFC 3911 Syntax:
                Join       = callid *(SEMI join-param)
                join-param = to-tag / from-tag / generic-param
                to-tag     = "to-tag" EQUAL token
                from-tag   = "from-tag" EQUAL token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Join.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Join value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Join.Parse(System.String)">
            <summary>
            Parses "Join" from specified value.
            </summary>
            <param name="value">SIP "Join" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Join.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Join" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Join.ToStringValue">
            <summary>
            Converts this to valid "Join" value.
            </summary>
            <returns>Returns "Join" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Join.CallID">
            <summary>
            Gets or sets call ID value.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised ´when null value passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Join.ToTag">
            <summary>
            Gets or sets to-tag parameter value. This value is mandatory.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid ToTag value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Join.FromTag">
            <summary>
            Gets or sets from-tag parameter value. This value is mandatory.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when invalid FromTag value is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_MessageInfo">
            <summary>
            Holds POP3 message info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_MessageInfo.#ctor(System.String,System.Int32,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="messageID">Message unique ID.</param>
            <param name="messageNo">Message number.</param>
            <param name="messageSize">Message size in bytes.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_MessageInfo.MessageUID">
            <summary>
            Gets message unique ID returned by pop3 server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_MessageInfo.MessageNumber">
            <summary>
            Gets message index number in POP3 server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_MessageInfo.MessageSize">
            <summary>
            Gets message size in bytes.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Client.POP3_Client">
            <summary>
            POP3 Client.
            </summary>
            <example>
            <code>
            
            /*
             To make this code to work, you need to import following namespaces:
             using LumiSoft.Net.Mime;
             using LumiSoft.Net.POP3.Client; 
             */
            
            using(POP3_Client c = new POP3_Client()){
            	c.Connect("ivx",110);
            	c.Authenticate("test","test",true);
            	
            	POP3_MessagesInfo mInf = c.GetMessagesInfo();
            	
            	// Get first message if there is any
            	if(mInf.Count > 0){
            		byte[] messageData = c.GetMessage(mInf[0]);
            	
            		// Do your suff
            		
            		// Parse message
            		Mime m = Mime.Parse(messageData);
            		string from = m.MainEntity.From;
            		string subject = m.MainEntity.Subject;			
            		// ... 
            	}		
            }
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Connect(System.String,System.Int32)">
            <summary>
            Connects to specified host.
            </summary>
            <param name="host">Host name.</param>
            <param name="port">Port number. Default POP3 port is 110.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to specified host.
            </summary>
            <param name="host">Host name.</param>
            <param name="port">Port number. Default POP3 port is 110 and SSL port is 995.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Disconnect">
            <summary>
            Closes connection to POP3 server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.StartTLS">
            <summary>
            Switches POP3 connection to SSL.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Authenticate(System.String,System.String,System.Boolean)">
            <summary>
            Authenticates user.
            </summary>
            <param name="userName">User login name.</param>
            <param name="password">Password.</param>
            <param name="tryApop"> If true and POP3 server supports APOP, then APOP is used, otherwise normal login used.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.GetMessagesInfo">
            <summary>
            Gets messages info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.GetUidlList">
            <summary>
            Gets uid listing.
            </summary>
            <returns>Returns Hashtable containing uidl listing. Key column contains message NR and value contains message UID.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.GetMessage(LumiSoft.Net.POP3.Client.POP3_MessageInfo)">
            <summary>
            Gets specified message.
            </summary>
            <param name="msgInfo">Pop3 message info of message what to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.GetMessage(System.Int32)">
            <summary>
            Gets specified message.
            </summary>
            <param name="messageNo">Message number.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.GetMessage(System.Int32,System.IO.Stream)">
            <summary>
            Gets specified message and stores it to specified stream.
            </summary>
            <param name="messageNo">Message number.</param>
            <param name="stream">Stream where to store message.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.DeleteMessage(System.Int32)">
            <summary>
            Deletes specified message
            </summary>
            <param name="messageNr">Message number.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.GetTopOfMessage(System.Int32,System.Int32)">
            <summary>
            Gets top lines of message.
            </summary>
            <param name="nr">Message number which top lines to get.</param>
            <param name="nLines">Number of lines to get.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Client.POP3_Client.Reset">
            <summary>
            Resets session.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.POP3.Client.POP3_Client.SessionLog">
            <summary>
            Occurs when POP3 session has finished and session log is available.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.Connected">
            <summary>
            Gets if pop3 client is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.Authenticated">
            <summary>
            Gets if pop3 client is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.LogCommands">
            <summary>
            Gets or sets if to log commands.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Client.POP3_Client.IsSecureConnection">
            <summary>
            Gets if the connection is an SSL connection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.EmailAddressType_enum">
            <summary>
            vCal email address type. Note this values may be flagged !
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.EmailAddressType_enum.NotSpecified">
            <summary>
            Email address type not specified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.EmailAddressType_enum.Preferred">
            <summary>
            Preferred email address.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.EmailAddressType_enum.Internet">
            <summary>
            Internet addressing type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.vCard.EmailAddressType_enum.X400">
            <summary>
            X.400 addressing type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MediaType_enum">
            <summary>
            Rfc 2046,2387 Media Types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text">
            <summary>
            Text data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_plain">
            <summary>
            Simple text data. Defined in Rfc 1521.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_html">
            <summary>
            Html data. Defined in Rfc 2854.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_xml">
            <summary>
            Xml data. Defined in Rfc 3023 3.1.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Text_rtf">
            <summary>
            Rich text (RTF) data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image">
            <summary>
            Image data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image_gif">
            <summary>
            Gif image. Defined in Rfc 1521.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image_tiff">
            <summary>
            Tiff image.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Image_jpeg">
            <summary>
            Jpeg image. Defined in Rfc 1521.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Audio">
            <summary>
            Audio data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Video">
            <summary>
            Video data.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Application">
            <summary>
            Some other kind of data, typically either uninterpreted binary data or information to be processed by an application.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Application_octet_stream">
            <summary>
            The "octet-stream" subtype is used to indicate that a body contains	arbitrary binary data. Defined in Rfc 4046 4.5.1.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_mixed">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_alternative">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_parallel">
            <summary>
            Data consisting of multiple entities of	independent data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_related">
            <summary>
            Data consisting of multiple entities of	independent data types. (Rfc 2387)
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Multipart_signed">
            <summary>
            Multipart signed. Defined in Rfc 1847.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Message">
            <summary>
            Message -- an encapsulated message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Message_rfc822">
            <summary>
            Rfc 822 encapsulated message.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.NotSpecified">
            <summary>
            Media type isn't specified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.MediaType_enum.Unknown">
            <summary>
            Media type is unknown.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MailboxAddressCollection">
            <summary>
            Rfc 2822 3.4 mailbox-list. Syntax: mailbox *(',' mailbox).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Add(LumiSoft.Net.Mime.MailboxAddress)">
            <summary>
            Adds a new mailbox to the end of the collection.
            </summary>
            <param name="mailbox">Mailbox to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Insert(System.Int32,LumiSoft.Net.Mime.MailboxAddress)">
            <summary>
            Inserts a new mailbox into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the mailbox.</param>
            <param name="mailbox">Mailbox to add.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Remove(System.Int32)">
            <summary>
            Removes header field at the specified index from the collection.
            </summary>
            <param name="index">Index of the mailbox which to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Remove(LumiSoft.Net.Mime.MailboxAddress)">
            <summary>
            Removes specified mailbox from the collection.
            </summary>
            <param name="mailbox">Mailbox to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Clear">
            <summary>
            Clears the collection of all mailboxes.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.Parse(System.String)">
            <summary>
            Parses mailboxes from Rfc 2822 3.4 mailbox-list string. Syntax: mailbox *(',' mailbox).
            </summary>
            <param name="mailboxList">Mailbox list string.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.ToMailboxListString">
            <summary>
            Convert addresses to Rfc 2822 mailbox-list string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.OnCollectionChanged">
            <summary>
            This called when collection has changed. Item is added,deleted,changed or collection cleared.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddressCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddressCollection.Item(System.Int32)">
            <summary>
            Gets mailbox from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddressCollection.Count">
            <summary>
            Gets mailboxes count in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddressCollection.Owner">
            <summary>
            Gets or sets owner of this collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.SharedRootFolders_EventArgs">
            <summary>
            Summary description for SharedRootFolders_EventArgs.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SharedRootFolders_EventArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.SharedRootFolders_EventArgs.Session">
            <summary>
            Gets reference to smtp session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.SharedRootFolders_EventArgs.SharedRootFolders">
            <summary>
            Gets or sets users shared root folders. Ususaly there is only one root folder 'Shared Folders'.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.SharedRootFolders_EventArgs.PublicRootFolders">
            <summary>
            Gets or sets public root folders. Ususaly there is only one root folder 'Public Folders'.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_FetchItem">
            <summary>
            IMAP fetch item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],LumiSoft.Net.IMAP.IMAP_MessageFlags,System.String,System.String,System.String,LumiSoft.Net.IMAP.Client.IMAP_FetchItem_Flags)">
            <summary>
            Default constructor.
            </summary>
            <param name="no">Number of message in folder.</param>
            <param name="uid">Message UID.</param>
            <param name="size">Message size.</param>
            <param name="data">Message data.</param>
            <param name="flags">Message flags.</param>
            <param name="internalDate">Message INTERNALDATE.</param>
            <param name="envelope">Envelope string.</param>
            <param name="bodyStructure">BODYSTRUCTURE string.</param>
            <param name="fetchFlags">Specifies what data fetched from IMAP server.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.FetchFlags">
            <summary>
            Specifies what data this IMAP_FetchItem contains. This is flagged value and can contain multiple values.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.MessageNumber">
            <summary>
            Gets number of message in folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.UID">
            <summary>
            Gets message UID. This property is available only if IMAP_FetchItem_Flags.UID was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.Size">
            <summary>
            Gets message size. This property is available only if IMAP_FetchItem_Flags.Size was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.InternalDate">
            <summary>
            Gets message IMAP server INTERNAL date. This property is available only if IMAP_FetchItem_Flags.InternalDate was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.MessageFlags">
            <summary>
            Gets message flags. This property is available only if IMAP_FetchItem_Flags.MessageFlags was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.Envelope">
            <summary>
            Gets message IMAP ENVELOPE. This property is available only if IMAP_FetchItem_Flags.Envelope was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.BodyStructure">
            <summary>
            Gets message IMAP BODYSTRUCTURE. This property is available only if IMAP_FetchItem_Flags.BodyStructure was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.HeaderData">
            <summary>
            Gets message header data. This property is available only if IMAP_FetchItem_Flags.Header was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.MessageData">
            <summary>
            Gets message data. This property is available only if IMAP_FetchItem_Flags.Message was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.IsNewMessage">
            <summary>
            Gets if message is unseen. This property is available only if IMAP_FetchItem_Flags.MessageFlags was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.IsAnswered">
            <summary>
            Gets if message is answered. This property is available only if IMAP_FetchItem_Flags.MessageFlags was specified,
            otherwise throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.Data">
            <summary>
            Gets message data(headers or full message), it depends on HeadersOnly property.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_FetchItem.HeadersOnly">
            <summary>
            Gets if headers or full message requested in fetch.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Message">
            <summary>
            IMAP message info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Message.#ctor(LumiSoft.Net.IMAP.Server.IMAP_MessageCollection,System.String,System.Int64,System.DateTime,System.Int64,LumiSoft.Net.IMAP.IMAP_MessageFlags)">
            <summary>
            Default constructor.
            </summary>
            <param name="onwer">Owner collection.</param>
            <param name="id">Message ID.</param>
            <param name="uid">Message IMAP UID value.</param>
            <param name="internalDate">Message store date.</param>
            <param name="size">Message size in bytes.</param>
            <param name="flags">Message flags.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Message.SetFlags(LumiSoft.Net.IMAP.IMAP_MessageFlags)">
            <summary>
            Sets message flags.
            </summary>
            <param name="flags">Message flags.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.SequenceNo">
            <summary>
            Gets message 1 based sequence number in the collection. This property is slow, use with care, never use in big for loops !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.ID">
            <summary>
            Gets message ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.UID">
            <summary>
            Gets message IMAP UID value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.InternalDate">
            <summary>
            Gets message store date.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.Size">
            <summary>
            Gets message size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.Flags">
            <summary>
            Gets message flags.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Message.FlagsString">
            <summary>
            Gets message flags string. For example: "\DELETES \SEEN".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketServerSession">
            <summary>
            This is base class for SocketServer sessions.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.#ctor(System.String,LumiSoft.Net.SocketEx,LumiSoft.Net.BindInfo,LumiSoft.Net.SocketServer)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="socket">Server connected socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
            <param name="server">Reference to server.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.Kill">
            <summary>
            Kills session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.OnSessionTimeout">
            <summary>
            Times session out.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketServerSession.SetUserName(System.String)">
            <summary>
            Sets property UserName value.
            </summary>
            <param name="userName">User name.</param>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionID">
            <summary>
            Gets session ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionStartTime">
            <summary>
            Gets session start time.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.Authenticated">
            <summary>
            Gets if session is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.UserName">
            <summary>
            Gets authenticated user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.ExpectedTimeout">
            <summary>
            Gets how many seconds has left before timout is triggered.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionLastDataTime">
            <summary>
            Gets last data activity time.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.LocalEndPoint">
            <summary>
            Gets EndPoint which accepted conection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.RemoteEndPoint">
            <summary>
            Gets connected Host(client) EndPoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.Tag">
            <summary>
            Gets or sets custom user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.SessionActiveLog">
            <summary>
            Gets log entries that are currently in log buffer.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.ReadedCount">
            <summary>
            Gets how many bytes are readed through this session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.WrittenCount">
            <summary>
            Gets how many bytes are written through this session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.IsSecureConnection">
            <summary>
            Gets if the connection is an SSL connection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.Socket">
            <summary>
            Gets access to SocketEx.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketServerSession.BindInfo">
            <summary>
            Gets access to BindInfo what accepted socket.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ContactParam">
            <summary>
            Implements SIP "contact-param" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                contact-param     = (name-addr / addr-spec) *(SEMI contact-params)
                contact-params    = c-p-q / c-p-expires / contact-extension
                c-p-q             = "q" EQUAL qvalue
                c-p-expires       = "expires" EQUAL delta-seconds
                contact-extension = generic-param
                delta-seconds     = 1*DIGIT
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.Parse(System.String)">
            <summary>
            Parses "contact-param" from specified value.
            </summary>
            <param name="value">SIP "contact-param" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "contact-param" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.ToStringValue">
            <summary>
            Converts this to valid "contact-param" value.
            </summary>
            <returns>Returns "contact-param" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.IsStarContact">
            <summary>
            Gets is this SIP contact is special STAR contact.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.Address">
            <summary>
            Gets contact address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.QValue">
            <summary>
            Gets or sets qvalue parameter. Targets are processed from highest qvalue to lowest. 
            This value must be between 0.0 and 1.0. Value -1 means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ContactParam.Expires">
            <summary>
            Gets or sets expire parameter (time in seconds when contact expires). Value -1 means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ReadReplyCode">
            <summary>
            Reply reading return codes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.Ok">
            <summary>
            Read completed successfully.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.TimeOut">
            <summary>
            Read timed out.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.LengthExceeded">
            <summary>
            Maximum allowed Length exceeded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.SocketClosed">
            <summary>
            Connected client closed connection.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.ReadReplyCode.UnKnownError">
            <summary>
            UnKnown error, eception raised.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.ReadException">
            <summary>
            Summary description for ReadException.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.ReadException.#ctor(LumiSoft.Net.ReadReplyCode,System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="P:LumiSoft.Net.ReadException.ReadReplyCode">
            <summary>
            Gets read error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_EndPointInfo">
            <summary>
            This class represents SIP end point info, what includes protocol and IP end point.
            Normally this SIP end point info is used to find right UDP socket or TCP onnection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_EndPointInfo.#ctor(System.String,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="transport">Transport.</param>
            <param name="endPoint">IP end point.</param>
            <exception cref="T:System.ArgumentException">Is raised when any of arguments has invalid value.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_EndPointInfo.Transport">
            <summary>
            Gets transport.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_EndPointInfo.EndPoint">
            <summary>
            Gets IP end point.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Destination">
            <summary>
            This class represents remote SIP destination info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Destination.#ctor(LumiSoft.Net.SIP.SIP_Uri)">
            <summary>
            Default constructor.
            </summary>
            <param name="destination">Remote destination URI.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Destination.#ctor(LumiSoft.Net.SIP.Stack.SIP_EndPointInfo,LumiSoft.Net.SIP.SIP_Uri)">
            <summary>
            Default constructor.
            </summary>
            <param name="localEP">Local end point to use to connect remote destination.</param>
            <param name="destination">Remote destination URI.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Destination.LocalEndPoint">
            <summary>
            Gets local destination to use to connect remote destination. 
            Value null means not specified. NOTE This is used only by UDP.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Destination.Transport">
            <summary>
            Gets transport to use.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Destination.Host">
            <summary>
            Gets remote host name or IP address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Destination.Port">
            <summary>
            Gets remote host port.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState">
            <summary>
            Implements SIP "Subscription-State" value. Defined in RFC 3265.
            </summary>
            <remarks>
            <code>
            RFC 3265 Syntax:
                Subscription-State     = substate-value *( SEMI subexp-params )
                substate-value         = "active" / "pending" / "terminated" / extension-substate
                extension-substate     = token
                subexp-params          =   ("reason" EQUAL event-reason-value)
                                         / ("expires" EQUAL delta-seconds)
                                         / ("retry-after" EQUAL delta-seconds)
                                         / generic-param
                event-reason-value     = "deactivated" / "probation" / "rejected" / "timeout" / "giveup"
                                          / "noresource" / event-reason-extension
                event-reason-extension = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.Parse(System.String)">
            <summary>
            Parses "Subscription-State" from specified value.
            </summary>
            <param name="value">SIP "Subscription-State" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Subscription-State" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.ToStringValue">
            <summary>
            Converts this to valid "Subscription-State" value.
            </summary>
            <returns>Returns "Subscription-State" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.Value">
            <summary>
            Gets or sets subscription state value. Known values are defined in SubscriptionState class.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when empty string is passed or value is not token.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.Reason">
            <summary>
            Gets or sets 'reason' parameter value. Known reason values are defined in EventReason class.
            Value null means not specified. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.Expires">
            <summary>
            Gets or sets 'expires' parameter value. Value -1 means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when negative value(except -1) is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.RetryAfter">
            <summary>
            Gets or sets 'expires' parameter value. Value -1 means not specified.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when negative value(except -1) is passed.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.SubscriptionState">
            <summary>
            This class holds 'substate-value' values.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.SubscriptionState.active">
            <summary>
            The subscription has been accepted and (in general) has been authorized.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.SubscriptionState.pending">
            <summary>
            The subscription has been received by the notifier, but there is insufficient policy
            information to grant or deny the subscription yet.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.SubscriptionState.terminated">
            <summary>
            The subscriber should consider the subscription terminated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason">
            <summary>
            This class holds 'event-reason-value' values.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.deactivated">
            <summary>
            The subscription has been terminated, but the subscriber SHOULD retry immediately 
            with a new subscription.  One primary use of such a status code is to allow migration of 
            subscriptions between nodes.  The "retry-after" parameter has no semantics for "deactivated".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.probation">
            <summary>
            The subscription has been terminated, but the client SHOULD retry at some later time. 
            If a "retry-after" parameter is also present, the client SHOULD wait at least the number of
            seconds specified by that parameter before attempting to re-subscribe.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.rejected">
            <summary>
            The subscription has been terminated due to change in authorization policy. 
            Clients SHOULD NOT attempt to re-subscribe. The "retry-after" parameter has no 
            semantics for "rejected".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.timeout">
            <summary>
            The subscription has been terminated because it was not refreshed before it expired. 
            Clients MAY re-subscribe immediately. The "retry-after" parameter has no semantics for "timeout".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.giveup">
            <summary>
            The subscription has been terminated because the notifier could not obtain authorization in a 
            timely fashion.  If a "retry-after" parameter is also present, the client SHOULD wait at least
            the number of seconds specified by that parameter before attempting to re-subscribe; otherwise, 
            the client MAY retry immediately, but will likely get put back into pending state.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Message.SIP_t_SubscriptionState.EventReason.noresource">
            <summary>
            The subscription has been terminated because the resource state which was being monitored 
            no longer exists. Clients SHOULD NOT attempt to re-subscribe. The "retry-after" parameter 
            has no semantics for "noresource".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Replaces">
            <summary>
            Implements SIP "Replaces" value. Defined in RFC 3891.
            </summary>
            <remarks>
            <code>
            RFC 3891 Syntax:
                Replaces        = callid *(SEMI replaces-param)
                replaces-param  = to-tag / from-tag / early-flag / generic-param
                to-tag          = "to-tag" EQUAL token
                from-tag        = "from-tag" EQUAL token
                early-flag      = "early-only"
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Replaces.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Replaces.Parse(System.String)">
            <summary>
            Parses "Replaces" from specified value.
            </summary>
            <param name="value">SIP "Replaces" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Replaces.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Replaces" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Replaces.ToStringValue">
            <summary>
            Converts this to valid "Replaces" value.
            </summary>
            <returns>Returns "Replaces" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Replaces.CallID">
            <summary>
            Gets or sets call id.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Replaces.ToTag">
            <summary>
            Gets or sets Replaces 'to-tag' parameter. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Replaces.FromTag">
            <summary>
            Gets or sets Replaces 'from-tag' parameter. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Replaces.EarlyFlag">
            <summary>
            Gets or sets Replaces 'early-flag' parameter.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_MinSE">
            <summary>
            Implements SIP "Min-SE" value. Defined in RFC 4028.
            </summary>
            <remarks>
            <code>
            RFC 4028 Syntax:
                Min-SE = delta-seconds *(SEMI generic-param)
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_MinSE.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Min-SE value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_MinSE.Parse(System.String)">
            <summary>
            Parses "Min-SE" from specified value.
            </summary>
            <param name="value">SIP "Min-SE" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_MinSE.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Min-SE" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_MinSE.ToStringValue">
            <summary>
            Converts this to valid "Min-SE" value.
            </summary>
            <returns>Returns "Min-SE" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_MinSE.Time">
            <summary>
            Gets or sets time in seconds when session expires.
            </summary>
            <exception cref="T:System.ArgumentException">Is raised when value is less than 1.</exception>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Event">
            <summary>
            Implements SIP "Event" value. Defined in RFC 3265.
            </summary>
            <remarks>
            <code>
            RFC 3265 Syntax:
                Event       = event-type *( SEMI event-param )
                event-param = generic-param / ( "id" EQUAL token )
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Event.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP 'Event' value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Event.Parse(System.String)">
            <summary>
            Parses "Event" from specified value.
            </summary>
            <param name="value">SIP "Event" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Event.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Event" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Event.ToStringValue">
            <summary>
            Converts this to valid "Event" value.
            </summary>
            <returns>Returns "Event" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Event.EventType">
            <summary>
            Gets or sets event type.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null vallue is passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when emptu string passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Event.ID">
            <summary>
            Gets or sets 'id' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.ItemCollection">
            <summary>
            vCard item collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.Add(System.String,System.String,System.String)">
            <summary>
            Adds new vCard item to the collection.
            </summary>
            <param name="name">Item name.</param>
            <param name="parametes">Item parameters.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.Remove(System.String)">
            <summary>
            Removes all items with the specified name.
            </summary>
            <param name="name">Item name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.Remove(LumiSoft.Net.Mime.vCard.Item)">
            <summary>
            Removes specified item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.Clear">
            <summary>
            Clears all items in the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.GetFirst(System.String)">
            <summary>
            Gets first item with specified name. Returns null if specified item doesn't exists.
            </summary>
            <param name="name">Item name. Name compare is case-insensitive.</param>
            <returns>Returns first item with specified name or null if specified item doesn't exists.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.Get(System.String)">
            <summary>
            Gets items with specified name.
            </summary>
            <param name="name">Item name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.SetDecodedValue(System.String,System.String)">
            <summary>
            Sets first item with specified value.  If item doesn't exist, item will be appended to the end.
            If value is null, all items with specified name will be removed.
            Value is encoed as needed and specified item.ParametersString will be updated accordingly.
            </summary>
            <param name="name">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.SetValue(System.String,System.String)">
            <summary>
            Sets first item with specified encoded value.  If item doesn't exist, item will be appended to the end.
            If value is null, all items with specified name will be removed.
            </summary>
            <param name="name">Item name.</param>
            <param name="value">Item encoded value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.SetValue(System.String,System.String,System.String)">
            <summary>
            Sets first item with specified name encoded value.  If item doesn't exist, item will be appended to the end.
            If value is null, all items with specified name will be removed.
            </summary>
            <param name="name">Item name.</param>
            <param name="parametes">Item parameters.</param>
            <param name="value">Item encoded value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.ItemCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.ItemCollection.Count">
            <summary>
            Gets number of vCard items in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.EmailAddress">
            <summary>
            vCard email address implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddress.#ctor(LumiSoft.Net.Mime.vCard.Item,LumiSoft.Net.Mime.vCard.EmailAddressType_enum,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="item">Owner vCard item.</param>
            <param name="type">Email type. Note: This value can be flagged value !</param>
            <param name="emailAddress">Email address.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddress.Changed">
            <summary>
            This method is called when some property has changed, wee need to update underlaying vCard item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddress.Parse(LumiSoft.Net.Mime.vCard.Item)">
            <summary>
            Parses email address from vCard EMAIL structure string.
            </summary>
            <param name="item">vCard EMAIL item.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.EmailAddress.EmailTypeToString(LumiSoft.Net.Mime.vCard.EmailAddressType_enum)">
            <summary>
            Converts EmailAddressType_enum to vCard item parameters string.
            </summary>
            <param name="type">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.EmailAddress.Item">
            <summary>
            Gets underlaying vCrad item.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.EmailAddress.EmailType">
            <summary>
            Gets or sets email type. Note: This property can be flagged value !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.EmailAddress.Email">
            <summary>
            Gets or sets email address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MailboxAddress">
            <summary>
            RFC 2822 3.4. (Address Specification) Mailbox address. 
            <p/>
            Syntax: ["display-name"&lt;SP&gt;]&lt;local-part@domain&gt;.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.#ctor(System.String)">
            <summary>
            Creates new mailbox from specified email address.
            </summary>
            <param name="emailAddress">Email address.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.#ctor(System.String,System.String)">
            <summary>
            Creates new mailbox from specified name and email address.
            </summary>
            <param name="displayName">Display name.</param>
            <param name="emailAddress">Email address.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.Parse(System.String)">
            <summary>
            Parses mailbox from mailbox address string.
            </summary>
            <param name="mailbox">Mailbox string. Format: ["diplay-name"&lt;SP&gt;]&lt;local-part@domain&gt;.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.ToMailboxAddressString">
            <summary>
            Converts this to valid mailbox address string.
            Defined in RFC 2822(3.4. Address Specification) string. Format: ["display-name"&lt;SP&gt;]&lt;local-part@domain&gt;.
            For example, "Ivar Lumi" &lt;ivar@lumisoft.ee&gt;.
            If display name contains unicode chrs, display name will be encoded with canonical encoding in utf-8 charset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MailboxAddress.OnChanged">
            <summary>
            This called when mailox address has changed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.MailboxString">
            <summary>
            Gets Mailbox as RFC 2822(3.4. Address Specification) string. Format: ["display-name"&lt;SP&gt;]&lt;local-part@domain&gt;.
            For example, "Ivar Lumi" &lt;ivar@lumisoft.ee&gt;.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.DisplayName">
            <summary>
            Gets or sets display name. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.EmailAddress">
            <summary>
            Gets or sets email address. For example ivar@lumisoft.ee.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.LocalPart">
            <summary>
            Gets local-part from email address. For example mailbox is "ivar" from "ivar@lumisoft.ee".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.MailboxAddress.Domain">
            <summary>
            Gets domain from email address. For example domain is "lumisoft.ee" from "ivar@lumisoft.ee".
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Utils">
            <summary>
            Provides utility methods for IMAP.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ParseMessageFlags(System.String)">
            <summary>
            Parses message flags from string.
            </summary>
            <param name="flagsString">Message flags string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.MessageFlagsToString(LumiSoft.Net.IMAP.IMAP_MessageFlags)">
            <summary>
            Converts message flags to string. Eg. \SEEN \DELETED .
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ACL_to_String(LumiSoft.Net.IMAP.IMAP_ACL_Flags)">
            <summary>
            Converts IMAP_ACL_Flags to string.
            </summary>
            <param name="flags">Flags to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ACL_From_String(System.String)">
            <summary>
            Parses IMAP_ACL_Flags from string.
            </summary>
            <param name="aclString">String from where to convert</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ParseDate(System.String)">
            <summary>
            Parses IMAP date time from string.
            </summary>
            <param name="date">DateTime string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.DateTimeToString(System.DateTime)">
            <summary>
            Converts date time to IMAP date time string.
            </summary>
            <param name="date">DateTime to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.NormalizeFolder(System.String)">
            <summary>
            Normalizes folder path.  Example: /Inbox/SubFolder/ will be Inbox/SubFolder.
            </summary>
            <param name="folder">Folder path to normalize.</param>
            <returns>Returns normalized folder path.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ParseQuotedParam(System.String@)">
            <summary>
            Parses [quoted] parameter from args text. Parameter may be not quoted, then parameter is
            terminated by SP. Example: argsText="string gdkga agkgs";argsText=stringValue 10.
            
            This method also removes parsed parameter from argsText.
            </summary>
            <param name="argsText">Arguments line from where to parse param.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Utils.ParseBracketParam(System.String@)">
            <summary>
            Parses bracket parameter from args text. Parameter may be not between (), then
            then args text is considered as value. Example: (test test);test test.
            
            This method also removes parsed parameter from argsText.
            </summary>
            <param name="argsText"></param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs">
            <summary>
            Provides data for the AuthUser event for IMAP_Server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to IMAP session.</param>
            <param name="userName">Username.</param>
            <param name="passwData">Password data.</param>
            <param name="data">Authentication specific data(as tag).</param>
            <param name="authType">Authentication type.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.Session">
            <summary>
            Gets reference to smtp session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.PasswData">
            <summary>
            Password data. eg. for AUTH=PLAIN it's password and for AUTH=APOP it's md5HexHash.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.AuthData">
            <summary>
            Authentication specific data(as tag).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.Validated">
            <summary>
            Gets or sets if user is valid.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.ReturnData">
            <summary>
            Gets or sets authentication data what must be returned for connected client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.AuthUser_EventArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_BODY">
            <summary>
            IMAP BODYSTRUCTURE. Defined in RFC 3501 7.4.2.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY.ConstructBodyStructure(LumiSoft.Net.Mime.Mime,System.Boolean)">
            <summary>
            Constructs FETCH BODY and BODYSTRUCTURE response.
            </summary>
            <param name="mime">Mime message.</param>
            <param name="bodystructure">Specifies if to construct BODY or BODYSTRUCTURE.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY.ConstructParts(LumiSoft.Net.Mime.MimeEntity,System.Boolean)">
            <summary>
            Constructs specified entity and it's childentities bodystructure string.
            </summary>
            <param name="entity">Mime entity.</param>
            <param name="bodystructure">Specifies if to construct BODY or BODYSTRUCTURE.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY.Parse(System.String)">
            <summary>
            Parses IMAP BODYSTRUCTURE from body structure string.
            </summary>
            <param name="bodyStructureString">Body structure string</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY.GetEntities(LumiSoft.Net.IMAP.IMAP_BODY_Entity[],System.Collections.Generic.List{LumiSoft.Net.IMAP.IMAP_BODY_Entity})">
            <summary>
            Gets mime entities, including nested entries. 
            </summary>
            <param name="entities"></param>
            <param name="allEntries"></param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY.MainEntity">
            <summary>
            Gets main entity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY.Entities">
            <summary>
            Gets all entities contained in BODYSTRUCTURE, including child entities.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY.Attachmnets">
            <summary>
            Gets attachment entities. Entity is considered as attachmnet if:<p/>
                *) Content-Type: name = "" is specified  (old RFC 822 message)<p/>
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.ldb_Utils">
             <summary>
            LDB utility methods.
             </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.ldb_Utils.LongToByte(System.Int64)">
            <summary>
            Convert long value to byte[8].
            </summary>
            <param name="val">Long value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.ldb_Utils.ByteToLong(System.Byte[],System.Int32)">
            <summary>
            Converts 8 bytes to long value. Offset byte is included.
            </summary>
            <param name="array">Data array.</param>
            <param name="offset">Offset where 8 bytes long value starts. Offset byte is included.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.ldb_Utils.IntToByte(System.Int32)">
            <summary>
            Convert int value to byte[4].
            </summary>
            <param name="val">Int value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.ldb_Utils.ByteToInt(System.Byte[],System.Int32)">
            <summary>
            Converts 4 bytes to int value.  Offset byte is included.
            </summary>
            <param name="array">Data array.</param>
            <param name="offset">Offset where 4 bytes int value starts. Offset byte is included.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Data.lsDB.lsDB_FixedLengthTable">
            <summary>
            Table what all columns are with fixed length.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Open(System.String)">
            <summary>
            Opens specified data file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Open(System.String,System.Int32)">
            <summary>
            Opens specified data file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="waitTime">If data base file is exclusively locked, then how many seconds to wait file to unlock before raising a error.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Close">
            <summary>
            Closes database file.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Create(System.String)">
            <summary>
            Creates new database file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.LockTable(System.Int32)">
            <summary>
            Locks table.
            </summary>
            <param name="waitTime">If table is locked, then how many sconds to wait table to unlock, before teturning error.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.UnlockTable">
            <summary>
            Unlock table.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.MoveFirstRecord">
            <summary>
            Moves to first record.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.NextRecord">
            <summary>
            Gets next record. Returns true if end of file reached and there are no more records.
            </summary>
            <returns>Returns true if end of file reached and there are no more records.</returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.AppendRecord(System.Object[])">
            <summary>
            Appends new record to table.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.DeleteCurrentRecord">
            <summary>
            Deletes current record.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.AddColumn(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Adds column to db file.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.RemoveColumn(LumiSoft.Data.lsDB.LDB_DataColumn)">
            <summary>
            Removes specified column from database file.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.ReadFromFile(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from file.
            </summary>
            <param name="readOffset">Offset in database file from where to start reading data.</param>
            <param name="data">Buffer where to store readed data.</param>
            <param name="offset">Offset in array to where to start storing readed data.</param>
            <param name="count">Number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.WriteToFile(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to file.
            </summary>
            <param name="writeOffset">Offset in database file from where to start writing data.</param>
            <param name="data">Data to write.</param>
            <param name="offset">Offset in array from where to start writing data.</param>
            <param name="count">Number of bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.AppendToFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends specified data at the end of file.
            </summary>
            <param name="data">Data to write.</param>
            <param name="offset">Offset in array from where to start writing data.</param>
            <param name="count">Number of bytes to write.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.GetFilePosition">
            <summary>
            Gets current position in file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.SetFilePosition(System.Int64)">
            <summary>
            Sets file position.
            </summary>
            <param name="position">Position in file.</param>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.IsDatabaseOpen">
            <summary>
            Gets if there is active database file.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.FileName">
            <summary>
            Gets open database file name. Throws exception if database isn't open.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.Columns">
            <summary>
            Gets table columns. Throws exception if database isn't open.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.CurrentRecord">
            <summary>
            Gets current record. Returns null if there isn't current record.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.lsDB_FixedLengthTable.TableLocked">
            <summary>
            Gets table is locked.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.LDB_DataType">
            <summary>
            lsDB data types.
            </summary>
        </member>
        <member name="F:LumiSoft.Data.lsDB.LDB_DataType.String">
            <summary>
            Unicode string.
            </summary>
        </member>
        <member name="F:LumiSoft.Data.lsDB.LDB_DataType.Long">
            <summary>
            Long (64-bit integer).
            </summary>
        </member>
        <member name="F:LumiSoft.Data.lsDB.LDB_DataType.Int">
            <summary>
            Integer (32-bit integer).
            </summary>
        </member>
        <member name="F:LumiSoft.Data.lsDB.LDB_DataType.DateTime">
            <summary>
            Date time.
            </summary>
        </member>
        <member name="F:LumiSoft.Data.lsDB.LDB_DataType.Bool">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_Quota">
            <summary>
            IMAP quota entry. Defined in RFC 2087.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_Quota.#ctor(System.String,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="quotaRootName">Quota root name.</param>
            <param name="messages">Number of current messages.</param>
            <param name="maxMessages">Number of maximum allowed messages.</param>
            <param name="storage">Current storage bytes.</param>
            <param name="maxStorage">Maximum allowed storage bytes.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Quota.QuotaRootName">
            <summary>
            Gets quota root name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Quota.Messages">
            <summary>
            Gets current messages count. Returns -1 if messages and maximum messages quota is not defined.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Quota.MaximumMessages">
            <summary>
            Gets maximum allowed messages count. Returns -1 if messages and maximum messages quota is not defined.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Quota.Storage">
            <summary>
            Gets current storage in bytes. Returns -1 if storage and maximum storage quota is not defined.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_Quota.MaximumStorage">
            <summary>
            Gets maximum allowed storage in bytes. Returns -1 if storage and maximum storage quota is not defined.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_IsLocalUriEventHandler">
            <summary>
            Represents the method that will handle the SIP_ProxyCore.IsLocalUri event.
            </summary>
            <param name="uri">Request URI.</param>
            <returns>Returns true if server local URI, otherwise false.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_AuthenticateEventHandler">
            <summary>
            Represents the method that will handle the SIP_ProxyCore.Authenticate event.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_AddressExistsEventHandler">
            <summary>
            Represents the method that will handle the SIP_ProxyCore.AddressExists event.
            </summary>
            <param name="address">SIP address to check.</param>
            <returns>Returns true if specified address exists, otherwise false.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore">
            <summary>
            Implements SIP registrar,statefull and stateless proxy.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack)">
            <summary>
            Default constructor.
            </summary>
            <param name="sipStack">Reference to SIP stack.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.OnRequestReceived(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            This method is called when new request is received.
            </summary>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.OnResponseReceived(LumiSoft.Net.SIP.Stack.SIP_ResponseReceivedEventArgs)">
            <summary>
            This method is called when new response is received.
            </summary>
            <param name="e">Response event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.ForwardRequest(System.Boolean,LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Forwards specified request to destination recipient.
            </summary>
            <param name="statefull">Specifies if request is sent statefully or statelessly.</param>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.AuthenticateRequest(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Authenticates SIP request. This method also sends all needed replys to request sender.
            </summary>
            <param name="e">Request event arguments.</param>
            <returns>Returns true if request was authenticated.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.AuthenticateRequest(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs,System.String@)">
            <summary>
            Authenticates SIP request. This method also sends all needed replys to request sender.
            </summary>
            <param name="e">Request event arguments.</param>
            <param name="userName">If authentication sucessful, then authenticated user name is stored to this variable.</param>
            <returns>Returns true if request was authenticated.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.OnIsLocalUri(System.String)">
            <summary>
            Raises 'IsLocalUri' event.
            </summary>
            <param name="uri">Request URI.</param>
            <returns>Returns true if server local URI, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.OnAuthenticate(LumiSoft.Net.AUTH.Auth_HttpDigest)">
            <summary>
            Is called by SIP proxy or registrar server when it needs to authenticate user.
            </summary>
            <param name="auth">Authentication context.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.OnAddressExists(System.String)">
            <summary>
            Is called by SIP proxy if it needs to check if specified address exists.
            </summary>
            <param name="address">SIP address to check.</param>
            <returns>Returns true if specified address exists, otherwise false.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.Stack">
            <summary>
            Gets owner SIP stack.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.ProxyMode">
            <summary>
            Gets or sets proxy mode.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.ForkingMode">
            <summary>
            Gets or sets how proxy handle forking. This property applies for statefull proxy only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.Registrar">
            <summary>
            Gets SIP registrar server.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.IsLocalUri">
            <summary>
            This event is raised when SIP proxy needs to know if specified request URI is local URI or remote URI.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.Authenticate">
            <summary>
            This event is raised when SIP proxy or registrar server needs to authenticate user.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_ProxyCore.AddressExists">
            <summary>
            This event is raised when SIP proxy needs to know if specified local server address exists.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Request">
            <summary>
            SIP server request. Related RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.Copy">
            <summary>
            Clones this request.
            </summary>
            <returns>Returns new cloned request.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.Validate">
            <summary>
            Checks if SIP request has all required values as request line,header fields and their values.
            Throws Exception if not valid SIP request.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.Parse(System.Byte[])">
            <summary>
            Parses SIP_Request from byte array.
            </summary>
            <param name="data">Valid SIP request data.</param>
            <returns>Returns parsed SIP_Request obeject.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>data</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.Parse(System.IO.Stream)">
            <summary>
            Parses SIP_Request from stream.
            </summary>
            <param name="stream">Stream what contains valid SIP request.</param>
            <returns>Returns parsed SIP_Request obeject.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when <b>stream</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.ToStream(System.IO.Stream)">
            <summary>
            Stores SIP_Request to specified stream.
            </summary>
            <param name="stream">Stream where to store.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.ToByteData">
            <summary>
            Converts this request to raw srver request data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_Request.CreateResponse(System.String)">
            <summary>
            Creates response to this request.
            </summary>
            <param name="statusCode_ReasonPhrase">SIP Status-Code with Reason-Phrase (Status-Code SP Reason-Phrase).</param>
            <returns>Returns SIP response with specified code and copy of all original headers from this request.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Request.Method">
            <summary>
            Gets request method(REGISTER,INVITE,...) related to this request. This is always in upper-case.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Request.Uri">
            <summary>
            Gets request URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Request.SipVersion">
            <summary>
            Gets or sets SIP request version. Normally this must be always 'SIP/2.0'.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Request.Socket">
            <summary>
            Gets or sets socket what received request. This socket is needed for sending response, we need
            to send response back to same socket. For TCP it uses open connection, for UDP this ensures
            that symmetric NAT works.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_Request.RemoteEndPoint">
            <summary>
            Gets or sets remote end point what sent this request. Returns null if this request isnt received one !.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_From">
            <summary>
            Implements SIP "From" value. Defined in RFC 3261.
            The From header field indicates the initiator of the request.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                From       = ( name-addr / addr-spec ) *( SEMI from-param )
                from-param = tag-param / generic-param
                tag-param  = "tag" EQUAL token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_From.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">From: header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_From.#ctor(LumiSoft.Net.SIP.Message.SIP_t_NameAddress)">
            <summary>
            Default constructor.
            </summary>
            <param name="address">From address.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_From.Parse(System.String)">
            <summary>
            Parses "From" from specified value.
            </summary>
            <param name="value">SIP "accept-range" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_From.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "From" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_From.ToStringValue">
            <summary>
            Converts this to valid "From" value.
            </summary>
            <returns>Returns "From" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_From.Address">
            <summary>
            Gets address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_From.Tag">
            <summary>
            Gets or sets tag parameter value.
            The "tag" parameter serves as a general mechanism for dialog identification.
            Value null means that branch paramter doesn't exist.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_CSeq">
            <summary>
            Implements SIP "Cseq" value. Defined in RFC 3261.
            A CSeq in a request contains a single decimal sequence number and 
            the request method. The method part of CSeq is case-sensitive. The CSeq header 
            field serves to order transactions within a dialog, to provide a means to uniquely 
            identify transactions, and to differentiate between new requests and request retransmissions.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                CSeq = 1*DIGIT LWS Method
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CSeq.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">CSeq: header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CSeq.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="sequenceNumber">Command sequence number.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CSeq.Parse(System.String)">
            <summary>
            Parses "CSeq" from specified value.
            </summary>
            <param name="value">SIP "CSeq" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CSeq.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "CSeq" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_CSeq.ToStringValue">
            <summary>
            Converts this to valid "CSeq" value.
            </summary>
            <returns>Returns "CSeq" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_CSeq.SequenceNumber">
            <summary>
            Gets or sets sequence number.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_CSeq.RequestMethod">
            <summary>
            Gets or sets request method. Note: this value is case-sensitive !
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_MessageType">
            <summary>
            This enum specifies STUN message type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.BindingRequest">
            <summary>
            STUN message is binding request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.BindingResponse">
            <summary>
            STUN message is binding request response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.BindingErrorResponse">
            <summary>
            STUN message is binding requesr error response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.SharedSecretRequest">
            <summary>
            STUN message is "shared secret" request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.SharedSecretResponse">
            <summary>
            STUN message is "shared secret" request response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.STUN.Message.STUN_MessageType.SharedSecretErrorResponse">
            <summary>
            STUN message is "shared secret" request error response.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_Transport">
            <summary>
            This class holds SIP transports. Defined in RFC 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Transport.UDP">
            <summary>
            UDP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Transport.TCP">
            <summary>
            TCP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_Transport.TLS">
            <summary>
            TCP + SSL protocol.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_EventType">
            <summary>
            Implements SIP "event-type" value. Defined in RFC 3265.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_EventType.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_EventType.Parse(System.String)">
            <summary>
            Parses "event-type" from specified value.
            </summary>
            <param name="value">SIP "event-type" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_EventType.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "event-type" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_EventType.ToStringValue">
            <summary>
            Converts this to valid "event-type" value.
            </summary>
            <returns>Returns "event-type" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_EventType.EventType">
            <summary>
            Gets or sets event type.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value passed as value.</exception>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.Item">
            <summary>
            vCard structure item.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Item.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Item name.</param>
            <param name="parameters">Item parameters.</param>
            <param name="value">Item encoded value value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Item.SetDecodedValue(System.String)">
            <summary>
            Sets item decoded value. Value will be encoded as needed and stored to item.Value property.
            Also property item.ParametersString is updated to reflect right encoding(always base64, required by rfc) and charset (utf-8).
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Item.ToItemString">
            <summary>
            Converts item to vCal item string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Item.Name">
            <summary>
            Gest item name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Item.ParametersString">
            <summary>
            Gets or sets item parameters.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Item.Value">
            <summary>
            Gets or sets item encoded value. NOTE: If you set this property value, you must encode data 
            by yourself and also set right ENCODING=encoding; and CHARSET=charset; prameter in item.ParametersString !!!
            Normally use method item.SetDecodedStringValue method instead, this does all you need.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Item.DecodedValue">
            <summary>
            Gets item decoded value. If param string specifies Encoding and/or Charset, 
            item.Value will be decoded accordingly.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.SizeExceededAction">
            <summary>
            Specifies action what is done if requested action exceeds maximum allowed size.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IO.SizeExceededAction.ThrowException">
            <summary>
            Throws exception at once when maximum size exceeded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IO.SizeExceededAction.JunkAndThrowException">
            <summary>
            Junks all data what exceeds maximum allowed size and after requested operation completes,
            throws exception.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder">
            <summary>
            Holds IMAP selected folder info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder">Folder name.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.Update(LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder)">
            <summary>
            Updates current folder messages info with new messages info.
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.Folder">
            <summary>
            Gets selected folder name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.FolderUID">
            <summary>
            Gets folder UID(UIDVADILITY) value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.ReadOnly">
            <summary>
            Gets or sets if folder is read only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.Messages">
            <summary>
            Gets selected folder messages info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.UnSeenCount">
            <summary>
            Gets number of messages with \UNSEEN flags in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.RecentCount">
            <summary>
            Gets number of messages with \RECENT flags in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.DeletedCount">
            <summary>
            Gets number of messages with \DELETED flags in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.FirstUnseen">
            <summary>
            Gets first message index in the collection which has not \SEEN flag set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder.MessageUidNext">
            <summary>
            Gets next new message predicted UID.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_BODY_Entity">
            <summary>
            IMAP BODY mime entity info.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY_Entity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.IMAP_BODY_Entity.Parse(System.String)">
            <summary>
            Parses entity and it's child entities.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ParentEntity">
            <summary>
            Gets parent entity of this entity. If this entity is top level, then this property returns null.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ChildEntities">
            <summary>
            Gets child entities. This property is available only if ContentType = multipart/... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentType">
            <summary>
            Gets header field "<b>Content-Type:</b>" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentType_Paramters">
            <summary>
            Gets header field "<b>Content-Type:</b>" prameters. This value is null if no parameters.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentID">
            <summary>
            Gets header field "<b>Content-ID:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentDescription">
            <summary>
            Gets header field "<b>Content-Description:</b>" value. Returns null if value isn't set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentTransferEncoding">
            <summary>
            Gets header field "<b>Content-Transfer-Encoding:</b>" value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentSize">
            <summary>
            Gets content encoded data size. NOTE: This property is available only for non-multipart contentype !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.Envelope">
            <summary>
            Gets content envelope. NOTE: This property is available only for message/xxx content type !
            Yhis value can be also null if no ENVELOPE provided by server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.IMAP_BODY_Entity.ContentLines">
            <summary>
            Gets content encoded data lines. NOTE: This property is available only for text/xxx content type !
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs">
            <summary>
            Provides data for IMAP events.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="folder"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs.#ctor(System.String,System.String)">
            <summary>
            Folder rename constructor.
            </summary>
            <param name="folder"></param>
            <param name="newFolder"></param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs.Folder">
            <summary>
            Gets folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs.NewFolder">
            <summary>
            Gets new folder name, this is available for rename only.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.Mailbox_EventArgs.ErrorText">
            <summary>
            Gets or sets custom error text, which is returned to client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.NS_Record">
            <summary>
            NS record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.NS_Record.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="nameServer">Name server name.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.NS_Record.NameServer">
            <summary>
            Gets name server name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest">
            <summary>
            Implements http digest access authentication. Defined in RFC 2617.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="digestResponse">Client returned digest response.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Client constructor. This is used to build valid Authorization response to server.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="cnonce">Client nonce value.</param>
            <param name="uri">Request URI.</param>
            <param name="digestResponse">Server authenticate resposne.</param>
            <param name="requestMethod">Request method.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.Authenticate(System.String,System.String)">
            <summary>
            Authenticates specified user and password using this class parameters.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <returns>Returns true if authenticated, otherwise false.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.Parse(System.String)">
            <summary>
            Parses authetication info from client digest response.
            </summary>
            <param name="digestResponse">Client returned digest response.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.CalculateResponse(System.String,System.String)">
            <summary>
            Calculates response value.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">User password.</param>
            <returns>Returns calculated rsponse value.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest.ToString">
            <summary>
            Converts this to valid digest string.
            </summary>
            <returns>Returns digest string.</returns>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Realm">
            <summary>
            Gets a string to be displayed to users so they know which username and password 
            to use. This string should contain at least the name of the host performing the 
            authentication and might additionally indicate the collection of users who might have access.
            An example might be "registered_users@gotham.news.com".
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Nonce">
            <summary>
            Gets a server-specified unique data string. It is recommended that this 
            string be base64 or hexadecimal data. 
            Suggested value: base64(time-stamp hex(time-stamp ":" ETag ":" private-key)).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Opaque">
            <summary>
            Gets string of data, specified by the server, which should be returned by the client unchanged.
            It is recommended that this string be base64 or hexadecimal data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Algorithm">
            <summary>
            Gets algorithm to use to produce the digest and a checksum.
            This is normally MD5 or MD5-sess.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Response">
            <summary>
            Gets a string of 32 hex digits computed by HTTP digest algorithm, 
            which proves that the user knows a password.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Uri">
            <summary>
            Gets the URI from Request-URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.Qop">
            <summary>
            Gets value what indicates "quality of protection" the client has applied to
            the message. If present, its value MUST be one of the alternatives the server indicated
            it supports in the WWW-Authenticate header. This directive is optional in order to preserve 
            backward compatibility.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.CNonce">
            <summary>
            Gets Client nonce value. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate header field.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest.NonceCount">
            <summary>
            Gets nonce ount. This MUST be specified if a qop directive is sent (see above), and
            MUST NOT be specified if the server did not send a qop directive in the WWW-Authenticate 
            header field.  The nc-value is the hexadecimal count of the number of requests.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.TextUtils">
            <summary>
            This class provides usefull text methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.QuoteString(System.String)">
            <summary>
            Qoutes and escapes fishy(\") chars.
            </summary>
            <param name="text">Text to quote.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.UnQuoteString(System.String)">
            <summary>
            Unquotes and unescapes escaped chars specified text. For example "xxx" will become to 'xxx', "escaped quote \"", will become to escaped 'quote "'.
            </summary>
            <param name="text">Text to unquote.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.EscapeString(System.String,System.Char[])">
            <summary>
            Escapes specified chars in the specified string.
            </summary>
            <param name="text">Text to escape.</param>
            <param name="charsToEscape">Chars to escape.</param>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.UnEscapeString(System.String)">
            <summary>
            Unescapes all escaped chars.
            </summary>
            <param name="text">Text to unescape.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitQuotedString(System.String,System.Char)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitQuotedString(System.String,System.Char,System.Boolean)">
            <summary>
            Splits string into string arrays. This split method won't split qouted strings, but only text outside of qouted string.
            For example: '"text1, text2",text3' will be 2 parts: "text1, text2" and text3.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char that splits text.</param>
            <param name="unquote">If true, splitted parst will be unqouted if they are qouted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.QuotedIndexOf(System.String,System.Char)">
            <summary>
            Gets first index of specified char. The specified char in quoted string is skipped.
            Returns -1 if specified char doesn't exist.
            </summary>
            <param name="text">Text in what to check.</param>
            <param name="indexChar">Char what index to get.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.SplitString(System.String,System.Char)">
            <summary>
            Splits string into string arrays.
            </summary>
            <param name="text">Text to split.</param>
            <param name="splitChar">Char Char that splits text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.TextUtils.IsToken(System.String)">
            <summary>
            Gets if specified string is valid "token" value.
            </summary>
            <param name="value">String value to check.</param>
            <returns>Returns true if specified string value is valid "token" value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised if <b>value</b> is null.</exception>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Time">
            <summary>
            A SDP_Time represents an <B>t=</B> SDP message field. Defined in RFC 4566 5.9. Timing.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Time.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Time.Parse(System.String)">
            <summary>
            Parses media from "t" SDP message field.
            </summary>
            <param name="tValue">"t" SDP message field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Time.ToValue">
            <summary>
            Converts this to valid "t" string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Time.StartTime">
            <summary>
            Gets or sets start time when session must start. Network Time Protocol (NTP) time values in 
            seconds since 1900. 0 value means not specified, if StopTime is also 0, then means infinite session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Time.StopTime">
            <summary>
            Gets or sets stop time when session must end. Network Time Protocol (NTP) time values in 
            seconds since 1900. 0 value means not specified, if StopTime is also 0, then means infinite session.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketBufferedWriter">
            <summary>
            Implements buffered writer for socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.#ctor(LumiSoft.Net.SocketEx)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket">Socket where to write data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.Flush">
            <summary>
            Forces to send all data in buffer to destination host.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.Write(System.String)">
            <summary>
            Queues specified data to write buffer. If write buffer is full, buffered data will be sent to detination host.
            </summary>
            <param name="data">Data to queue.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketBufferedWriter.Write(System.Byte[])">
            <summary>
            Queues specified data to write buffer. If write buffer is full, buffered data will be sent to detination host.
            </summary>
            <param name="data">Data to queue.</param>
        </member>
        <member name="T:LumiSoft.Net.BindInfoProtocol">
            <summary>
            Specifies BindInfo protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BindInfoProtocol.TCP">
            <summary>
            TCP protocol.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.BindInfoProtocol.UDP">
            <summary>
            UDP protocol.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Client.STUN_Client">
            <summary>
            This class implements STUN client. Defined in RFC 3489.
            </summary>
            <example>
            <code>
            // Create new socket for STUN client.
            Socket socket = new Socket(AddressFamily.InterNetwork,SocketType.Dgram,ProtocolType.Udp);
            socket.Bind(new IPEndPoint(IPAddress.Any,0));
            
            // Query STUN server
            STUN_Result result = STUN_Client.Query("stunserver.org",3478,socket);
            if(result.NetType != STUN_NetType.UdpBlocked){
                // UDP blocked or !!!! bad STUN server
            }
            else{
                IPEndPoint publicEP = result.PublicEndPoint;
                // Do your stuff
            }
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Client.Query(System.String,System.Int32,System.Net.Sockets.Socket)">
            <summary>
            Gets NAT info from STUN server.
            </summary>
            <param name="host">STUN server name or IP.</param>
            <param name="port">STUN server port. Default port is 3478.</param>
            <param name="socket">UDP socket to use.</param>
            <returns>Returns UDP netwrok info.</returns>
            <exception cref="T:System.Exception">Throws exception if unexpected error happens.</exception>
        </member>
        <member name="M:LumiSoft.Net.STUN.Client.STUN_Client.DoTransaction(LumiSoft.Net.STUN.Message.STUN_Message,System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            Does STUN transaction. Returns transaction response or null if transaction failed.
            </summary>
            <param name="request">STUN message.</param>
            <param name="socket">Socket to use for send/receive.</param>
            <param name="remoteEndPoint">Remote end point.</param>
            <returns>Returns transaction response or null if transaction failed.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_CanRegisterEventHandler">
            <summary>
            Represents the method that will handle the SIP_Registrar.CanRegister event.
            </summary>
            <param name="userName">Authenticated user name.</param>
            <param name="address">Address to be registered.</param>
            <returns>Returns true if specified user can register specified address, otherwise false.</returns>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_Registrar">
            <summary>
            This class implements SIP registrar server. Defined in RFC 3261.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.#ctor(LumiSoft.Net.SIP.Proxy.SIP_ProxyCore)">
            <summary>
            Default constructor.
            </summary>
            <param name="proxy">Owner proxy.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.GetRegistration(System.String)">
            <summary>
            Gets specified registration. Returns null if no such registration.
            </summary>
            <param name="addressOfRecord">Address of record of registration which to get.</param>
            <returns>Returns SIP registration or null if no match.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.SetRegistration(System.String,LumiSoft.Net.SIP.Message.SIP_t_ContactParam[])">
            <summary>
            Add or updates specified SIP registration info.
            </summary>
            <param name="addressOfRecord">Registration address of record.</param>
            <param name="contacts">Registration address of record contacts to update.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.SetRegistration(System.String,LumiSoft.Net.SIP.Message.SIP_t_ContactParam[],LumiSoft.Net.SIP.Stack.SIP_EndPointInfo)">
            <summary>
            Add or updates specified SIP registration info.
            </summary>
            <param name="addressOfRecord">Registration address of record.</param>
            <param name="contacts">Registration address of record contacts to update.</param>
            <param name="localEP">SIP proxy local end point info what accpeted this contact registration.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.DeleteRegistration(System.String)">
            <summary>
            Deletes specified registration and all it's contacts.
            </summary>
            <param name="addressOfRecord">Registration address of record what to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.GetContact(LumiSoft.Net.SIP.SIP_Uri,LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact@)">
            <summary>
            Gets registration contact.
            </summary>
            <param name="uri">SIP URI to get.</param>
            <param name="retVal">If specified SIP URI is registration contact, then that contect will be stored here.</param>
            <returns>Returns true is specified SIP URI is registration contact.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.Register(LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs)">
            <summary>
            Handles REGISTER method.
            </summary>
            <param name="e">Request event arguments.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_Registrar.OnCanRegister(System.String,System.String)">
            <summary>
            Is called by SIP registrar if it needs to check if specified user can register specified address.
            </summary>
            <param name="userName">Authenticated user name.</param>
            <param name="address">Address to be registered.</param>
            <returns>Returns true if specified user can register specified address, otherwise false.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registrar.Proxy">
            <summary>
            Gets owner proxy core.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_Registrar.Registrations">
            <summary>
            Gets current SIP registrations.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SIP.Proxy.SIP_Registrar.CanRegister">
            <summary>
            This event is raised when SIP registrar need to check if specified user can register specified address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue">
            <summary>
            Implements SIP "reason-value" value. Defined in rfc 3326.
            </summary>
            <remarks>
            <code>
            RFC 3326 Syntax:
                reason-value      =  protocol *(SEMI reason-params)
                protocol          =  "SIP" / "Q.850" / token
                reason-params     =  protocol-cause / reason-text / reason-extension
                protocol-cause    =  "cause" EQUAL cause
                cause             =  1*DIGIT
                reason-text       =  "text" EQUAL quoted-string
                reason-extension  =  generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP reason-value value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.Parse(System.String)">
            <summary>
            Parses "reason-value" from specified value.
            </summary>
            <param name="value">SIP "reason-value" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "reason-value" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.ToStringValue">
            <summary>
            Converts this to valid "reason-value" value.
            </summary>
            <returns>Returns "reason-value" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.Protocol">
            <summary>
            Gets or sets protocol.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.Cause">
            <summary>
            Gets or sets 'cause' parameter value. The cause parameter contains a SIP status code. 
            Value -1 means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReasonValue.Text">
            <summary>
            Gets or sets 'text' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_Session">
            <summary>
            POP3 Session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.#ctor(System.String,LumiSoft.Net.SocketEx,LumiSoft.Net.BindInfo,LumiSoft.Net.POP3.Server.POP3_Server)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="socket">Server connected socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
            <param name="server">Reference to server.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.StartSession">
            <summary>
            Starts session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.EndSession">
            <summary>
            Ends session, closes socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.Kill">
            <summary>
            Kill this session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnSessionTimeout">
            <summary>
            Is called by server when session has timed out.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.OnError(System.Exception)">
            <summary>
            Is called when error occures.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.BeginRecieveCmd">
            <summary>
            Starts recieveing command.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.EndRecieveCmd(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called if command is recieved.
            </summary>
            <param name="result"></param>
            <param name="exception"></param>
            <param name="count"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.SwitchCommand(System.String)">
            <summary>
            Parses and executes POP3 commmand.
            </summary>
            <param name="POP3_commandTxt">POP3 command text.</param>
            <returns>Returns true,if session must be terminated.</returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_Session.EndSend(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when asynchronous send completes.
            </summary>
            <param name="result">If true, then send was successfull.</param>
            <param name="count">Count sended.</param>
            <param name="exception">Exception happend on send. NOTE: available only is result=false.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.vCard">
            <summary>
            Rfc 2426 vCard implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.ToByte">
            <summary>
            Stores vCard structure to byte[].
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.ToFile(System.String)">
            <summary>
            Stores vCard to the specified file.
            </summary>
            <param name="file">File name with path where to store vCard.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.ToStream(System.IO.Stream)">
            <summary>
            Stores vCard structure to the specified stream.
            </summary>
            <param name="stream">Stream where to store vCard structure.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.Parse(System.String)">
            <summary>
            Parses vCard from the specified file.
            </summary>
            <param name="file">vCard file with path.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.vCard.Parse(System.IO.Stream)">
            <summary>
            Parses vCard from the specified stream.
            </summary>
            <param name="stream">Stream what contains vCard.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Items">
            <summary>
            Gets reference to vCard items.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Version">
            <summary>
            Gets or sets vCard version. Returns null if VERSION: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Name">
            <summary>
            Gets or sets name info.  Returns null if N: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.FormattedName">
            <summary>
            Gets or sets formatted(Display name) name.  Returns null if FN: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.NickName">
            <summary>
            Gets or sets nick name. Returns null if NICKNAME: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Photo">
            <summary>
            Gets or sets person photo. Returns null if PHOTO: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.BirthDate">
            <summary>
            Gets or sets birth date. Returns DateTime.MinValue if not set.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Addresses">
            <summary>
            Gets addresses collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.PhoneNumbers">
            <summary>
            Gets phone number collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.EmailAddresses">
            <summary>
            Gets email addresses collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Title">
            <summary>
            Gets or sets job title. Returns null if TITLE: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Role">
            <summary>
            Gets or sets role. Returns null if ROLE: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.Organization">
            <summary>
            Gets or sets organization name. Usually this value is: comapny;department;office. Returns null if ORG: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.NoteText">
            <summary>
            Gets or sets note text. Returns null if NOTE: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.UID">
            <summary>
            Gets or sets vCard unique ID. Returns null if UID: item doesn't exist.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.HomeURL">
            <summary>
            Gets or sets vCard home URL.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.vCard.WorkURL">
            <summary>
            Gets or sets vCard Work URL.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.MimeUtils">
            <summary>
            Provides mime related utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseDate(System.String)">
            <summary>
            Parses rfc 2822 datetime.
            </summary>
            <param name="date">Date string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.DateTimeToRfc2822(System.DateTime)">
            <summary>
            Converts date to rfc 2822 date time string.
            </summary>
            <param name="dateTime">Date time value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaders(System.IO.Stream)">
            <summary>
            Parses headers from message or mime entry.
            </summary>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns>Returns header lines.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaderField(System.String,System.IO.Stream)">
            <summary>
            Parse header specified header field value.
            
            Use this method only if you need to get only one header field, otherwise use
            MimeParser.ParseHeaderField(string fieldName,string headers).
            This avoid parsing headers multiple times.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="entryStrm">Stream from where to read headers.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaderField(System.String,System.String)">
            <summary>
            Parse header specified header field value.
            </summary>
            <param name="fieldName">Header field which to parse. Eg. Subject: .</param>
            <param name="headers">Full headers string. Use MimeParser.ParseHeaders() to get this value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseHeaderFiledParameter(System.String,System.String,System.String)">
            <summary>
            Parses header field parameter value. 
            For example: CONTENT-TYPE: application\octet-stream; name="yourFileName.xxx",
            fieldName="CONTENT-TYPE:" and subFieldName="name".
            </summary>
            <param name="fieldName">Main header field name.</param>
            <param name="parameterName">Header field's parameter name.</param>
            <param name="headers">Full headrs string.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseMediaType(System.String)">
            <summary>
            Parses MediaType_enum from <b>Content-Type:</b> header field value.
            </summary>
            <param name="headerFieldValue"><b>Content-Type:</b> header field value. This value can be null, then MediaType_enum.NotSpecified.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.MediaTypeToString(LumiSoft.Net.Mime.MediaType_enum)">
            <summary>
            Converts MediaType_enum to string. NOTE: Returns null for MediaType_enum.NotSpecified.
            </summary>
            <param name="mediaType">MediaType_enum value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseContentTransferEncoding(System.String)">
            <summary>
            Parses ContentTransferEncoding_enum from <b>Content-Transfer-Encoding:</b> header field value.
            </summary>
            <param name="headerFieldValue"><b>Content-Transfer-Encoding:</b> header field value. This value can be null, then ContentTransferEncoding_enum.NotSpecified.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ContentTransferEncodingToString(LumiSoft.Net.Mime.ContentTransferEncoding_enum)">
            <summary>
            Converts ContentTransferEncoding_enum to string. NOTE: Returns null for ContentTransferEncoding_enum.NotSpecified.
            </summary>
            <param name="encoding">ContentTransferEncoding_enum value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ParseContentDisposition(System.String)">
            <summary>
            Parses ContentDisposition_enum from <b>Content-Disposition:</b> header field value.
            </summary>
            <param name="headerFieldValue"><b>Content-Disposition:</b> header field value. This value can be null, then ContentDisposition_enum.NotSpecified.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.ContentDispositionToString(LumiSoft.Net.Mime.ContentDisposition_enum)">
            <summary>
            Converts ContentDisposition_enum to string. NOTE: Returns null for ContentDisposition_enum.NotSpecified.
            </summary>
            <param name="disposition">ContentDisposition_enum value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.EncodeWord(System.String)">
            <summary>
            Encodes specified header field word if needed.
            </summary>
            <param name="word">Word to encode.</param>
            <returns>Returns encoded word.</returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.EncodeHeaderField(System.String)">
            <summary>
            Encodes header field with quoted-printable encoding, if value contains ANSI or UNICODE chars.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.CreateMessageID">
            <summary>
            Creates Rfc 2822 3.6.4 message-id. Syntax: '&lt;' id-left '@' id-right '&gt;'.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.MimeUtils.FoldData(System.String)">
            <summary>
            Folds long data line to folded lines.
            </summary>
            <param name="data">Data to fold.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderFieldCollection">
            <summary>
            Mime entity header fields collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Add(System.String,System.String)">
            <summary>
            Adds a new header field with specified name and value to the end of the collection.
            </summary>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Add(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Adds specified heade field to the end of the collection.
            </summary>
            <param name="headerField">Header field.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts a new header field into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the header field.</param>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Remove(System.Int32)">
            <summary>
            Removes header field at the specified index from the collection.
            </summary>
            <param name="index">The index of the header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Remove(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Removes specified header field from the collection.
            </summary>
            <param name="field">Header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.RemoveAll(System.String)">
            <summary>
            Removes all header fields with specified name from the collection.
            </summary>
            <param name="fieldName">Header field name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Clear">
            <summary>
            Clears the collection of all header fields.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Contains(System.String)">
            <summary>
            Gets if collection contains specified header field.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Contains(LumiSoft.Net.Mime.HeaderField)">
            <summary>
            Gets if collection contains specified header field.
            </summary>
            <param name="headerField">Header field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.GetFirst(System.String)">
            <summary>
            Gets first header field with specified name, returns null if specified field doesn't exist.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Get(System.String)">
            <summary>
            Gets header fields with specified name, returns null if specified field doesn't exist.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Parse(System.String)">
            <summary>
            Parses header fields from string.
            </summary>
            <param name="headerString">Header string.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.Parse(System.IO.Stream)">
            <summary>
            Parses header fields from stream. Stream position stays where header reading ends.
            </summary>
            <param name="stream">Stream from where to parse.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.ToHeaderString(System.String)">
            <summary>
            Converts header fields to rfc 2822 message header string.
            </summary>
            <param name="encodingCharSet">CharSet to use for non ASCII header field values. Utf-8 is recommended value, if you explicity don't need other.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldCollection.Item(System.Int32)">
            <summary>
            Gets header field from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldCollection.Count">
            <summary>
            Gets header fields count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.SearchGroup">
            <summary>
            IMAP search command grouped(parenthesized) search-key collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses search key from current position.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.IsHeaderNeeded">
            <summary>
            Gets if message Header is needed for matching.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.IsBodyTextNeeded">
            <summary>
            Gets if message body text is needed for matching.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.ParseSearchKey(LumiSoft.Net.StringReader)">
            <summary>
            Parses SearchGroup or SearchItem from reader. If reader starts with (, then parses searchGroup, otherwise SearchItem.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.Match_Key_Value(System.Object,System.Int64,System.Int64,System.Int64,System.DateTime,LumiSoft.Net.IMAP.IMAP_MessageFlags,LumiSoft.Net.Mime.Mime,System.String)">
            <summary>
            Gets if specified message matches to specified search key.
            </summary>
            <param name="searchKey">SearchKey or SearchGroup.</param>
            <param name="no">IMAP message sequence number.</param>
            <param name="uid">IMAP message UID.</param>
            <param name="size">IMAP message size in bytes.</param>
            <param name="internalDate">IMAP message INTERNALDATE (dateTime when server stored message).</param>
            <param name="flags">IMAP message flags.</param>
            <param name="mime">Mime message main header only.</param>
            <param name="bodyText">Message body text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.IsHeaderNeededForKey(System.Object)">
            <summary>
            Gets if message header is needed for matching.
            </summary>
            <param name="searchKey"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.IsBodyTextNeededForKey(System.Object)">
            <summary>
            Gets if message body text is needed for matching.
            </summary>
            <param name="searchKey"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchGroup.Match(System.Int64,System.Int64,System.Int64,System.DateTime,LumiSoft.Net.IMAP.IMAP_MessageFlags,LumiSoft.Net.Mime.Mime,System.String)">
            <summary>
            Gets if specified message matches with this class search-key.
            </summary>
            <param name="no">IMAP message sequence number.</param>
            <param name="uid">IMAP message UID.</param>
            <param name="size">IMAP message size in bytes.</param>
            <param name="internalDate">IMAP message INTERNALDATE (dateTime when server stored message).</param>
            <param name="flags">IMAP message flags.</param>
            <param name="mime">Mime message main header only.</param>
            <param name="bodyText">Message body text.</param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.MX_Record">
            <summary>
            MX record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.MX_Record.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="preference">MX record preference.</param>
            <param name="host">Mail host dns name.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.MX_Record.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type. 
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>Returns 0 if two objects are equal, returns negative value if this object is less,
            returns positive value if this object is grater.</returns>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.MX_Record.Preference">
            <summary>
            Gets MX record preference. The lower number is the higher priority server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.MX_Record.Host">
            <summary>
            Gets mail host dns name.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.LDB_DataColumn">
            <summary>
            
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.#ctor(System.String,LumiSoft.Data.lsDB.LDB_DataType)">
            <summary>
            Default constructor.
            </summary>
            <param name="columnName">Column name.</param>
            <param name="dataType">Column data type.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.#ctor(System.String,LumiSoft.Data.lsDB.LDB_DataType,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="columnName">Column name.</param>
            <param name="dataType">Column data type.</param>  
            <param name="columnSize">Specifies column data size. This is available for String datatype only.</param>  
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.Parse(System.Byte[])">
            <summary>
            Parses column from byte[] data.
            </summary>
            <param name="columnData">Column data.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.ToColumnInfo">
            <summary>
            Convert column to byte[] data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.LDB_DataColumn.GetChar0TerminatedString(System.String)">
            <summary>
            Gets string from char(0) terminated text.
            </summary>
            <param name="text">Text.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_DataColumn.DataType">
            <summary>
            Gets LDB data type.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_DataColumn.ColumnName">
            <summary>
            Gets column name.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.LDB_DataColumn.ColumnSize">
            <summary>
            Gets column size. Returns -1 if column is with variable length.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems">
            <summary>
            Provides data to event GetMessageItems.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_Message,LumiSoft.Net.IMAP.Server.IMAP_MessageItems_enum)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to current IMAP session.</param>
            <param name="messageInfo">Message info what message items to get.</param>
            <param name="messageItems">Specifies message items what must be filled.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Finalize">
            <summary>
            Default deconstructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Validate">
            <summary>
            Checks that all required data items are provided, if not throws exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Session">
            <summary>
            Gets reference to current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.MessageInfo">
            <summary>
            Gets message info what message items to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.MessageItems">
            <summary>
            Gets what message items must be filled.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.CloseMessageStream">
            <summary>
            Gets or sets if message stream is closed automatically if all actions on it are completed.
            Default value is true.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.MessageStream">
            <summary>
            Gets or sets message stream. When setting this property Stream position must be where message begins.
            Fill this property only if IMAP_MessageItems_enum.Message flag is specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.MessageSize">
            <summary>
            Gets message size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Header">
            <summary>
            Gets or sets message main header.
            Fill this property only if IMAP_MessageItems_enum.Header flag is specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.Envelope">
            <summary>
            Gets or sets IMAP ENVELOPE string.
            Fill this property only if IMAP_MessageItems_enum.Envelope flag is specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.BodyStructure">
            <summary>
            Gets or sets IMAP BODYSTRUCTURE string.
            Fill this property only if IMAP_MessageItems_enum.BodyStructure flag is specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_MessageItems.MessageExists">
            <summary>
            Gets or sets if message exists. Set this false, if message actually doesn't exist any more.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact">
            <summary>
            Implements SIP registration contact.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact.#ctor(LumiSoft.Net.SIP.Message.SIP_t_ContactParam,System.Int32,LumiSoft.Net.SIP.Stack.SIP_EndPointInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="contact">SIP contact.</param>
            <param name="expires">Time in seconds when contact expires.</param>
            <param name="localEP">SIP proxy local end point info what accpeted this contact registration.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact.UpdateContact(LumiSoft.Net.SIP.Message.SIP_t_ContactParam,System.Int32,LumiSoft.Net.SIP.Stack.SIP_EndPointInfo)">
            <summary>
            Updates contact info.
            </summary>
            <param name="contact">SIP contact.</param>
            <param name="expires">Time in seconds when contact expires.</param>
            <param name="localEP">SIP proxy local end point info what accpeted this contact registration.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact.ToStringValue">
            <summary>
            Returns this.Contact as string value, but expires parameter is replaced with remaining time value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type. 
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>Returns 0 if two objects equal, -1 if this instance is less or 1 this instance is greater.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact.Contact">
            <summary>
            Gets SIP contact.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact.IsExpired">
            <summary>
            Gets if this contact is expired.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact.Expires">
            <summary>
            Gets after how many seconds this contact expires. This is live calulated value, so it decreses every second.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact.QValue">
            <summary>
            Gets qvalue. QValue is used for contacts sorting. Higer value means higher priority.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationContact.LocalEndPoint">
            <summary>
            Gets local IP end point what accepted this contact registration.
            This end point is(must be) used to connect "this.Contact" address, otherwise if SIP stack
            has server IPs, UA is behind NAT, then UA only accpets data from this.LocalEndPoint.
            NOTE: This property can be null, if registration is added programatically and not trough network !
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection">
            <summary>
            SIP registration collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Add(LumiSoft.Net.SIP.Proxy.SIP_Registration)">
            <summary>
            Adds specified registration to collection.
            </summary>
            <param name="registration">Registration to add.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Remove(System.String)">
            <summary>
            Deletes specified registration and all it's contacts. 
            </summary>
            <param name="addressOfRecord">Registration address of record what to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Contains(System.String)">
            <summary>
            Gets if registration with specified name already exists.
            </summary>
            <param name="addressOfRecord">Address of record of resgistration.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.RemoveExpired">
            <summary>
            Removes all expires registration from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Count">
            <summary>
            Gets number of registrations in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Item(System.String)">
            <summary>
            Gets registration with specified registration name. Returns null if specified registration doesn't exist.
            </summary>
            <param name="addressOfRecord">Address of record of resgistration.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Proxy.SIP_RegistrationCollection.Values">
            <summary>
            Gets SIP registrations what in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SDP.SDP_Media">
            <summary>
            SDP media.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Media.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SDP.SDP_Media.ToValue">
            <summary>
            Converts media entity to corresponding media lines. Attributes included.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Media.MediaDescription">
            <summary>
            Gets or sets media description.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Media.Title">
            <summary>
            Gets or sets media title.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Media.ConnectionData">
            <summary>
            Gets or sets connection data. This is optional value if SDP message specifies this value,
            null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Media.EncryptionKey">
            <summary>
            Gets or sets media encryption key info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SDP.SDP_Media.Attributes">
            <summary>
            Gets media attributes collection. This is optional value, Count == 0 means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ClientTransactionState">
            <summary>
            This value specifies SIP client transaction state.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ClientTransactionState.Calling">
            <summary>
            Calling to recipient. This is used only by INVITE transaction.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ClientTransactionState.Trying">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ClientTransactionState.Proceeding">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ClientTransactionState.Completed">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ClientTransactionState.Terminated">
            <summary>
            Transaction has terminated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_NameAddress">
            <summary>
            Implements SIP "name-addr" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                name-addr = [ display-name ] LAQUOT addr-spec RAQUOT
                addr-spec = SIP-URI / SIPS-URI / absoluteURI
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.Parse(System.String)">
            <summary>
            Parses "name-addr" or "addr-spec" from specified value.
            </summary>
            <param name="value">SIP "name-addr" or "addr-spec" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "name-addr" or "addr-spec" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.ToStringValue">
            <summary>
            Converts this to valid name-addr or addr-spec string as needed.
            </summary>
            <returns>Returns name-addr or addr-spec string.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.DisplayName">
            <summary>
            Gets or sets display name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.Uri">
            <summary>
            Gets or sets URI. This can be SIP-URI / SIPS-URI / absoluteURI.
            Examples: sip:ivar@lumisoft.ee,sips:ivar@lumisoft.ee,mailto:ivar@lumisoft.ee, .... .
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.IsSipOrSipsUri">
            <summary>
            Gets if current URI is sip or sips URI.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.IsSipUri">
            <summary>
            Gets if current URI is SIP uri.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.IsSecureSipUri">
            <summary>
            Gets if current URI is SIPS uri.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_NameAddress.IsMailToUri">
            <summary>
            Gets if current URI is MAILTO uri.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Method">
            <summary>
            Implements SIP "Method" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                Method           = INVITEm / ACKm / OPTIONSm / BYEm / CANCELm / REGISTERm / extension-method
                extension-method = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Method.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Method.Parse(System.String)">
            <summary>
            Parses "Method" from specified value.
            </summary>
            <param name="value">SIP "Method" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Method.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Method" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Method.ToStringValue">
            <summary>
            Converts this to valid "Method" value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Method.Method">
            <summary>
            Gets or sets SIP method what is allowed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketLogEntry">
            <summary>
            Socket log entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketLogEntry.#ctor(System.String,System.Int64,LumiSoft.Net.SocketLogEntryType)">
            <summary>
            Default constructor.
            </summary>
            <param name="text">Log text.</param>
            <param name="size">Data size.</param>
            <param name="type">Log entry type</param>
        </member>
        <member name="P:LumiSoft.Net.SocketLogEntry.Text">
            <summary>
            Gets log text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogEntry.Size">
            <summary>
            Gets size of data readed or sent.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogEntry.Type">
            <summary>
            Gets log entry type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ReferSub">
            <summary>
            Implements SIP "refer-sub" value. Defined in RFC 4488.
            </summary>
            <remarks>
            <code>
            RFC 4488 Syntax:
                Refer-Sub       = refer-sub-value *(SEMI exten)
                refer-sub-value = "true" / "false"
                exten           = generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Refer-Sub value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.Parse(System.String)">
            <summary>
            Parses "Refer-Sub" from specified value.
            </summary>
            <param name="value">SIP "Refer-Sub" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Refer-Sub" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.ToStringValue">
            <summary>
            Converts this to valid "contact-param" value.
            </summary>
            <returns>Returns "contact-param" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReferSub.Value">
            <summary>
            Gets or sets refer-sub-value value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_MessageCollection">
            <summary>
            POP3 messages info collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Add(System.String,System.String,System.Int64)">
            <summary>
            Adds new message info to the collection.
            </summary>
            <param name="id">Message ID.</param>
            <param name="uid">Message UID.</param>
            <param name="size">Message size in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Add(System.String,System.String,System.Int64,System.Object)">
            <summary>
            Adds new message info to the collection.
            </summary>
            <param name="id">Message ID.</param>
            <param name="uid">Message UID.</param>
            <param name="size">Message size in bytes.</param>
            <param name="tag">Message user data.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Remove(LumiSoft.Net.POP3.Server.POP3_Message)">
            <summary>
            Removes specified message from the collection.
            </summary>
            <param name="message">Message to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.ContainsUID(System.String)">
            <summary>
            Gets if collection contains message with the specified UID.
            </summary>
            <param name="uid">Message UID to check.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Clear">
            <summary>
            Removes all messages from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.MessageExists(System.Int32)">
            <summary>
            Checks if message exists. NOTE marked for delete messages returns false.
            </summary>
            <param name="sequenceNo">Message 1 based sequence number.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.GetTotalMessagesSize">
            <summary>
            Gets messages total sizes. NOTE messages marked for deletion is excluded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.ResetDeletedFlag">
            <summary>
            Resets deleted flags on all messages.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_MessageCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Count">
            <summary>
            Gets number of messages in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_MessageCollection.Item(System.Int32)">
            <summary>
            Gets a POP3_Message object in the collection by index number.
            </summary>
            <param name="index">An Int32 value that specifies the position of the POP3_Message object in the POP3_MessageCollection collection.</param>
        </member>
        <member name="T:LumiSoft.Net.Mime.ContentTransferEncoding_enum">
            <summary>
            Rfc 2045 6. Content-Transfer-Encoding. Specified how entity data is encoded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum._7bit">
            <summary>
            Rfc 2045 2.7. 7bit data.
            "7bit data" refers to data that is all represented as relatively
            short lines with 998 octets or less between CRLF line separation
            sequences [RFC-821].  No octets with decimal values greater than 127
            are allowed and neither are NULs (octets with decimal value 0).  CR
            (decimal value 13) and LF (decimal value 10) octets only occur as
            part of CRLF line separation sequences.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum._8bit">
            <summary>
            Rfc 2045 2.8. 8bit data.
            "8bit data" refers to data that is all represented as relatively
            short lines with 998 octets or less between CRLF line separation
            sequences [RFC-821]), but octets with decimal values greater than 127
            may be used.  As with "7bit data" CR and LF octets only occur as part
            of CRLF line separation sequences and no NULs are allowed.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.Binary">
            <summary>
            Rfc 2045 2.9. Binary data.
            "Binary data" refers to data where any sequence of octets whatsoever is allowed.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.QuotedPrintable">
            <summary>
            Rfc 2045 6.7 Quoted-Printable Content-Transfer-Encoding.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.Base64">
            <summary>
            Rfc 2045 6.8 Base64 Content-Transfer-Encoding.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.NotSpecified">
            <summary>
            Content-Transfer-Encoding field isn't available(doesn't exist).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Mime.ContentTransferEncoding_enum.Unknown">
            <summary>
            Content transfer encoding is unknown.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Session">
            <summary>
            IMAP session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.#ctor(System.String,LumiSoft.Net.SocketEx,LumiSoft.Net.BindInfo,LumiSoft.Net.IMAP.Server.IMAP_Server)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="socket">Server connected socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
            <param name="server">Reference to server.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.StartSession">
            <summary>
            Starts session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.EndSession">
            <summary>
            Ends session, closes socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.Kill">
            <summary>
            Kill this session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.OnSessionTimeout">
            <summary>
            Is called by server when session has timed out.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.OnError(System.Exception)">
            <summary>
            Is called when error occures.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.BeginRecieveCmd">
            <summary>
            Starts recieveing command.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.EndRecieveCmd(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called if command is recieved.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.SwitchCommand(System.String)">
            <summary>
            Executes IMAP command.
            </summary>
            <param name="IMAP_commandTxt">Original command text.</param>
            <returns>Returns true if must end session(command loop).</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.BeginAppendCmd(System.String,System.String)">
            <summary>
            Returns true if command ended syncronously.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Session.EndAppendCmd(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when DATA command is finnished.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Session.SelectedMailbox">
            <summary>
            Gets selected mailbox.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs">
            <summary>
            Provides data for GetUserACL event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="folderName">Folder name which ACL to get.</param>
            <param name="userName">User name which ACL to get.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.Folder">
            <summary>
            Gets folder name which ACL to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.UserName">
            <summary>
            Gets user name which ACL to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.ACL">
            <summary>
            Gets or sets user permissions(ACL) for specified folder.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_GetUserACL_eArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.FTP.Server.FTP_Session">
            <summary>
            FTP Session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.#ctor(System.String,LumiSoft.Net.SocketEx,LumiSoft.Net.BindInfo,LumiSoft.Net.FTP.Server.FTP_Server)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="socket">Server connected socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
            <param name="server">Reference to server.</param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.StartSession">
            <summary>
            Starts session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.EndSession">
            <summary>
            Ends session, closes socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.Kill">
            <summary>
            Kill this session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnSessionTimeout">
            <summary>
            Is called by server when session has timed out.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.OnError(System.Exception)">
            <summary>
            Is called when error occures.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.BeginRecieveCmd">
            <summary>
            Starts recieveing command.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.EndRecieveCmd(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called if command is recieved.
            </summary>
            <param name="result"></param>
            <param name="exception"></param>
            <param name="count"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.FTP.Server.FTP_Session.SwitchCommand(System.String)">
            <summary>
            Parses and executes POP3 commmand.
            </summary>
            <param name="commandTxt">FTP command text.</param>
            <returns>Returns true,if session must be terminated.</returns>
        </member>
        <member name="P:LumiSoft.Net.FTP.Server.FTP_Session.PassiveMode">
            <summary>
            Gets if sessions is in passive mode.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DnsCacheEntry">
            <summary>
            Dns cache entry.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCacheEntry.#ctor(LumiSoft.Net.Dns.Client.DnsServerResponse,System.DateTime)">
            <summary>
            Default constructor.
            </summary>
            <param name="answers">Dns answers.</param>
            <param name="addTime">Entry add time.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsCacheEntry.Answers">
            <summary>
            Gets dns answers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsCacheEntry.Time">
            <summary>
            Gets entry add time.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.DnsCache">
            <summary>
            This class implements dns query cache.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.#cctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.GetFromCache(System.String,System.Int32)">
            <summary>
            Tries to get dns records from cache, if any.
            </summary>
            <param name="qname"></param>
            <param name="qtype"></param>
            <returns>Returns null if not in cache.</returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.AddToCache(System.String,System.Int32,LumiSoft.Net.Dns.Client.DnsServerResponse)">
            <summary>
            Adds dns records to cache. If old entry exists, it is replaced.
            </summary>
            <param name="qname"></param>
            <param name="qtype"></param>
            <param name="answers"></param>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.ClearCache">
            <summary>
            Clears DNS cache.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.SerializeCache">
            <summary>
            Serializes current cache.
            </summary>
            <returns>Return serialized cache.</returns>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.DnsCache.DeSerializeCache(System.Byte[])">
            <summary>
            DeSerializes stored cache.
            </summary>
            <param name="cacheData">This value must be DnsCache.SerializeCache() method value.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.DnsCache.CacheTime">
            <summary>
            Gets or sets how long(seconds) to cache dns query.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.CNAME_Record">
            <summary>
            CNAME record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.CNAME_Record.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="alias">Alias.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.CNAME_Record.Alias">
            <summary>
            Gets alias.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketEx">
            <summary>
            This class implements extended socket, provides usefull methods for reading and writing data to socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Socket wrapper. NOTE: You must pass connected socket here !
            </summary>
            <param name="socket">Socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Dispose">
            <summary>
            Clean up any resouces being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.Net.IPEndPoint)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="endpoint">IP endpoint where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="endpoint">IP endpoint where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="host">Host name or IP where to connect.</param>
            <param name="port">TCP port number where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to the specified host.
            </summary>
            <param name="host">Host name or IP where to connect.</param>
            <param name="port">TCP port number where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Disconnect">
            <summary>
            Disconnects socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shutdowns socket.
            </summary>
            <param name="how"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Bind(System.Net.EndPoint)">
            <summary>
            Associates a Socket with a local endpoint.
            </summary>
            <param name="loaclEP"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Listen(System.Int32)">
            <summary>
            Places a Socket in a listening state.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue. </param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Accept(System.Boolean)">
            <summary>
            TODO:
            </summary>
            <param name="ssl"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.SwitchToSSL(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Switches socket to SSL mode. Throws excpetion is socket is already in SSL mode.
            </summary>
            <param name="certificate">Certificate to use for SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.SwitchToSSL_AsClient">
            <summary>
            Switches socket to SSL mode. Throws excpetion is socket is already in SSL mode.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadByte">
            <summary>
            Reads byte from socket. Returns readed byte or -1 if socket is shutdown and tehre is no more data available.
            </summary>
            <returns>Returns readed byte or -1 if socket is shutdown and tehre is no more data available.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLine">
            <summary>
            Reads line from socket. Maximum line length is 4000 bytes. NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLine(System.Int32)">
            <summary>
            Reads line from socket.NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="maxLineLength">Maximum line length in bytes.</param>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLineByte(System.Int32)">
            <summary>
            Reads line from socket.NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="maxLineLength">Maximum line length in bytes.</param>
            <returns>Returns readed line.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadLine(System.IO.Stream,System.Int32)">
            <summary>
            Reads line from socket and stores it to specified stream. NOTE: CRLF isn't written to destination stream.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="stream">Stream where to store readed line.</param>
            <param name="maxLineLength">Maximum line length in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadSpecifiedLength(System.Int32,System.IO.Stream)">
            <summary>
            Reads specified length of data from socket and store to specified stream.
            </summary>
            <param name="lengthToRead">Specifies how much data to read from socket.</param>
            <param name="storeStream">Stream where to store data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadPeriodTerminated(System.Int32)">
            <summary>
            Reads period terminated string. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;".
            When a line of text is received, it checks the line. If the line is composed of a single period,
            it is treated as the end of data indicator.  If the first character is a period and there are 
            other characters on the line, the first character is deleted.
            If maximum allowed data length is exceeded data is read to end, but isn't stored to buffer and exception
            is thrown after data reading.
            </summary>
            <param name="maxLength">Maximum data length in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.ReadPeriodTerminated(System.IO.Stream,System.Int32)">
            <summary>
            Reads period terminated data. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;".
            When a line of text is received, it checks the line. If the line is composed of a single period,
            it is treated as the end of data indicator.  If the first character is a period and there are 
            other characters on the line, the first character is deleted.
            If maximum allowed data length is exceeded data is read to end, but isn't stored to stream and exception
            is thrown after data reading.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLength">Maximum data length in bytes.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.String)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="data">Data to write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.Byte[])">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="data">Data to to wite to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="data">Data to to wite to socket.</param>
            <param name="offset">Offset in data from where to start sending data.</param>
            <param name="length">Lengh of data to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.IO.Stream)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="stream">Stream which data to write to socket. Reading starts from stream current position and will be readed to EOS.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.Write(System.IO.Stream,System.Int64)">
            <summary>
            Writes specified data to socket.
            </summary>
            <param name="stream">Stream which data to write to socket. Reading starts from stream current position and specified count will be readed.</param>
            <param name="count">Number of bytes to read from stream and write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WriteLine(System.String)">
            <summary>
            Writes specified line to socket. If line isn't CRLF terminated, CRLF is added automatically.
            </summary>
            <param name="line">Line to write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WriteLine(System.Byte[])">
            <summary>
            Writes specified line to socket. If line isn't CRLF terminated, CRLF is added automatically.
            </summary>
            <param name="line">Line to write to socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WritePeriodTerminated(System.String)">
            <summary>
            Writes period terminated string to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="data">String data to write.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.WritePeriodTerminated(System.IO.Stream)">
            <summary>
            Writes period terminated data to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="stream">Stream which data to write. Reading begins from stream current position and is readed to EOS.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginReadLine(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins reading line from socket asynchrounously.
            If maximum allowed line length is exceeded line is read to end, but isn't stored to buffer and exception
            is thrown after line reading.
            </summary>
            <param name="stream">Stream where to store readed line.</param>
            <param name="maxLineLength">Maximum line length in bytes.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous line read operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.TryToReadLine(LumiSoft.Net.SocketCallBack,System.Object,System.IO.Stream,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tries to read line from socket data buffer. If buffer doesn't contain line, 
            next buffer data block is getted asynchronously and this method is called again.
            </summary>
            <param name="callback">The method to be called when the asynchronous line read operation is completed.</param>
            <param name="tag">User data.</param>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLineLength">Specifies maximum line legth.</param>
            <param name="lastByte">Last byte what was readed pevious method call or -1 if first method call.</param>
            <param name="readedCount">Specifies count of bytes readed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginReadLineBufferingCompleted(System.Exception,System.Object)">
            <summary>
            This method is called after asynchronous data buffering is completed.
            </summary>
            <param name="x">Exception what happened on method execution or null, if operation completed sucessfully.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginReadSpecifiedLength(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins reading specified amount of data from socket asynchronously.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="lengthToRead">Specifies number of bytes to read from socket.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous read operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.TryToReadReadSpecifiedLength(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack,System.Int32)">
            <summary>
            Tries to read specified length of data from socket data buffer. If buffer doesn't contain data, 
            next buffer data block is getted asynchronously and this method is called again.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="lengthToRead">Specifies number of bytes to read from socket.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous read operation is completed.</param>
            <param name="readedCount">Specifies count of bytes readed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginReadSpecifiedLengthBufferingCompleted(System.Exception,System.Object)">
            <summary>
            This method is called after asynchronous data buffering is completed.
            </summary>
            <param name="x">Exception what happened on method execution or null, if operation completed sucessfully.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginReadPeriodTerminated(System.IO.Stream,System.Int32,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins reading period terminated data. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;".
            When a line of text is received, it checks the line. If the line is composed of a single period,
            it is treated as the end of data indicator.  If the first character is a period and there are 
            other characters on the line, the first character is deleted.
            If maximum allowed data length is exceeded data is read to end, but isn't stored to stream and exception
            is thrown after data reading.
            </summary>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLength">Maximum data length in bytes.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous read operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.TryToReadPeriodTerminated(LumiSoft.Net.SocketCallBack,System.Object,System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Tries to read period terminated data from socket data buffer. If buffer doesn't contain 
            period terminated data,next buffer data block is getted asynchronously and this method is called again.
            </summary>
            <param name="callback">The method to be called when the asynchronous period terminated read operation is completed.</param>
            <param name="tag">User data.</param>
            <param name="stream">Stream where to store readed data.</param>
            <param name="maxLength">Specifies maximum data legth in bytes.</param>
            <param name="readedCount">Specifies count of bytes readed.</param>
            <param name="lastByte">Last byte what was readed pevious method call or -1 if first method call.</param>
            <param name="lineBreak">Specifies if there is active line break.</param>
            <param name="expectCRLF">Specifies if terminating CRLF is expected.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginReadPeriodTerminatedBufferingCompleted(System.Exception,System.Object)">
            <summary>
            This method is called after asynchronous data buffering is completed.
            </summary>
            <param name="x">Exception what happened on method execution or null, if operation completed sucessfully.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWrite(System.IO.Stream,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins writing specified data to socket.
            </summary>
            <param name="stream">Stream which data to write to socket. Reading starts from stream current position and will be readed to EOS.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginProcessingWrite(System.IO.Stream,System.Object,LumiSoft.Net.SocketCallBack,System.Int32)">
            <summary>
            Starts sending data block to socket.
            </summary>
            <param name="stream">Stream which data to write.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="countSent">Specifies how many data is sent.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginWriteCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous datablock send is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWriteLine(System.String,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins specified line sending to socket asynchronously.
            </summary>
            <param name="line">Line to send.</param>
            <param name="callback">The method to be called when the asynchronous line write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWriteLine(System.String,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins specified line sending to socket asynchronously.
            </summary>
            <param name="line">Line to send.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous line write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginWriteLineCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous WriteLine is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWritePeriodTerminated(System.IO.Stream,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins writing period terminated data to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="stream">Stream which data to write. Reading begins from stream current position and is readed to EOS.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginWritePeriodTerminated(System.IO.Stream,System.Boolean,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Begins writing period terminated data to socket. The data is terminated by a line containing only a period, that is,
            the character sequence "&lt;CRLF&gt;.&lt;CRLF&gt;". Before sending a line of text, check the first
            character of the line.If it is a period, one additional period is inserted at the beginning of the line.
            </summary>
            <param name="stream">Stream which data to write. Reading begins from stream current position and is readed to EOS.</param>
            <param name="closeStream">Specifies if stream is closed after write operation has completed.</param>
            <param name="tag">User data.</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginProcessingWritePeriodTerminated(LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State)">
            <summary>
            Reads data block from state.Stream and begins writing it to socket.
            This method is looped while all data has been readed from state.Stream, then sate.Callback is called.
            </summary>
            <param name="state">State info.</param>        
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginWritePeriodTerminatedCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous datablock send is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.SendTo(System.Byte[],System.Net.EndPoint)">
            <summary>
            Sends data to the specified end point.
            </summary>
            <param name="data">Data to send.</param>
            <param name="remoteEP">Remote endpoint where to send data.</param>
            <returns>Returns number of bytes actualy sent.</returns>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BufferDataBlock">
            <summary>
            Buffers data from socket if needed. If there is data in buffer, no buffering is done.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.BeginBufferDataBlock(LumiSoft.Net.SocketEx.BufferDataBlockCompleted,System.Object)">
            <summary>
            Start buffering data from socket asynchronously.
            </summary>
            <param name="callback">The method to be called when the asynchronous data buffering operation is completed.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketEx.OnBeginBufferDataBlockCallback(System.IAsyncResult)">
            <summary>
            This method is called after asynchronous BeginBufferDataBlock is completed.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.Encoding">
            <summary>
            Gets or sets socket default encoding. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.Logger">
            <summary>
            Gets or sets logging source. If this is setted, reads/writes are logged to it.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.RawSocket">
            <summary>
            Gets raw uderlaying socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.Connected">
            <summary>
            Gets if socket is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.SSL">
            <summary>
            Gets if socket is connected via SSL.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.ReadedCount">
            <summary>
            Gets how many bytes are readed through this socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.WrittenCount">
            <summary>
            Gets how many bytes are written through this socket.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx.LastActivity">
            <summary>
            Gets when was last socket(read or write) activity.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State">
            <summary>
            BeginWritePeriodTerminated state obejct.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.#ctor(System.IO.Stream,System.Boolean,System.Object,LumiSoft.Net.SocketCallBack)">
            <summary>
            Default constructor.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="closeStream">Specifies if stream must be closed after reading is completed.</param>
            <param name="tag">User data.</param>
            <param name="callback">Callback what to call if asynchronous data writing completes.</param>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.Stream">
            <summary>
            Gets source stream.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.CloseStream">
            <summary>
            Gets if stream must be closed if reading completed.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.Tag">
            <summary>
            Gets user data.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.Callback">
            <summary>
            Gets callback what must be called if asynchronous write ends.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.HasCRLF">
            <summary>
            Gets or sets if last sent data ends with CRLF.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.LastByte">
            <summary>
            Gets or sets what is last sent byte.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketEx._BeginWritePeriodTerminated_State.CountSent">
            <summary>
            Gets or sets how many bytes has written to socket.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ServerTransactionState">
            <summary>
            SIP server transaction state.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ServerTransactionState.Proceeding">
            <summary>
            This is transaction initial state. Used only in INVITE transaction.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ServerTransactionState.Trying">
            <summary>
            This is transaction initial state. Used only in Non-INVITE transaction.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ServerTransactionState.Completed">
            <summary>
            Transaction has got final response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ServerTransactionState.Confirmed">
            <summary>
            Transation has got ACK from request maker. This is used only in INVITE.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ServerTransactionState.Terminated">
            <summary>
            Transaction has terminated.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs">
            <summary>
            This class provides data for SIP_Core.OnRequestReceived method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs.#ctor(LumiSoft.Net.SIP.Stack.SIP_Stack,LumiSoft.Net.SIP.Stack.SIP_Request)">
            <summary>
            Default constructor.
            </summary>
            <param name="stack">Reference to SIP stack.</param>
            <param name="request">Recieved request.</param>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs.Request">
            <summary>
            Gets request received by SIP stack.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs.ServerTransaction">
            <summary>
            Gets server transaction for that request. Server transaction is created when this property is 
            first accessed. If you don't need server transaction for that request, for example statless proxy, 
            just don't access this property. For ACK method, this method always return null, because ACK 
            doesn't create transaction !
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Stack.SIP_RequestReceivedEventArgs.Dialog">
            <summary>
            Gets SIP dialog where Request belongs to. Returns null if Request doesn't belong any dialog.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_AddressParam">
            <summary>
            Implements SIP_t_NameAddress + parameters value.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP_t_NameAddress + parameters value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.Parse(System.String)">
            <summary>
            Parses this from specified value.
            </summary>
            <param name="value">Address + params value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses this from address param string.
            </summary>
            <param name="reader">Reader what contains address param string.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.ToStringValue">
            <summary>
            Converts this to valid value string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AddressParam.Address">
            <summary>
            Gets address.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_AlertParam">
            <summary>
            Implements SIP "alert-param" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                alert-param = LAQUOT absoluteURI RAQUOT *( SEMI generic-param )
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AlertParam.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AlertParam.Parse(System.String)">
            <summary>
            Parses "alert-param" from specified value.
            </summary>
            <param name="value">SIP "alert-param" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AlertParam.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "alert-param" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AlertParam.ToStringValue">
            <summary>
            Converts this to valid "alert-param" value.
            </summary>
            <returns>Returns "alert-param" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AlertParam.Uri">
            <summary>
            Gets or sets uri value.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_Language">
            <summary>
            Implements SIP "language" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                language       = language-range *(SEMI accept-param)
                language-range = ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) / "*" )
                accept-param   = ("q" EQUAL qvalue) / generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Language.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Language.Parse(System.String)">
            <summary>
            Parses "language" from specified value.
            </summary>
            <param name="value">SIP "language" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Language.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "language" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_Language.ToStringValue">
            <summary>
            Converts this to valid "language" value.
            </summary>
            <returns>Restuns "language" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Language.LanguageRange">
            <summary>
            Gets or sets language range. Value *(STAR) means all languages.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_Language.QValue">
            <summary>
            Gets or sets qvalue parameter. Targets are processed from highest qvalue to lowest. 
            This value must be between 0.0 and 1.0. Value -1 means that value not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketLogger">
            <summary>
            Socket logger.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.#ctor(System.Net.Sockets.Socket,LumiSoft.Net.LogEventHandler)">
            <summary>
            Default constructor.
            </summary>
            <param name="socket"></param>
            <param name="logHandler"></param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.LogEntriesToString(LumiSoft.Net.SocketLogger,System.Boolean,System.Boolean)">
            <summary>
            Converts log entries to string.
            </summary>
            <param name="logger">Socket logger.</param>
            <param name="firstLogPart">Specifies if first log part of multipart log.</param>
            <param name="lastLogPart">Specifies if last log part (logging ended).</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.AddReadEntry(System.String,System.Int64)">
            <summary>
            Adds data read(from remoteEndpoint) entry.
            </summary>
            <param name="text">Log text.</param>
            <param name="size">Readed text size.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.AddSendEntry(System.String,System.Int64)">
            <summary>
            Adds data send(to remoteEndpoint) entry.
            </summary>
            <param name="text">Log text.</param>
            <param name="size">Sent text size.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.AddTextEntry(System.String)">
            <summary>
            Adds free text entry.
            </summary>
            <param name="text">Log text.</param>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.Flush">
            <summary>
            Requests to write all in memory log entries to log log file.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SocketLogger.OnEntryAdded">
            <summary>
            This method is called when new loge entry has added.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.SessionID">
            <summary>
            Gets or sets session ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.UserName">
            <summary>
            Gets or sets authenticated user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.LogEntries">
            <summary>
            Gets current cached log entries.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.LocalEndPoint">
            <summary>
            Gets local endpoint.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SocketLogger.RemoteEndPoint">
            <summary>
            Gets remote endpoint.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketCallBack">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SocketCallBackResult">
            <summary>
            Asynchronous command execute result.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.Ok">
            <summary>
            Operation was successfull.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.LengthExceeded">
            <summary>
            Exceeded maximum allowed size.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.SocketClosed">
            <summary>
            Connected client closed connection.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SocketCallBackResult.Exception">
            <summary>
            Exception happened.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Proxy.SIP_ForkingMode">
            <summary>
            This enum specifies SIP proxy server 'forking' mode.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ForkingMode.None">
            <summary>
            No forking. The contact with highest q value is used.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ForkingMode.Parallel">
            <summary>
            All contacts are processed parallel at same time.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Proxy.SIP_ForkingMode.Sequential">
            <summary>
            Contacts are processed from highest q value to lower.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream">
            <summary>
            Provides data to POP3 server event GetMessageStream.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.#ctor(LumiSoft.Net.POP3.Server.POP3_Session,LumiSoft.Net.POP3.Server.POP3_Message)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to current POP3 session.</param>
            <param name="messageInfo">Message info what message items to get.</param>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.Session">
            <summary>
            Gets reference to current POP3 session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.MessageInfo">
            <summary>
            Gets message info what message stream to get.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.CloseMessageStream">
            <summary>
            Gets or sets if message stream is closed automatically if all actions on it are completed.
            Default value is true.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.MessageStream">
            <summary>
            Gets or sets message stream. When setting this property Stream position must be where message begins.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.MessageSize">
            <summary>
            Gets message size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.POP3.Server.POP3_eArgs_GetMessageStream.MessageExists">
            <summary>
            Gets or sets if message exists. Set this false, if message actually doesn't exist any more.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.NNTP.Client.NNTP_Client">
            <summary>
            NNTP client. Definex in RFC 977.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.Connect(System.String,System.Int32)">
            <summary>
            Connects to specified NNTP server.
            </summary>
            <param name="server">NNTP server.</param>
            <param name="port">NNTP server port. Defualt NNTP port is 119.</param>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.Disconnect">
            <summary>
            Disconnects from NNTP server, trys to send QUIT command before.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.GetNewsGroups">
            <summary>
            Gets NNTP newsgoups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.NNTP.Client.NNTP_Client.PostMessage(System.String,System.IO.Stream)">
            <summary>
            Posts specified message to the specified newsgroup.
            </summary>
            <param name="newsgroup">Newsgroup where to post message.</param>
            <param name="message">Message to post. Message is taken from stream current position.</param>
        </member>
        <member name="P:LumiSoft.Net.NNTP.Client.NNTP_Client.Connected">
            <summary>
            Gets if NNTP client is connected.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.Plain">
            <summary>
            Plain username/password authentication.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.APOP">
            <summary>
            APOP
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.LOGIN">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.CRAM_MD5">
            <summary>
            Cram-md5 authentication.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.AuthType.DIGEST_MD5">
            <summary>
            DIGEST-md5 authentication.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Core">
            <summary>
            Provides net core utility methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Core.ScanInvalid_CR_or_LF(System.IO.Stream)">
            <summary>
            Scans invalid CR or LF combination in stream. Returns true if contains invalid CR or LF combination.
            </summary>
            <param name="strm">Stream which to check.</param>
            <returns>Returns true if contains invalid CR or LF combination.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.GetHostName(System.Net.IPAddress)">
            <summary>
            Gets host name. If fails returns 'UnkownHost'.
            </summary>
            <param name="IP"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.GetArgsText(System.String,System.String)">
            <summary>
            Gets argument part of command text.
            </summary>
            <param name="input">Input srting from where to remove value.</param>
            <param name="cmdTxtToRemove">Command text which to remove.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsNumber(System.String)">
            <summary>
            Checks if specified string is number(long).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <param name="padd">Padd missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64Decode(System.Byte[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.QuotedPrintableEncode(System.Byte[])">
            <summary>
            Encodes data with quoted-printable encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.QuotedPrintableDecode(System.Byte[])">
            <summary>
            quoted-printable decoder. Defined in RFC 2045 6.7.
            </summary>
            <param name="data">Data which to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.QDecode(System.Text.Encoding,System.String)">
            <summary>
            "Q" decoder. This is same as quoted-printable, except '_' is converted to ' '.
            Defined in RFC 2047 4.2.
            </summary>
            <param name="encoding">Input string encoding.</param>
            <param name="data">String which to encode.</param>
            <returns>Returns decoded string.</returns>		
        </member>
        <member name="M:LumiSoft.Net.Core.CanonicalDecode(System.String)">
            <summary>
            Canonical decoding. Decodes all canonical encoding occurences in specified text.
            Usually mime message header unicode/8bit values are encoded as Canonical.
            Format: =?charSet?type[Q or B]?encoded_string?= .
            Defined in RFC 2047.
            </summary>
            <param name="text">Text to decode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.CanonicalEncode(System.String,System.String)">
            <summary>
            Canonical encoding.
            </summary>
            <param name="str">String to encode.</param>
            <param name="charSet">With what charset to encode string. If you aren't sure about it, utf-8 is suggested.</param>
            <returns>Returns encoded text.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Encode_IMAP_UTF7_String(System.String)">
            <summary>
            Encodes specified data with IMAP modified UTF7 encoding. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            Example: öö is encoded to &amp;APYA9g-.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.Decode_IMAP_UTF7_String(System.String)">
            <summary>
            Decodes IMAP modified UTF7 encoded data. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            Example: &amp;APYA9g- is decoded to öö.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsAscii(System.String)">
            <summary>
            Checks if specified string data is acii data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.GetFileNameFromPath(System.String)">
            <summary>
            Gets file name from path.
            </summary>
            <param name="filePath">File file path with file name. For examples: c:\fileName.xxx, aaa\fileName.xxx.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsIP(System.String)">
            <summary>
            Gets if specified value is IP address.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified value is IP address.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.CompareIP(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares 2 IP addresses. Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </summary>
            <param name="source">Source IP address.</param>
            <param name="destination">Destination IP address.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ToHexString(System.String)">
            <summary>
            Converts string to hex string.
            </summary>
            <param name="data">String to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ToHex(System.Byte)">
            <summary>
            Convert byte to hex data.
            </summary>
            <param name="byteValue">Byte to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ToHex(System.Byte[])">
            <summary>
            Converts data to hex data.
            </summary>
            <param name="data">Data to convert.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Core.ComputeMd5(System.String)">
            <summary>
            Computes md5 hash. Value is 32 char hex string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.IMAP.IMAP_MessageFlags">
            <summary>
            IMAP message flags.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.None">
            <summary>
            No flags defined.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Seen">
            <summary>
            Message has been read.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Answered">
            <summary>
            Message has been answered.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Flagged">
            <summary>
            Message is "flagged" for urgent/special attention.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Deleted">
            <summary>
            Message is "deleted" for removal by later EXPUNGE.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Draft">
            <summary>
            Message has not completed composition.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.IMAP.IMAP_MessageFlags.Recent">
            <summary>
            Message is "recently" arrived in this mailbox.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.TXT_Record">
            <summary>
            TXT record class.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Dns.Client.TXT_Record.#ctor(System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="text">Text.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="P:LumiSoft.Net.Dns.Client.TXT_Record.Text">
            <summary>
            Gets text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection">
            <summary>
            IMAP messages info collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.Add(System.String,System.Int64,System.DateTime,System.Int64,LumiSoft.Net.IMAP.IMAP_MessageFlags)">
            <summary>
            Adds new message info to the collection.
            </summary>
            <param name="id">Message ID.</param>
            <param name="uid">Message IMAP UID value.</param>
            <param name="internalDate">Message store date.</param>
            <param name="size">Message size in bytes.</param>
            <param name="flags">Message flags.</param>
            <returns>Returns added IMAp message info.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.Remove(LumiSoft.Net.IMAP.Server.IMAP_Message)">
            <summary>
            Removes specified IMAP message from the collection.
            </summary>
            <param name="message">IMAP message to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.ContainsUID(System.Int64)">
            <summary>
            Gets collection contains specified message with specified UID.
            </summary>
            <param name="uid">Message UID.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.IndexOf(LumiSoft.Net.IMAP.Server.IMAP_Message)">
            <summary>
            Gets index of specified message in the collection.
            </summary>
            <param name="message">Message indesx to get.</param>
            <returns>Returns index of specified message in the collection or -1 if message doesn't belong to this collection.</returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.Clear">
            <summary>
            Removes all messages from the collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.GetWithFlags(LumiSoft.Net.IMAP.IMAP_MessageFlags)">
            <summary>
            Gets messages which has specified flags set.
            </summary>
            <param name="flags">Flags to match.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.Count">
            <summary>
            Gets number of messages in the collection.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_MessageCollection.Item(System.Int32)">
            <summary>
            Gets a IMAP_Message object in the collection by index number.
            </summary>
            <param name="index">An Int32 value that specifies the position of the IMAP_Message object in the IMAP_MessageCollection collection.</param>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota">
            <summary>
            Provides data for GetUserQuota event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota.MaxMailboxSize">
            <summary>
            Gets or sets maximum mailbox size.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetQuota.MailboxSize">
            <summary>
            Gets or sets current mailbox size.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes">
            <summary>
            This class holds SIP respnse codes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x100_Trying">
            <summary>
            This response indicates that the request has been received by the
            next-hop server and that some unspecified action is being taken on
            behalf of this call (for example, a database is being consulted).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x180_Ringing">
            <summary>
            The UA receiving the INVITE is trying to alert the user.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x181_Call_Forwarded">
            <summary>
            A server MAY use this status code to indicate that the call is being
            forwarded to a different set of destinations.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x182_Queued">
            <summary>
            The called party is temporarily unavailable, but the server has
            decided to queue the call rather than reject it.  When the callee
            becomes available, it will return the appropriate final status response.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x183_Session_Progress">
            <summary>
            The 183 (Session Progress) response is used to convey information
            about the progress of the call that is not otherwise classified.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x200_Ok">
            <summary>
            The request has succeeded.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x202_Ok">
            <summary>
            The request has accepted. Defined in rfc 3265.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x400_Bad_Request">
            <summary>
            The request could not be understood due to malformed syntax.  The
            Reason-Phrase SHOULD identify the syntax problem in more detail, for
            example, "Missing Call-ID header field".
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x401_Unauthorized">
            <summary>
            The request requires user authentication.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x403_Forbidden">
            <summary>
            The server understood the request, but is refusing to fulfill it.
            Authorization will not help, and the request SHOULD NOT be repeated.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x404_Not_Found">
            <summary>
            The server has definitive information that the user does not exist at
            the domain specified in the Request-URI.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x405_Method_Not_Allowed">
            <summary>
            The method specified in the Request-Line is understood, but not
            allowed for the address identified by the Request-URI.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x406_Not_Acceptable">
            <summary>
            The resource identified by the request is only capable of generating
            response entities that have content characteristics not acceptable
            according to the Accept header field sent in the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x407_Proxy_Authentication_Required">
            <summary>
            This code is similar to 401 (Unauthorized), but indicates that the
            client MUST first authenticate itself with the proxy.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x408_Request_Timeout">
            <summary>
            The server could not produce a response within a suitable amount of
            time, for example, if it could not determine the location of the user in time.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x410_Gone">
            <summary>
            The requested resource is no longer available at the server and no
            forwarding address is known.  This condition is expected to be
            considered permanent.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x412_Conditional_Request_Failed">
            <summary>
            Is used to indicate that the precondition given for the request has failed. Defined in rfc 3903.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x413_Request_Entity_Too_Large">
            <summary>
            The server is refusing to process a request because the request
            entity-body is larger than the server is willing or able to process.
            The server MAY close the connection to prevent the client from
            continuing the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x414_RequestURI_Too_Long">
            <summary>
            The server is refusing to service the request because the Request-URI
            is longer than the server is willing to interpret.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x415_Unsupported_Media_Type">
            <summary>
            The server is refusing to service the request because the message
            body of the request is in a format not supported by the server for
            the requested method.  The server MUST return a list of acceptable
            formats using the Accept, Accept-Encoding, or Accept-Language header
            field, depending on the specific problem with the content.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x416_Unsupported_URI_Scheme">
            <summary>
            The server cannot process the request because the scheme of the URI
            in the Request-URI is unknown to the server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x417_Unknown_Resource_Priority">
            <summary>
            TODO: add description. Defined in rfc 4412.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x420_Bad_Extension">
            <summary>
            The server did not understand the protocol extension specified in a
            Proxy-Require or Require header field.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x421_Extension_Required">
            <summary>
            The UAS needs a particular extension to process the request, but this
            extension is not listed in a Supported header field in the request.
            Responses with this status code MUST contain a Require header field
            listing the required extensions.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x422_Session_Interval_Too_Small">
            <summary>
            It is generated by a UAS or proxy when a request contains a Session-Expires header field 
            with a duration below the minimum timer for the server. The 422 response MUST contain a Min-SE
            header field with the minimum timer for that server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x423_Interval_Too_Brief">
            <summary>
            The server is rejecting the request because the expiration time of
            the resource refreshed by the request is too short.  This response
            can be used by a registrar to reject a registration whose Contact
            header field expiration time was too small.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x428_Use_Identity_Header">
            <summary>
            It is used when the verifier receives a message with an Identity signature that does not 
            correspond to the digest-string calculated by the verifier. Defined in rfc 4474.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x429_Provide_Referrer_Identity">
            <summary>
            TODO: add description. Defined in rfc 3892.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x436_Bad_Identity_Info">
            <summary>
            It is used when the Identity-Info header contains a URI that cannot be dereferenced by the 
            verifier (either the URI scheme is unsupported by the verifier, or the resource designated by
            the URI is otherwise unavailable). Defined in rfc 4474.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x437_Unsupported_Certificate">
            <summary>
            It is used when the verifier cannot validate the certificate referenced by the URI of the 
            Identity-Info header, because, for example, the certificate is self-signed, or signed by a
            root certificate authority for whom the verifier does not possess a root certificate. 
            Defined in rfc 4474.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x438_Invalid_Identity_Header">
            <summary>
            It is used when the verifier receives a message with an Identity signature that does not 
            correspond to the digest-string calculated by the verifier. Defined in rfc 4474.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x480_Temporarily_Unavailable">
            <summary>
            The callee's end system was contacted successfully but the callee is
            currently unavailable (for example, is not logged in, logged in but
            in a state that precludes communication with the callee, or has
            activated the "do not disturb" feature).
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x481_Call_Transaction_Does_Not_Exist">
            <summary>
            This status indicates that the UAS received a request that does not
            match any existing dialog or transaction.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x482_Loop_Detected">
            <summary>
            The server has detected a loop.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x483_Too_Many_Hops">
            <summary>
            The server received a request that contains a Max-Forwards.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x484_Address_Incomplete">
            <summary>
            The server received a request with a Request-URI that was incomplete.
            Additional information SHOULD be provided in the reason phrase.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x485_Ambiguous">
            <summary>
            The Request-URI was ambiguous.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x486_Busy_Here">
            <summary>
            The callee's end system was contacted successfully, but the callee is
            currently not willing or able to take additional calls at this end
            system. The response MAY indicate a better time to call in the
            Retry-After header field.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x487_Request_Terminated">
            <summary>
            The request was terminated by a BYE or CANCEL request. This response
            is never returned for a CANCEL request itself.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x488_Not_Acceptable_Here">
            <summary>
            The response has the same meaning as 606 (Not Acceptable), but only
            applies to the specific resource addressed by the Request-URI and the
            request may succeed elsewhere.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x489_Bad_Event">
            <summary>
            Is used to indicate that the server did not understand the event package specified 
            in a "Event" header field. Defined in rfc 3265.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x491_Request_Pending">
            <summary>
            The request was received by a UAS that had a pending request within
            the same dialog.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x493_Undecipherable">
            <summary>
            The request was received by a UAS that contained an encrypted MIME
            body for which the recipient does not possess or will not provide an
            appropriate decryption key.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x494_Security_Agreement_Required">
            <summary>
            TODO: add description. Defined in rfc 3329.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x500_Server_Internal_Error">
            <summary>
            The server encountered an unexpected condition that prevented it from
            fulfilling the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x501_Not_Implemented">
            <summary>
            The server does not support the functionality required to fulfill the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x502_Bad_Gateway">
            <summary>
            The server, while acting as a gateway or proxy, received an invalid
            response from the downstream server it accessed in attempting to
            fulfill the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x503_Service_Unavailable">
            <summary>
            The server is temporarily unable to process the request due to a
            temporary overloading or maintenance of the server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x504_Timeout">
            <summary>
            The server did not receive a timely response from an external server
            it accessed in attempting to process the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x504_Version_Not_Supported">
            <summary>
            The server does not support, or refuses to support, the SIP protocol
            version that was used in the request.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x513_Message_Too_Large">
            <summary>
            The server was unable to process the request since the message length
            exceeded its capabilities.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x580_Precondition_Failure">
            <summary>
            When a UAS, acting as an answerer, cannot or is not willing to meet the preconditions 
            in the offer. Defined in rfc 3312.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x600_Busy_Everywhere">
            <summary>
            The callee's end system was contacted successfully but the callee is
            busy and does not wish to take the call at this time.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x603_Decline">
            <summary>
            The callee's machine was successfully contacted but the user
            explicitly does not wish to or cannot participate.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x604_Does_Not_Exist_Anywhere">
            <summary>
            The server has authoritative information that the user indicated in
            the Request-URI does not exist anywhere
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_ResponseCodes.x606_Not_Acceptable">
            <summary>
            The user's agent was contacted successfully but some aspects of the
            session description such as the requested media, bandwidth, or
            addressing style were not acceptable.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection">
            <summary>
            SIP header fields collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Add(System.String,System.String)">
            <summary>
            Adds a new header field with specified name and value to the end of the collection.
            </summary>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Add(LumiSoft.Net.SIP.Message.SIP_HeaderField)">
            <summary>
            Adds specified heade field to the end of the collection.
            </summary>
            <param name="headerField">Header field.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts a new header field into the collection at the specified location.
            </summary>
            <param name="index">The location in the collection where you want to add the header field.</param>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Set(System.String,System.String)">
            <summary>
            Sets specified header field value. If header field existst, first found value is set.
            If field doesn't exist, it will be added.
            </summary>
            <param name="fieldName">Header field name.</param>
            <param name="value">Header field value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Remove(System.Int32)">
            <summary>
            Removes header field at the specified index from the collection.
            </summary>
            <param name="index">The index of the header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Remove(LumiSoft.Net.SIP.Message.SIP_HeaderField)">
            <summary>
            Removes specified header field from the collection.
            </summary>
            <param name="field">Header field to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.RemoveFirst(System.String)">
            <summary>
            Removes first header field with specified name.
            </summary>
            <param name="name">Header fields name.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.RemoveAll(System.String)">
            <summary>
            Removes all header fields with specified name from the collection.
            </summary>
            <param name="fieldName">Header field name.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Clear">
            <summary>
            Clears the collection of all header fields.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Contains(System.String)">
            <summary>
            Gets if collection contains specified header field.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Contains(LumiSoft.Net.SIP.Message.SIP_HeaderField)">
            <summary>
            Gets if collection contains specified header field.
            </summary>
            <param name="headerField">Header field.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.GetFirst(System.String)">
            <summary>
            Gets first header field with specified name, returns null if specified field doesn't exist.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Get(System.String)">
            <summary>
            Gets header fields with specified name.
            </summary>
            <param name="fieldName">Header field name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Parse(System.String)">
            <summary>
            Parses header fields from string.
            </summary>
            <param name="headerString">Header string.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Parse(System.IO.Stream)">
            <summary>
            Parses header fields from stream. Stream position stays where header reading ends.
            </summary>
            <param name="stream">Stream from where to parse.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.ToHeaderString">
            <summary>
            Converts header fields to SIP message header string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.GetheaderField(System.String,System.String)">
            <summary>
            Gets right type header field.
            </summary>
            <param name="name">Header field name.</param>
            <param name="value">Header field name.</param>
            <returns>Returns right type header field.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Item(System.Int32)">
            <summary>
            Gets header field from specified index.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_HeaderFieldCollection.Count">
            <summary>
            Gets header fields count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_WarningValue">
            <summary>
            Implements SIP "warning-value" value. Defined in RFC 3261.
            </summary>
            <remarks>
            <code>
            RFC 3261 Syntax:
                warning-value = warn-code SP warn-agent SP warn-text
                warn-code     = 3DIGIT
                warn-agent    = hostport / pseudonym
                                 ;  the name or pseudonym of the server adding
                                 ;  the Warning header, for use in debugging
                warn-text     = quoted-string
                pseudonym     = token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.Parse(System.String)">
            <summary>
            Parses "warning-value" from specified value.
            </summary>
            <param name="value">SIP "warning-value" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "warning-value" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.ToStringValue">
            <summary>
            Converts this to valid "warning-value" value.
            </summary>
            <returns>Returns "warning-value" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.Code">
            <summary>
            Gets or sets warning code.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.Agent">
            <summary>
            Gets or sets name or pseudonym of the server.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_WarningValue.Text">
            <summary>
            Gets or sets warning text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo">
            <summary>
            Implements SIP "Authentication-Info" value. Defined in RFC 3261.
            According RFC 3261 authentication info can contain Digest authentication info only.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">Authentication-Info valu value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.Parse(System.String)">
            <summary>
            Parses "Authentication-Info" from specified value.
            </summary>
            <param name="value">SIP "Authentication-Info" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Authentication-Info" from specified reader.
            </summary>
            <param name="reader">Reader what contains Authentication-Info value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.ToStringValue">
            <summary>
            Converts SIP_t_AuthenticationInfo to valid Authentication-Info value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.NextNonce">
            <summary>
            Gets or sets server next predicted nonce value. Value null means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.Qop">
            <summary>
            Gets or sets QOP value. Value null means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.ResponseAuth">
            <summary>
            Gets or sets rspauth value. Value null means that value not specified.
            This can be only HEX value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.CNonce">
            <summary>
            Gets or sets cnonce value. Value null means that value not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_AuthenticationInfo.NonceCount">
            <summary>
            Gets or sets nonce count. Value -1 means that value not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_Message">
            <summary>
            Implements STUN message. Defined in RFC 3489.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.Parse(System.Byte[])">
            <summary>
            Parses STUN message from raw data packet.
            </summary>
            <param name="data">Raw STUN message.</param>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.ToByteData">
            <summary>
            Converts this to raw STUN packet.
            </summary>
            <returns>Returns raw STUN packet.</returns>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.ParseAttribute(System.Byte[],System.Int32@)">
            <summary>
            Parses attribute from data.
            </summary>
            <param name="data">SIP message data.</param>
            <param name="offset">Offset in data.</param>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.ParseEndPoint(System.Byte[],System.Int32@)">
            <summary>
            Pasrses IP endpoint attribute.
            </summary>
            <param name="data">STUN message data.</param>
            <param name="offset">Offset in data.</param>
            <returns>Returns parsed IP end point.</returns>
        </member>
        <member name="M:LumiSoft.Net.STUN.Message.STUN_Message.StoreEndPoint(LumiSoft.Net.STUN.Message.STUN_Message.AttributeType,System.Net.IPEndPoint,System.Byte[],System.Int32@)">
            <summary>
            Stores ip end point attribute to buffer.
            </summary>
            <param name="type">Attribute type.</param>
            <param name="endPoint">IP end point.</param>
            <param name="message">Buffer where to store.</param>
            <param name="offset">Offset in buffer.</param>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.Type">
            <summary>
            Gets STUN message type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.TransactionID">
            <summary>
            Gets transaction ID.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.MappedAddress">
            <summary>
            Gets or sets IP end point what was actually connected to STUN server. Returns null if not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ResponseAddress">
            <summary>
            Gets or sets IP end point where to STUN client likes to receive response.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ChangeRequest">
            <summary>
            Gets or sets how and where STUN server must send response back to STUN client.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.SourceAddress">
            <summary>
            Gets or sets STUN server IP end point what sent response to STUN client. Value null
            means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ChangedAddress">
            <summary>
            Gets or sets IP end point where STUN server will send response back to STUN client 
            if the "change IP" and "change port" flags had been set in the ChangeRequest.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.UserName">
            <summary>
            Gets or sets user name. Value null means not specified.
            </summary>          
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.Password">
            <summary>
            Gets or sets password. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ErrorCode">
            <summary>
            Gets or sets error info. Returns null if not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ReflectedFrom">
            <summary>
            Gets or sets IP endpoint from which IP end point STUN server got STUN client request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.STUN.Message.STUN_Message.ServerName">
            <summary>
            Gets or sets server name.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_Message.AttributeType">
            <summary>
            Specifies STUN attribute type.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.STUN.Message.STUN_Message.IPFamily">
            <summary>
            Specifies IP address family.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy">
            <summary>
            Implements SIP "Referred-By" value. Defined in RFC 3892.
            </summary>
            <remarks>
            <code>
            RFC 3892 Syntax:
                Referred-By         =  referrer-uri *( SEMI (referredby-id-param / generic-param) )
                referrer-uri        = ( name-addr / addr-spec )
                referredby-id-param = "cid" EQUAL sip-clean-msg-id
                sip-clean-msg-id    = LDQUOT dot-atom "@" (dot-atom / host) RDQUOT
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP 'Referred-By' value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.Parse(System.String)">
            <summary>
            Parses "Referred-By" from specified value.
            </summary>
            <param name="value">SIP "Referred-By" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Referred-By" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.ToStringValue">
            <summary>
            Converts this to valid "Referred-By" value.
            </summary>
            <returns>Returns "Referred-By" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.Address">
            <summary>
            Gets or sets address.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_ReferredBy.CID">
            <summary>
            Gets or sets 'cid' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo">
            <summary>
            Implements SIP "Identity-Info" value. Defined in RFC 4474.
            </summary>
            <remarks>
            <code>
            RFC 4474 Syntax:
                Identity-Info        = ident-info *( SEMI ident-info-params )
                ident-info           = LAQUOT absoluteURI RAQUOT
                ident-info-params    = ident-info-alg / ident-info-extension
                ident-info-alg       = "alg" EQUAL token
                ident-info-extension = generic-param
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP 'Identity-Info' value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.Parse(System.String)">
            <summary>
            Parses "Identity-Info" from specified value.
            </summary>
            <param name="value">SIP "Identity-Info" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Identity-Info" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.ToStringValue">
            <summary>
            Converts this to valid "Identity-Info" value.
            </summary>
            <returns>Returns "Identity-Info" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.Uri">
            <summary>
            Gets or sets URI value.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid 'absoluteURI' value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_IdentityInfo.Alg">
            <summary>
            Gets or sets 'alg' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.vCard.Name">
            <summary>
            vCard name implementation.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Name.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="lastName">Last name.</param>
            <param name="firstName">First name.</param>
            <param name="additionalNames">Comma separated additional names.</param>
            <param name="honorificPrefix">Honorific prefix.</param>
            <param name="honorificSuffix">Honorific suffix.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Name.#ctor">
            <summary>
            Internal parse constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Name.ToValueString">
            <summary>
            Converts item to vCard N structure string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.vCard.Name.Parse(LumiSoft.Net.Mime.vCard.Item)">
            <summary>
            Parses name info from vCard N item.
            </summary>
            <param name="item">vCard N item.</param>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Name.LastName">
            <summary>
            Gets last name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Name.FirstName">
            <summary>
            Gets first name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Name.AdditionalNames">
            <summary>
            Gets comma separated additional names.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Name.HonorificPerfix">
            <summary>
            Gets honorific prefix.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.vCard.Name.HonorificSuffix">
            <summary>
            Gets honorific suffix.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.HeaderFieldParameterCollection">
            <summary>
            Header field parameters collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.#ctor(LumiSoft.Net.Mime.ParametizedHeaderField)">
            <summary>
            Default constructor.
            </summary>
            <param name="headerField">Header field.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Add(System.String,System.String)">
            <summary>
            Adds a new header field parameter with specified name and value to the end of the collection.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <param name="parameterValue">Parameter value.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Remove(System.String)">
            <summary>
            Removes specified header field parameter from the collection.
            </summary>
            <param name="parameterName">The name of the header field parameter to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Clear">
            <summary>
            Clears the collection of all header field parameters.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Contains(System.String)">
            <summary>
            Gets if collection contains specified parameter.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.HeaderFieldParameterCollection.GetEnumerator">
            <summary>
            Gets enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Item(System.String)">
            <summary>
            Gets or sets specified parameter value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.HeaderFieldParameterCollection.Count">
            <summary>
            Gets header field parameters count in the collection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IO.WriteStream_EventArgs">
            <summary>
            This class provides data to asynchronous write from stream methods callback.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IO.WriteStream_EventArgs.#ctor(System.Exception,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="exception">Exception happened during write or null if operation was successfull.</param>
            <param name="stream">Stream which data was written.</param>
            <param name="countReaded">Number of bytes readed from <b>stream</b>.</param>
            <param name="countWritten">Number of bytes written to source stream.</param>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.Exception">
            <summary>
            Gets exception happened during write or null if operation was successfull.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.Stream">
            <summary>
            Gets stream what data was written.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.CountReaded">
            <summary>
            Gets number of bytes readed from <b>Stream</b>.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IO.WriteStream_EventArgs.CountWritten">
            <summary>
            Gets number of bytes written to source stream.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_SearchMatcher">
            <summary>
            IMAP SEARCH message matcher. You can use this class to see if message values match to search criteria.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_SearchMatcher.#ctor(LumiSoft.Net.IMAP.Server.SearchGroup)">
            <summary>
            Deault constuctor.
            </summary>
            <param name="mainSearchGroup">SEARCH command main search group.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_SearchMatcher.Matches(System.Int32,System.Int32,System.Int32,System.DateTime,LumiSoft.Net.IMAP.IMAP_MessageFlags,System.String,System.String)">
            <summary>
            Gets if specified values match search criteria.
            </summary>
            <param name="no">Message sequence number.</param>
            <param name="uid">Message UID.</param>
            <param name="size">Message size in bytes.</param>
            <param name="internalDate">Message INTERNALDATE (dateTime when server stored message).</param>
            <param name="flags">Message flags.</param>
            <param name="header">Message header. This is only needed if this.IsHeaderNeeded is true.</param>
            <param name="bodyText">Message body text (must be decoded unicode text). This is only needed if this.IsBodyTextNeeded is true.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SearchMatcher.IsHeaderNeeded">
            <summary>
            Gets if header is needed for matching.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_SearchMatcher.IsBodyTextNeeded">
            <summary>
            Gets if body text is needed for matching.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.SearchKey">
            <summary>
            IMAP search key (RFC 3501 6.4.4 SEARCH Command).
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.#ctor(System.String,System.Object)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses one search key from current position. Returns null if there isn't any search key left.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.IsHeaderNeeded">
            <summary>
            Gets if message Header is needed for matching.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.IsBodyTextNeeded">
            <summary>
            Gets if message body text is needed for matching.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.Match(System.Int64,System.Int64,System.Int64,System.DateTime,LumiSoft.Net.IMAP.IMAP_MessageFlags,LumiSoft.Net.Mime.Mime,System.String)">
            <summary>
            Gets if specified message matches with this class search-key.
            </summary>
            <param name="no">IMAP message sequence number.</param>
            <param name="uid">IMAP message UID.</param>
            <param name="size">IMAP message size in bytes.</param>
            <param name="internalDate">IMAP message INTERNALDATE (dateTime when server stored message).</param>
            <param name="flags">IMAP message flags.</param>
            <param name="mime">Mime message main header only.</param>
            <param name="bodyText">Message body text.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.SearchKey.ReadString(LumiSoft.Net.StringReader)">
            <summary>
            Reads search-key &lt;string&gt; value.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_Folders">
            <summary>
            IMAP folders collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Folders.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="referenceName">Folder Path. Eg. Inbox\.</param>
            <param name="folder">Folder name.</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Folders.Add(System.String,System.Boolean)">
            <summary>
            Adds folder to folders list.
            </summary>
            <param name="folder">Full path to folder, path separator = '/'. Eg. Inbox/myFolder .</param>
            <param name="selectable">Gets or sets if folder is selectable(SELECT command can select this folder).</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Folders.AstericMatch(System.String,System.String)">
            <summary>
            Checks if specified text matches to specified asteric pattern.
            </summary>
            <param name="pattern">Asteric pattern. Foe example: *xxx,*xxx*,xx*aa*xx, ... .</param>
            <param name="text">Text to match.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_Folders.FolderMatches(System.String,System.String)">
            <summary>
            Gets if folder matches to specified folder pattern.
            </summary>
            <param name="folderPattern">Folder pattern. * and % between path separators have same meaning (asteric pattern). 
            If % is at the end, then matches only last folder child folders and not child folder child folders.</param>
            <param name="folder">Folder name with full path.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Folders.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_Folders.Folders">
            <summary>
            Gest list of IMAP folders.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs">
            <summary>
            Provides data for DeleteFolderACL event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Owner IMAP session.</param>
            <param name="folderName">Folder name which ACL to delete.</param>
            <param name="userName">User name which ACL to delete.</param>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs.Folder">
            <summary>
            Gets folder name which ACL to delete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs.UserName">
            <summary>
            Gets user name which ACL to delete.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_DELETEACL_eArgs.ErrorText">
            <summary>
            Gets or sets error text returned to connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Dns.Client.RCODE">
            <summary>
            Dns server reply codes.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.NO_ERROR">
            <summary>
            No error condition.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.FORMAT_ERRROR">
            <summary>
            Format error - The name server was unable to interpret the query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.SERVER_FAILURE">
            <summary>
            Server failure - The name server was unable to process this query due to a problem with the name server.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.NAME_ERROR">
            <summary>
            Name Error - Meaningful only for responses from an authoritative name server, this code signifies that the
            domain name referenced in the query does not exist.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.NOT_IMPLEMENTED">
            <summary>
            Not Implemented - The name server does not support the requested kind of query.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.Dns.Client.RCODE.REFUSED">
            <summary>
            Refused - The name server refuses to perform the specified operation for policy reasons.
            </summary>
        </member>
        <member name="T:LumiSoft.Data.lsDB.DataPage">
            <summary>
            Data page.
            </summary>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DataPage.#ctor(System.Int32,LumiSoft.Data.lsDB.DbFile,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="dataPageDataAreaSize">Specifies how much data data page can store.</param>
            <param name="ownerDB">Owner DB file..</param>
            <param name="startOffset">Data page start offset pointer.</param>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DataPage.CreateDataPage(System.Int32,System.Boolean,System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Creates new data page structure.
            </summary>
            <param name="dataPageDataAreaSize">Specifies how much data can data page store.</param>
            <param name="used">Specifies if data page is used or free space. If this value is false, all toher parameters aren't stored.</param>
            <param name="ownerID">Owner data object ID.</param>
            <param name="ownerDataPagePointer">This data page owner data page pointer. This value can be 0, if no owner.</param>
            <param name="nextDataPagePointer">Data page pointer, what continues this data page. This value can be 0 if, data page won't spread to multiple data pages.</param>
            <param name="data">Data what data page stores. Maximum length is dataPageDataAreaSize.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DataPage.ReadData(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads specified amount data to buffer.
            </summary>
            <param name="buffer">Buffer where to store data.</param>
            <param name="startIndexInBuffer">Start index in buffer where data storing begins. Start index is included.</param>
            <param name="length">Number of bytes to read.</param>
            <param name="startOffset">Zero based offset of data area.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DataPage.ReadData(System.Int32,System.Int32)">
            <summary>
            Reads data page data. Offset byte is included.
            </summary>
            <param name="startOffset">Zero based offset of data area.</param>
            <param name="length">Specifies how much data to read.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Data.lsDB.DataPage.WriteData(System.Byte[])">
            <summary>
            Writed data to data page.
            </summary>
            <param name="data">Data to write.</param>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.DataPageSize">
            <summary>
            Gets data page size on disk in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.Pointer">
            <summary>
            Gets this data page address (offset in database file).
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.Used">
            <summary>
            Gets or sets if data page used or free space.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.OwnerID">
            <summary>
            Gets owner object id what owns this data page.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.OwnerDataPagePointer">
            <summary>
            Gets or sets owner data page pointer.
            Returns 0 if this is first data page of multiple data pages or only data page.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.NextDataPagePointer">
            <summary>
            Gets or sets pointer to data page what continues this data page.
            Returns 0 if data page has enough room for data and there isn't continuing data page.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.DataAreaSize">
            <summary>
            Gets how many data data page can store.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.StoredDataLength">
            <summary>
            Gets stored data length.
            </summary>
        </member>
        <member name="P:LumiSoft.Data.lsDB.DataPage.SpaceAvailable">
            <summary>
            Gets how much free data space is availabe in data page.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetMessagesInfo">
            <summary>
            Provides data to event GetMessagesInfo.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetMessagesInfo.#ctor(LumiSoft.Net.IMAP.Server.IMAP_Session,LumiSoft.Net.IMAP.Server.IMAP_SelectedFolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetMessagesInfo.Session">
            <summary>
            Gets current IMAP session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetMessagesInfo.FolderInfo">
            <summary>
            Gets folder info.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Server.IMAP_eArgs_GetMessagesInfo.ErrorText">
            <summary>
            Gets or sets custom error text, which is returned to client. Null value means no error.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager">
            <summary>
            HTTP digest authentication nonce manager.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.Dispose">
            <summary>
            Cleans up nay resource being used.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.CreateNonce">
            <summary>
            Creates new nonce and adds it to active nonces collection.
            </summary>
            <returns>Returns new created nonce.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceExists(System.String)">
            <summary>
            Checks if specified nonce exists in active nonces collection.
            </summary>
            <param name="nonce">Nonce to check.</param>
            <returns>Returns true if nonce exists in active nonces collection, otherwise returns false.</returns>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.RemoveNonce(System.String)">
            <summary>
            Removes specified nonce from active nonces collection.
            </summary>
            <param name="nonce">Nonce to remove.</param>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.RemoveExpiredNonces">
            <summary>
            Removes not used nonces what has expired.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.ExpireTime">
            <summary>
            Gets or sets nonce expire time in seconds.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry">
            <summary>
            This class represents nonce entry in active nonces collection.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="nonce"></param>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.Nonce">
            <summary>
            Gets nonce value.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.AUTH.Auth_HttpDigest_NonceManager.NonceEntry.CreateTime">
            <summary>
            Gets time when this nonce entry was created.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.SIP_Utils">
            <summary>
            SIP helper methods.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.ParseAddress(System.String)">
            <summary>
            Parses address from SIP To: header field.
            </summary>
            <param name="to">SIP header To: value.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.UriToRequestUri(System.String)">
            <summary>
            Converts URI to Request-URI by removing all not allowed Request-URI parameters from URI.
            </summary>
            <param name="uri">URI value.</param>
            <returns>Returns valid Request-URI value.</returns>
        </member>
        <member name="M:LumiSoft.Net.SIP.SIP_Utils.ToEndPointInfo(LumiSoft.Net.SocketEx,System.Boolean)">
            <summary>
            Converts socket local or remote end point to SIP_EndPointInfo.
            </summary>
            <param name="socket">Socket to use.</param>
            <param name="local_remote">Specifies if loacl or remote end point of socket is used.</param>
            <returns>Returns SIP end point info.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>socket</b> is null.</exception>
        </member>
        <member name="T:LumiSoft.Net.Log_EventArgs">
            <summary>
            Provides data for the SessionLog event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Log_EventArgs.#ctor(LumiSoft.Net.SocketLogger,System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="logger">Socket logger.</param>
            <param name="firstLogPart">Specifies if first log part of multipart log.</param>
            <param name="lastLogPart">Specifies if last log part (logging ended).</param>
        </member>
        <member name="P:LumiSoft.Net.Log_EventArgs.LogText">
            <summary>
            Gets log text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Log_EventArgs.Logger">
            <summary>
            Gets logger.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Error_EventArgs">
            <summary>
            Provides data for the SysError event for servers.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Error_EventArgs.#ctor(System.Exception,System.Diagnostics.StackTrace)">
            <summary>
            Default constructor.
            </summary>
            <param name="x"></param>
            <param name="stackTrace"></param>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.Exception">
            <summary>
            Occured error's exception.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.StackTrace">
            <summary>
            Occured error's stacktrace.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Error_EventArgs.Text">
            <summary>
            Gets comment text.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType">
            <summary>
            Specifies SIP status code type. Defined in rfc 3261.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.Provisional">
            <summary>
            Request received, continuing to process the request. 1xx status code.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.Success">
            <summary>
            Action was successfully received, understood, and accepted. 2xx status code.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.Redirection">
            <summary>
            Request must be redirected(forwarded). 3xx status code.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.RequestFailure">
            <summary>
            Request contains bad syntax or cannot be fulfilled at this server. 4xx status code.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.ServerFailure">
            <summary>
            Server failed to fulfill a valid request. 5xx status code.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SIP.Stack.SIP_StatusCodeType.GlobalFailure">
            <summary>
            Request cannot be fulfilled at any server. 6xx status code.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog">
            <summary>
            Implements SIP "Target-Dialog" value. Defined in RFC 4538.
            </summary>
            <remarks>
            <code>
            RFC 4538 Syntax:
                Target-Dialog = callid *(SEMI td-param)    ;callid from RFC 3261
                td-param      = remote-param / local-param / generic-param
                remote-param  = "remote-tag" EQUAL token
                local-param   = "local-tag" EQUAL token
            </code>
            </remarks>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.#ctor(System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="value">SIP Target-Dialog value.</param>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.Parse(System.String)">
            <summary>
            Parses "Target-Dialog" from specified value.
            </summary>
            <param name="value">SIP "Target-Dialog" value.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>value</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.Parse(LumiSoft.Net.StringReader)">
            <summary>
            Parses "Target-Dialog" from specified reader.
            </summary>
            <param name="reader">Reader from where to parse.</param>
            <exception cref="T:System.ArgumentNullException">Raised when <b>reader</b> is null.</exception>
            <exception cref="T:LumiSoft.Net.SIP.Message.SIP_ParseException">Raised when invalid SIP message.</exception>
        </member>
        <member name="M:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.ToStringValue">
            <summary>
            Converts this to valid "Target-Dialog" value.
            </summary>
            <returns>Returns "Target-Dialog" value.</returns>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.CallID">
            <summary>
            Gets or sets call ID.
            </summary>
            <exception cref="T:System.ArgumentNullException">Is raised when null value is passed.</exception>
            <exception cref="T:System.ArgumentException">Is raised when invalid CallID value is passed.</exception>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.RemoteTag">
            <summary>
            Gets or sets 'remote-tag' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SIP.Message.SIP_t_TargetDialog.LocalTag">
            <summary>
            Gets or sets 'local-tag' parameter value. Value null means not specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.Mime.Mime">
            <summary>
            Class for creating,parsing,modifing rfc 2822 mime messages.
            </summary>
            <remarks>
            <code>
            
            Message examples:
            
            <B>Simple message:</B>
            
            //--- Beginning of message
            From: sender@domain.com
            To: recipient@domain.com
            Subject: Message subject.
            Content-Type: text/plain
            
            Message body text. Bla blaa
            blaa,blaa.
            //--- End of message
            
            
            In simple message MainEntity is whole message.
            
            <B>Message with attachments:</B>
            
            //--- Beginning of message
            From: sender@domain.com
            To: recipient@domain.com
            Subject: Message subject.
            Content-Type: multipart/mixed; boundary="multipart_mixed"
            
            --multipart_mixed	/* text entity */
            Content-Type: text/plain
            
            Message body text. Bla blaa
            blaa,blaa.	
            --multipart_mixed	/* attachment entity */
            Content-Type: application/octet-stream
            
            attachment_data
            --multipart_mixed--
            //--- End of message
            
            MainEntity is multipart_mixed entity and text and attachment entities are child entities of MainEntity.
            </code>
            </remarks>
            <example>
            <code>
            // Parsing example:
            Mime m = Mime.Parse("message.eml");
            // Do your stuff with mime
            </code>
            <code>
            // Create simple message with simple way:
            AddressList from = new AddressList();
            from.Add(new MailboxAddress("dispaly name","user@domain.com"));
            AddressList to = new AddressList();
            to.Add(new MailboxAddress("dispaly name","user@domain.com"));
            
            Mime m = Mime.CreateSimple(from,to,"test subject","test body text","");
            </code>
            <code>
            // Creating a new simple message
            Mime m = new Mime();
            MimeEntity mainEntity = m.MainEntity;
            // Force to create From: header field
            mainEntity.From = new AddressList();
            mainEntity.From.Add(new MailboxAddress("dispaly name","user@domain.com"));
            // Force to create To: header field
            mainEntity.To = new AddressList();
            mainEntity.To.Add(new MailboxAddress("dispaly name","user@domain.com"));
            mainEntity.Subject = "subject";
            mainEntity.ContentType = MediaType_enum.Text_plain;
            mainEntity.ContentTransferEncoding = ContentTransferEncoding_enum.QuotedPrintable;
            mainEntity.DataText = "Message body text.";
            
            m.ToFile("message.eml");
            </code>
            <code>
            // Creating message with text and attachments
            Mime m = new Mime();
            MimeEntity mainEntity = m.MainEntity;
            // Force to create From: header field
            mainEntity.From = new AddressList();
            mainEntity.From.Add(new MailboxAddress("dispaly name","user@domain.com"));
            // Force to create To: header field
            mainEntity.To = new AddressList();
            mainEntity.To.Add(new MailboxAddress("dispaly name","user@domain.com"));
            mainEntity.Subject = "subject";
            mainEntity.ContentType = MediaType_enum.Multipart_mixed;
            
            MimeEntity textEntity = mainEntity.ChildEntities.Add();
            textEntity.ContentType = MediaType_enum.Text_plain;
            textEntity.ContentTransferEncoding = ContentTransferEncoding_enum.QuotedPrintable;
            textEntity.DataText = "Message body text.";
            
            MimeEntity attachmentEntity = mainEntity.ChildEntities.Add();
            attachmentEntity.ContentType = MediaType_enum.Application_octet_stream;
            attachmentEntity.ContentDisposition = ContentDisposition_enum.Attachment;
            attachmentEntity.ContentTransferEncoding = ContentTransferEncoding_enum.Base64;
            attachmentEntity.ContentDisposition_FileName = "yourfile.xxx";
            attachmentEntity.DataFromFile("yourfile.xxx");
            // or
            attachmentEntity.Data = your_attachment_data;
            </code>
            </example>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.Parse(System.Byte[])">
            <summary>
            Parses mime message from byte[] data.
            </summary>
            <param name="data">Mime message data.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.Parse(System.String)">
            <summary>
            Parses mime message from file.
            </summary>
            <param name="fileName">Mime message file.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.Parse(System.IO.Stream)">
            <summary>
            Parses mime message from stream.
            </summary>
            <param name="stream">Mime message stream.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.CreateSimple(LumiSoft.Net.Mime.AddressList,LumiSoft.Net.Mime.AddressList,System.String,System.String,System.String)">
            <summary>
            Creates simple mime message.
            </summary>
            <param name="from">Header field From: value.</param>
            <param name="to">Header field To: value.</param>
            <param name="subject">Header field Subject: value.</param>
            <param name="bodyText">Body text of message. NOTE: Pass null is body text isn't wanted.</param>
            <param name="bodyHtml">Body HTML text of message. NOTE: Pass null is body HTML text isn't wanted.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.CreateSimple(LumiSoft.Net.Mime.AddressList,LumiSoft.Net.Mime.AddressList,System.String,System.String,System.String,System.String[])">
            <summary>
            Creates simple mime message with attachments.
            </summary>
            <param name="from">Header field From: value.</param>
            <param name="to">Header field To: value.</param>
            <param name="subject">Header field Subject: value.</param>
            <param name="bodyText">Body text of message. NOTE: Pass null is body text isn't wanted.</param>
            <param name="bodyHtml">Body HTML text of message. NOTE: Pass null is body HTML text isn't wanted.</param>
            <param name="attachmentFileNames">Attachment file names. Pass null if no attachments. NOTE: File name must contain full path to file, for example: c:\test.pdf.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToStringData">
            <summary>
            Stores mime message to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToByteData">
            <summary>
            Stores mime message to byte[].
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToFile(System.String)">
            <summary>
            Stores mime message to specified file.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.ToStream(System.IO.Stream)">
            <summary>
            Stores mime message to specified stream. Stream position stays where mime writing ends.
            </summary>
            <param name="storeStream">Stream where to store mime message.</param>
        </member>
        <member name="M:LumiSoft.Net.Mime.Mime.GetEntities(LumiSoft.Net.Mime.MimeEntityCollection,System.Collections.Generic.List{LumiSoft.Net.Mime.MimeEntity})">
            <summary>
            Gets mime entities, including nested entries. 
            </summary>
            <param name="entities"></param>
            <param name="allEntries"></param>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.MainEntity">
            <summary>
            Message main(top-level) entity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.MimeEntities">
            <summary>
            Gets all mime entities contained in message, including child entities.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.Attachments">
            <summary>
            Gets attachment entities. Entity is considered as attachmnet if:<p/>
                *) Content-Disposition: attachment (RFC 2822 message)<p/>
                *) Content-Disposition: filename = "" is specified  (RFC 2822 message)<p/>
                *) Content-Type: name = "" is specified  (old RFC 822 message)<p/>
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.BodyText">
            <summary>
            Gets message body text. Returns null if no body text specified.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.Mime.Mime.BodyHtml">
            <summary>
            Gets message body html. Returns null if no body html text specified.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo">
            <summary>
            IMAP namespaces info. Defined in RFC 2342.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo.#ctor(LumiSoft.Net.IMAP.Client.IMAP_Namespace[],LumiSoft.Net.IMAP.Client.IMAP_Namespace[],LumiSoft.Net.IMAP.Client.IMAP_Namespace[])">
            <summary>
            Default constructor.
            </summary>
            <param name="personalNamespaces">IMAP server "Personal Namespaces".</param>
            <param name="otherUsersNamespaces">IMAP server "Other Users Namespaces".</param>
            <param name="sharedNamespaces">IMAP server "Shared Namespaces".</param>
        </member>
        <member name="M:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo.Parse(System.String)">
            <summary>
            Parses namespace info from IMAP NAMESPACE response string.
            </summary>
            <param name="namespaceString">IMAP NAMESPACE response string.</param>
            <returns></returns>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo.PersonalNamespaces">
            <summary>
            Gets IMAP server "Personal Namespaces". Returns null if namespace not defined.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo.OtherUsersNamespaces">
            <summary>
            Gets IMAP server "Other Users Namespaces". Returns null if namespace not defined.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.IMAP.Client.IMAP_NamespacesInfo.SharedNamespaces">
            <summary>
            Gets IMAP server "Shared Namespaces". Returns null if namespace not defined.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.MessageStoringCompleted_eArgs">
            <summary>
            This class provides data for the MessageStoringCompleted event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.MessageStoringCompleted_eArgs.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String,System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to calling SMTP session.</param>
            <param name="errorText">Gets errors what happened on storing message or null if no errors.</param>
            <param name="messageStream">Gets message stream where messages was stored. Stream postions is End of Stream, where message storing ended.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.MessageStoringCompleted_eArgs.Session">
            <summary>
            Gets reference to smtp session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.MessageStoringCompleted_eArgs.ErrorText">
            <summary>
            Gets errors what happened on storing message or null if no errors.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.MessageStoringCompleted_eArgs.MessageStream">
            <summary>
            Gets message stream where messages was stored. Stream postions is End of Stream, where message storing ended.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.MessageStoringCompleted_eArgs.ServerReply">
            <summary>
            Gets SMTP server reply info. You can use this property for specifying custom reply text and optionally SMTP reply code.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.AuthUser_EventArgs">
            <summary>
            Provides data for the AuthUser event for POP3_Server and SMTP_Server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.AuthUser_EventArgs.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to pop3 session.</param>
            <param name="userName">Username.</param>
            <param name="passwData">Password data.</param>
            <param name="data">Authentication specific data(as tag).</param>
            <param name="authType">Authentication type.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.AuthUser_EventArgs.Session">
            <summary>
            Gets reference to smtp session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.AuthUser_EventArgs.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.AuthUser_EventArgs.PasswData">
            <summary>
            Password data. eg. for AUTH=PLAIN it's password and for AUTH=APOP it's md5HexHash.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.AuthUser_EventArgs.AuthData">
            <summary>
            Authentication specific data(as tag).
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.AuthUser_EventArgs.AuthType">
            <summary>
            Authentication type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.AuthUser_EventArgs.Validated">
            <summary>
            Gets or sets if user is valid.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.AuthUser_EventArgs.ReturnData">
            <summary>
            Gets or sets authentication data what must be returned for connected client.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.AuthUserEventHandler">
            <summary>
            Represents the method that will handle the AuthUser event for SMTP_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A AuthUser_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.ValidateMailFromHandler">
            <summary>
            Represents the method that will handle the ValidateMailFrom event for SMTP_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A ValidateSender_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.ValidateMailToHandler">
            <summary>
            Represents the method that will handle the ValidateMailTo event for SMTP_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A ValidateRecipient_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.ValidateMailboxSize">
            <summary>
            Represents the method that will handle the ValidateMailboxSize event for SMTP_Server.
            </summary>
            <param name="sender">The source of the event. </param>
            <param name="e">A ValidateMailboxSize_EventArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.GetMessageStoreStreamHandler">
            <summary>
            Represents the method that will handle the GetMessageStoreStream event for SMTP_Server.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A GetMessageStoreStream_eArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.MessageStoringCompletedHandler">
            <summary>
            Represents the method that will handle the MessageStoringCompleted event for SMTP_Server.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A MessageStoringCompleted_eArgs that contains the event data.</param>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_Server">
            <summary>
            SMTP server component.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.#ctor">
            <summary>
            Defalut constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.InitNewSession(System.Net.Sockets.Socket,LumiSoft.Net.BindInfo)">
            <summary>
            Initialize and start new session here. Session isn't added to session list automatically, 
            session must add itself to server session list by calling AddSession().
            </summary>
            <param name="socket">Connected client socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.OnValidate_IpAddress(LumiSoft.Net.SMTP.Server.SMTP_Session)">
            <summary>
            Raises event ValidateIP event.
            </summary>
            <param name="session">Reference to current smtp session.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.OnAuthUser(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String,System.String,System.String,LumiSoft.Net.AuthType)">
            <summary>
            Raises event AuthUser.
            </summary>
            <param name="session">Reference to current smtp session.</param>
            <param name="userName">User name.</param>
            <param name="passwordData">Password compare data,it depends of authentication type.</param>
            <param name="data">For md5 eg. md5 calculation hash.It depends of authentication type.</param>
            <param name="authType">Authentication type.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.OnValidate_MailFrom(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String,System.String)">
            <summary>
            Raises event ValidateMailFrom.
            </summary>
            <param name="session"></param>
            <param name="reverse_path"></param>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.OnValidate_MailTo(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String,System.String,System.Boolean)">
            <summary>
            Raises event ValidateMailTo.
            </summary>
            <param name="session"></param>
            <param name="forward_path"></param>
            <param name="email"></param>
            <param name="authenticated"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.Validate_MailBoxSize(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String,System.Int64)">
            <summary>
            Raises event ValidateMailboxSize.
            </summary>
            <param name="session"></param>
            <param name="eAddress"></param>
            <param name="messageSize"></param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.OnGetMessageStoreStream(LumiSoft.Net.SMTP.Server.SMTP_Session)">
            <summary>
            Raises event GetMessageStoreStream.
            </summary>
            <param name="session">Reference to calling SMTP session.</param>
            <returns></returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Server.OnMessageStoringCompleted(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String,System.IO.Stream)">
            <summary>
            Raises event MessageStoringCompleted.
            </summary>
            <param name="session">Reference to calling SMTP session.</param>
            <param name="errorText">Null if no errors, otherwise conatians error text. If errors happened that means that messageStream is incomplete.</param>
            <param name="messageStream">Stream where message was stored.</param>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Server.ValidateIPAddress">
            <summary>
            Occurs when new computer connected to SMTP server.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Server.AuthUser">
            <summary>
            Occurs when connected user tryes to authenticate.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Server.ValidateMailFrom">
            <summary>
            Occurs when server needs to validate sender.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Server.ValidateMailTo">
            <summary>
            Occurs when server needs to validate recipient.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Server.ValidateMailboxSize">
            <summary>
            Occurs when server needs to validate recipient mailbox size.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Server.GetMessageStoreStream">
            <summary>
            Occurs when server needs to get stream where to store incoming message.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Server.MessageStoringCompleted">
            <summary>
            Occurs when server has finished message storing.
            </summary>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Server.SMTP_Server.SessionLog">
            <summary>
            Occurs when SMTP session log is available.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.GreetingText">
            <summary>
            Gets or sets server greeting text.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.MaxConnectionsPerIP">
            <summary>
            Gets or sets maximum allowed conncurent connections from 1 IP address. Value 0 means unlimited connections.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.MaxMessageSize">
            <summary>
            Maximum message size in bytes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.MaxRecipients">
            <summary>
            Maximum recipients per message.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.SupportedAuthentications">
            <summary>
            Gets or sets server supported authentication types.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Server.Sessions">
            <summary>
            Gets active sessions.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.CommadCompleted">
            <summary>
            Is called when asynchronous command had completed.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SmtpClientEx">
            <summary>
            SMTP client.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.Client.SmtpClientEx.m_CERT">
            <summary>
            m_CERT by default is set to true
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Dispose">
            <summary>
            Cleasns up resources and disconnect smtp client if open.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.String,System.Int32)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect. Default SMTP port is 25 and SSL port is 465.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.Net.IPEndPoint,System.String,System.Int32)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connect(System.Net.IPEndPoint,System.String,System.Int32,System.Boolean)">
            <summary>
            Connects to sepcified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL. Default SMTP port is 25 and SSL port is 465.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.String,System.Int32,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.String,System.Int32,System.Boolean,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.Net.IPEndPoint,System.String,System.Int32,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect(System.Net.IPEndPoint,System.String,System.Int32,System.Boolean,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts connection to specified host.
            </summary>
            <param name="localEndpoint">Sets local endpoint. Pass null, to use default.</param>
            <param name="host">Host name or IP address.</param>
            <param name="port">Port where to connect.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="callback">Callback to be called if connect ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginConnect_workerThread(System.Object)">
            <summary>
            Is called from ThreadPool Thread. This method just call synchrounous Connect.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Disconnect">
            <summary>
            Disconnects smtp client from server.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.StartTLS">
            <summary>
            Switches SMTP connection to SSL.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginStartTLS(LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Start TLS(SSL) negotiation asynchronously.
            </summary>
            <param name="callback">The method to be called when the asynchronous StartTLS operation is completed.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginStartTLS_workerThread(System.Object)">
            <summary>
            Is called from ThreadPool Thread. This method just call synchrounous StartTLS.
            </summary>
            <param name="tag">User data.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Ehlo(System.String)">
            <summary>
            Does EHLO command. If server don't support EHLO, tries HELO.
            </summary>
            <param name="hostName">Host name which is reported to SMTP server.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginEhlo(System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begins EHLO command.
            </summary>
            <param name="hostName">Host name which is reported to SMTP server.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnEhloSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished EHLO command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnEhloReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading EHLO command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnHeloSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished HELO command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnHeloReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading EHLO command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Authenticate(System.String,System.String)">
            <summary>
            Does AUTH command.
            </summary>
            <param name="userName">Uesr name.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginAuthenticate(System.String,System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begins authenticate.
            </summary>
            <param name="userName">Uesr name.</param>
            <param name="password">Password.</param> 
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5SendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished AUTH CRAM-MD5 command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5ReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading AUTH CRAM-MD% server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5UserPwdSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending username and password to smtp server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthCramMd5UserPwdReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading user name and password send server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished AUTH LOGIN command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading MAIL FROM: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginUserSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending user name to SMTP server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginUserReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading AUTH LOGIN user send server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginPasswordSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending password to SMTP server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnAuthLoginPwdReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading AUTH LOGIN password send server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.SetSender(System.String,System.Int64)">
            <summary>
            Does MAIL FROM: command.
            </summary>
            <param name="senderEmail">Sender email address what is reported to smtp server</param>
            <param name="messageSize">Message size in bytes or -1 if message size isn't known.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginSetSender(System.String,System.Int64,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begin setting sender.
            </summary>
            <param name="senderEmail">Sender email address what is reported to smtp server.</param>
            <param name="messageSize">Message size in bytes or -1 if message size isn't known.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnMailSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished MAIL FROM: command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnMailReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading MAIL FROM: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param> 
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.AddRecipient(System.String)">
            <summary>
            Does RCPT TO: command.
            </summary>
            <param name="recipientEmail">Recipient email address.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginAddRecipient(System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Begin adding recipient.
            </summary>
            <param name="recipientEmail">Recipient email address.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnRcptSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished RCPT TO: command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnRcptReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading RCPT TO: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.SendMessage(System.IO.Stream)">
            <summary>
            Sends message to server. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="message">Message what will be sent to server. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.BeginSendMessage(System.IO.Stream,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Starts sending message.
            </summary>
            <param name="message">Message what will be sent to server. NOTE: Message sending starts from message stream current posision.</param>
            <param name="callback">Callback to be called if command ends.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnBdatSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished BDAT command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnBdatDataSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished sending BDAT message data to smtp server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnBdatReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading BDAT: command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished DATA command sending.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading DATA command server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataMessageSendFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has sending MESSAGE to smtp server.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.OnDataMessageSendReadServerResponseFinished(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when smtp client has finished reading MESSAGE send smtp server response line.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Reset">
            <summary>
            Send RSET command to SMTP server, resets SMTP session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.HandleSocketError(LumiSoft.Net.SocketCallBackResult,System.Exception)">
            <summary>
            Handles socket errors.
            </summary>
            <param name="result"></param>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.GetDestinations(System.String)">
            <summary>
            Gets specified email domain possible connect points. Values are in priority descending order.
            </summary>
            <param name="domain">Email address or domain name.</param>
            <returns>Returns possible email server connection points.</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,LumiSoft.Net.Mime.Mime)">
            <summary>
            Sends specified message to specified smart host.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="message">Mime message to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,System.String,System.String,LumiSoft.Net.Mime.Mime)">
            <summary>
            Sends specified message to specified smart host.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="message">Mime message to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.Boolean,System.String,System.String,System.String,LumiSoft.Net.Mime.Mime)">
            <summary>
            Sends specified message to specified smart host.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Default SMTP port is 25 and SSL port is 465.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="message">Mime message to send.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends specified message to specified smart host. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="from">From address reported to SMTP server.</param>
            <param name="to">Message recipients.</param>
            <param name="messageStream">Message stream. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends specified message to specified smart host. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Normally this is 25.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="from">From address reported to SMTP server.</param>
            <param name="to">Message recipients.</param>
            <param name="messageStream">Message stream. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.QuickSendSmartHost(System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String[],System.IO.Stream)">
            <summary>
            Sends specified message to specified smart host. NOTE: Message sending starts from message stream current posision.
            </summary>
            <param name="smartHost">Smarthost name or IP.</param>
            <param name="port">SMTP port number. Default SMTP port is 25 and SSL port is 465.</param>
            <param name="ssl">Specifies if to connected via SSL.</param>
            <param name="hostName">Host name reported to SMTP server.</param>
            <param name="userName">SMTP user name. Note: Pass empty string if no authentication wanted.</param>
            <param name="password">SMTP password.</param>
            <param name="from">From address reported to SMTP server.</param>
            <param name="to">Message recipients.</param>
            <param name="messageStream">Message stream. NOTE: Message sending starts from message stream current posision.</param>
        </member>
        <member name="E:LumiSoft.Net.SMTP.Client.SmtpClientEx.SessionLog">
            <summary>
            Occurs when SMTP session has finished and session log is available.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.LocalEndpoint">
            <summary>
            Gets local endpoint. Returns null if smtp client isn't connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.RemoteEndPoint">
            <summary>
            Gets remote endpoint. Returns null if smtp client isn't connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.DnsServers">
            <summary>
            Gets or sets dns servers.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Connected">
            <summary>
            Gets if smtp client is connected.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Authenticated">
            <summary>
            Gets if pop3 client is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.LastDataTime">
            <summary>
            Gets when was last activity.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.SessionActiveLog">
            <summary>
            Gets log entries that are currently in log buffer. Returns null if socket not connected or no logging enabled.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.ReadedCount">
            <summary>
            Gets how many bytes are readed through smtp client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.WrittenCount">
            <summary>
            Gets how many bytes are written through smtp client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.IsSecureConnection">
            <summary>
            Gets if the connection is an SSL connection.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data">
            <summary>
            Provides state date for BeginAuthenticate method.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.#ctor(System.String,System.String,LumiSoft.Net.SMTP.Client.CommadCompleted)">
            <summary>
            Default constructor.
            </summary>
            <param name="userName">User name.</param>
            <param name="password">Password.</param>
            <param name="callback">Callback what must be called when aynchrounous execution completes.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.UserName">
            <summary>
            Gets user name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.Password">
            <summary>
            Gets user password.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.Callback">
            <summary>
            Gets callback what must be called when aynchrounous execution completes.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Client.SmtpClientEx.Auth_state_data.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.ValidateSender_EventArgs">
            <summary>
            Provides data for the ValidateMailFrom event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.ValidateSender_EventArgs.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to smtp session.</param>
            <param name="mailFrom">Sender email address.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateSender_EventArgs.Session">
            <summary>
            Gets reference to smtp session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateSender_EventArgs.MailFrom">
            <summary>
            Sender's email address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateSender_EventArgs.ErrorText">
            <summary>
            Gets or sets error text reported to connected client.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateSender_EventArgs.Validated">
            <summary>
            Gets or sets if sender is ok.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_Session">
            <summary>
            SMTP Session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.#ctor(System.String,LumiSoft.Net.SocketEx,LumiSoft.Net.BindInfo,LumiSoft.Net.SMTP.Server.SMTP_Server)">
            <summary>
            Default constructor.
            </summary>
            <param name="sessionID">Session ID.</param>
            <param name="socket">Server connected socket.</param>
            <param name="bindInfo">BindInfo what accepted socket.</param>
            <param name="server">Reference to server.</param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.StartSession">
            <summary>
            Starts session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.EndSession">
            <summary>
            Ends session, closes socket.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.Kill">
            <summary>
            Kill this session.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnSessionTimeout">
            <summary>
            Is called by server when session has timed out.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.OnError(System.Exception)">
            <summary>
            Is called when error occures.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.BeginRecieveCmd">
            <summary>
            Starts recieveing command.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.EndRecieveCmd(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called if command is recieved.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.SwitchCommand(System.String)">
            <summary>
            Executes SMTP command.
            </summary>
            <param name="SMTP_commandTxt">Original command text.</param>
            <returns>Returns true if must end session(command loop).</returns>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.EndDataCmd(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when DATA command is finnished.
            </summary>
            <param name="result"></param>
            <param name="count"></param>
            <param name="exception"></param>
            <param name="tag"></param>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Session.EndSend(LumiSoft.Net.SocketCallBackResult,System.Int64,System.Exception,System.Object)">
            <summary>
            Is called when asynchronous send completes.
            </summary>
            <param name="result">If true, then send was successfull.</param>
            <param name="count">Count sended.</param>
            <param name="exception">Exception happend on send. NOTE: available only is result=false.</param>
            <param name="tag">User data.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.EhloName">
            <summary>
            Gets client reported EHLO/HELO name.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.BodyType">
            <summary>
            Gets body type.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.MailFrom">
            <summary>
            Gets sender.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Session.MailTo">
            <summary>
            Gets recipients.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.ValidateRecipient_EventArgs">
            <summary>
            Provides data for the ValidateMailTo event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.ValidateRecipient_EventArgs.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to smtp session.</param>
            <param name="mailTo">Recipient email address.</param>
            <param name="authenticated">Specifies if connected user is authenticated.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateRecipient_EventArgs.Session">
            <summary>
            Gets reference to smtp session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateRecipient_EventArgs.MailTo">
            <summary>
            Recipient's email address.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateRecipient_EventArgs.Authenticated">
            <summary>
            Gets if connected user is authenticated.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateRecipient_EventArgs.ConnectedIP">
            <summary>
            IP address of computer, which is sending mail to here.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateRecipient_EventArgs.Validated">
            <summary>
            Gets or sets if reciptient is allowed to send mail here.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateRecipient_EventArgs.LocalRecipient">
            <summary>
            Gets or sets if recipient is local or needs relay.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator">
            <summary>
            SMTP command order validator.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.Reset">
            <summary>
            Resets state.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.MayHandle_MAIL">
            <summary>
            Gets if may handle MAIL command.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.MayHandle_RCPT">
            <summary>
            Gets if may handle RCPT command.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.MayHandle_DATA">
            <summary>
            Gets if may handle DATA command.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.MayHandle_BDAT">
            <summary>
            Gets if may handle BDAT command.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.MayHandle_AUTH">
            <summary>
            Gets if may handle AUTH command.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.Helo_ok">
            <summary>
            Gest or sets if HELO command handled.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.Authenticated">
            <summary>
            Gest or sets if AUTH command handled.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.MailFrom_ok">
            <summary>
            Gest or sets if MAIL command handled.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.RcptTo_ok">
            <summary>
            Gest or sets if RCPT command handled.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SMTP_Cmd_Validator.BDAT_Last_ok">
            <summary>
            Gest or sets if BinaryMime.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.ValidateMailboxSize_EventArgs">
            <summary>
            Provides data for the ValidateMailboxSize event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.ValidateMailboxSize_EventArgs.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session,System.String,System.Int64)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to smtp session.</param>
            <param name="eAddress">Email address of recipient.</param>
            <param name="messageSize">Message size.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateMailboxSize_EventArgs.Session">
            <summary>
            Gets reference to smtp session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateMailboxSize_EventArgs.eAddress">
            <summary>
            Email address which mailbox size to check.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateMailboxSize_EventArgs.MessageSize">
            <summary>
            Message size.NOTE: value 0 means that size is unknown.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.ValidateMailboxSize_EventArgs.IsValid">
            <summary>
            Gets or sets if mailbox size is valid.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.BodyType">
            <summary>
            Holds body(mime) type.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.BodyType.x7_bit">
            <summary>
            ASCII body.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.BodyType.x8_bit">
            <summary>
            ANSI body.
            </summary>
        </member>
        <member name="F:LumiSoft.Net.SMTP.BodyType.binary">
            <summary>
            Binary body.
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.SmtpServerReply">
            <summary>
            SMTP server reply info. This class specifies smtp reply what is returned to connected client.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.SmtpServerReply.#ctor">
            <summary>
            Default consttuctor.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SmtpServerReply.ErrorReply">
            <summary>
            Gets or sets if CustomReply is error or ok reply.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SmtpServerReply.SmtpReplyCode">
            <summary>
            Gets or sets SMTP reply code (250,500,500, ...). Value -1 means that SMTP reply code isn't specified and server uses it's defult error code. 
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.SmtpServerReply.ReplyText">
            <summary>
            Gets or sets reply text what is shown to connected client. 
            Note: Maximum lenth of reply text is 500 chars and text can contain only ASCII chars 
            without CR or LF.  
            </summary>
        </member>
        <member name="T:LumiSoft.Net.SMTP.Server.GetMessageStoreStream_eArgs">
            <summary>
            This class provides data for the GetMessageStoreStream event.
            </summary>
        </member>
        <member name="M:LumiSoft.Net.SMTP.Server.GetMessageStoreStream_eArgs.#ctor(LumiSoft.Net.SMTP.Server.SMTP_Session)">
            <summary>
            Default constructor.
            </summary>
            <param name="session">Reference to calling SMTP sesssion.</param>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.GetMessageStoreStream_eArgs.Session">
            <summary>
            Gets reference to smtp session.
            </summary>
        </member>
        <member name="P:LumiSoft.Net.SMTP.Server.GetMessageStoreStream_eArgs.StoreStream">
            <summary>
            Gets or sets Stream where to store incoming message. Storing starts from stream current position.
            </summary>
        </member>
    </members>
</doc>
